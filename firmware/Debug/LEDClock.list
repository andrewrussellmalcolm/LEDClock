
LEDClock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8b4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007e4  0800e974  0800e974  0001e974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f158  0800f158  00020238  2**0
                  CONTENTS
  4 .ARM          00000000  0800f158  0800f158  00020238  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f158  0800f158  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f158  0800f158  0001f158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f15c  0800f15c  0001f15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800f160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001224  20000238  0800f398  00020238  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000145c  0800f398  0002145c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e784  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004665  00000000  00000000  0003e9e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00043050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015d8  00000000  00000000  000447f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002084a  00000000  00000000  00045dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ee70  00000000  00000000  00066612  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a7db2  00000000  00000000  00085482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012d234  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000611c  00000000  00000000  0012d284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000238 	.word	0x20000238
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800e95c 	.word	0x0800e95c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000023c 	.word	0x2000023c
 8000104:	0800e95c 	.word	0x0800e95c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f806 	bl	8000254 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__aeabi_idiv0>:
 8000254:	4770      	bx	lr
 8000256:	46c0      	nop			; (mov r8, r8)

08000258 <buzzer_timer_callback>:

static uint32_t on_off_count;

/** */
static void buzzer_timer_callback(TIM_HandleTypeDef *timer)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	// generate bursts of square wave (and flash debug LEDs)
	if(((on_off_count++ /500) % 2) == 0)
 8000260:	4b1b      	ldr	r3, [pc, #108]	; (80002d0 <buzzer_timer_callback+0x78>)
 8000262:	681a      	ldr	r2, [r3, #0]
 8000264:	1c51      	adds	r1, r2, #1
 8000266:	4b1a      	ldr	r3, [pc, #104]	; (80002d0 <buzzer_timer_callback+0x78>)
 8000268:	6019      	str	r1, [r3, #0]
 800026a:	23fa      	movs	r3, #250	; 0xfa
 800026c:	0059      	lsls	r1, r3, #1
 800026e:	0010      	movs	r0, r2
 8000270:	f7ff ff66 	bl	8000140 <__udivsi3>
 8000274:	0003      	movs	r3, r0
 8000276:	001a      	movs	r2, r3
 8000278:	2301      	movs	r3, #1
 800027a:	4013      	ands	r3, r2
 800027c:	d115      	bne.n	80002aa <buzzer_timer_callback+0x52>
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 0);
 800027e:	2380      	movs	r3, #128	; 0x80
 8000280:	01db      	lsls	r3, r3, #7
 8000282:	4814      	ldr	r0, [pc, #80]	; (80002d4 <buzzer_timer_callback+0x7c>)
 8000284:	2200      	movs	r2, #0
 8000286:	0019      	movs	r1, r3
 8000288:	f002 fd05 	bl	8002c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 0);
 800028c:	2380      	movs	r3, #128	; 0x80
 800028e:	021b      	lsls	r3, r3, #8
 8000290:	4810      	ldr	r0, [pc, #64]	; (80002d4 <buzzer_timer_callback+0x7c>)
 8000292:	2200      	movs	r2, #0
 8000294:	0019      	movs	r1, r3
 8000296:	f002 fcfe 	bl	8002c96 <HAL_GPIO_WritePin>

		HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	009b      	lsls	r3, r3, #2
 800029e:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <buzzer_timer_callback+0x7c>)
 80002a0:	0019      	movs	r1, r3
 80002a2:	0010      	movs	r0, r2
 80002a4:	f002 fd14 	bl	8002cd0 <HAL_GPIO_TogglePin>
	else
	{
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
	}
}
 80002a8:	e00d      	b.n	80002c6 <buzzer_timer_callback+0x6e>
		HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, 1);
 80002aa:	2380      	movs	r3, #128	; 0x80
 80002ac:	01db      	lsls	r3, r3, #7
 80002ae:	4809      	ldr	r0, [pc, #36]	; (80002d4 <buzzer_timer_callback+0x7c>)
 80002b0:	2201      	movs	r2, #1
 80002b2:	0019      	movs	r1, r3
 80002b4:	f002 fcef 	bl	8002c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, 1);
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	021b      	lsls	r3, r3, #8
 80002bc:	4805      	ldr	r0, [pc, #20]	; (80002d4 <buzzer_timer_callback+0x7c>)
 80002be:	2201      	movs	r2, #1
 80002c0:	0019      	movs	r1, r3
 80002c2:	f002 fce8 	bl	8002c96 <HAL_GPIO_WritePin>
}
 80002c6:	46c0      	nop			; (mov r8, r8)
 80002c8:	46bd      	mov	sp, r7
 80002ca:	b002      	add	sp, #8
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)
 80002d0:	20000254 	.word	0x20000254
 80002d4:	48000400 	.word	0x48000400

080002d8 <buzzer_start>:

/** */
void buzzer_start(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0
	htim17.Instance = TIM17;
 80002dc:	4b13      	ldr	r3, [pc, #76]	; (800032c <buzzer_start+0x54>)
 80002de:	4a14      	ldr	r2, [pc, #80]	; (8000330 <buzzer_start+0x58>)
 80002e0:	601a      	str	r2, [r3, #0]
	htim17.Init.Prescaler = 48; // counts in microseconds
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <buzzer_start+0x54>)
 80002e4:	2230      	movs	r2, #48	; 0x30
 80002e6:	605a      	str	r2, [r3, #4]
	htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002e8:	4b10      	ldr	r3, [pc, #64]	; (800032c <buzzer_start+0x54>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
	htim17.Init.Period = 1000; // 1000us (~1kHz square wave)
 80002ee:	4b0f      	ldr	r3, [pc, #60]	; (800032c <buzzer_start+0x54>)
 80002f0:	22fa      	movs	r2, #250	; 0xfa
 80002f2:	0092      	lsls	r2, r2, #2
 80002f4:	60da      	str	r2, [r3, #12]
	htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <buzzer_start+0x54>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	611a      	str	r2, [r3, #16]
	htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80002fc:	4b0b      	ldr	r3, [pc, #44]	; (800032c <buzzer_start+0x54>)
 80002fe:	2200      	movs	r2, #0
 8000300:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&htim17);
 8000302:	4b0a      	ldr	r3, [pc, #40]	; (800032c <buzzer_start+0x54>)
 8000304:	0018      	movs	r0, r3
 8000306:	f006 f881 	bl	800640c <HAL_TIM_Base_Init>
	HAL_TIM_RegisterCallback(&htim17, HAL_TIM_PERIOD_ELAPSED_CB_ID, buzzer_timer_callback);
 800030a:	4a0a      	ldr	r2, [pc, #40]	; (8000334 <buzzer_start+0x5c>)
 800030c:	4b07      	ldr	r3, [pc, #28]	; (800032c <buzzer_start+0x54>)
 800030e:	210e      	movs	r1, #14
 8000310:	0018      	movs	r0, r3
 8000312:	f006 fdd7 	bl	8006ec4 <HAL_TIM_RegisterCallback>
	on_off_count = 0;
 8000316:	4b08      	ldr	r3, [pc, #32]	; (8000338 <buzzer_start+0x60>)
 8000318:	2200      	movs	r2, #0
 800031a:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim17);
 800031c:	4b03      	ldr	r3, [pc, #12]	; (800032c <buzzer_start+0x54>)
 800031e:	0018      	movs	r0, r3
 8000320:	f006 f8f8 	bl	8006514 <HAL_TIM_Base_Start_IT>
}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	20000798 	.word	0x20000798
 8000330:	40014800 	.word	0x40014800
 8000334:	08000259 	.word	0x08000259
 8000338:	20000254 	.word	0x20000254

0800033c <buzzer_stop>:

///** */
void buzzer_stop(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop(&htim17);
 8000340:	4b06      	ldr	r3, [pc, #24]	; (800035c <buzzer_stop+0x20>)
 8000342:	0018      	movs	r0, r3
 8000344:	f006 f8c0 	bl	80064c8 <HAL_TIM_Base_Stop>
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, 0);
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	009b      	lsls	r3, r3, #2
 800034c:	4804      	ldr	r0, [pc, #16]	; (8000360 <buzzer_stop+0x24>)
 800034e:	2200      	movs	r2, #0
 8000350:	0019      	movs	r1, r3
 8000352:	f002 fca0 	bl	8002c96 <HAL_GPIO_WritePin>
}
 8000356:	46c0      	nop			; (mov r8, r8)
 8000358:	46bd      	mov	sp, r7
 800035a:	bd80      	pop	{r7, pc}
 800035c:	20000798 	.word	0x20000798
 8000360:	48000400 	.word	0x48000400

08000364 <console_help_command>:
	{"history", "linux-like command history", console_history_command},
};

/** */
static void console_help_command(const char *command_string)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b084      	sub	sp, #16
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 800036c:	2300      	movs	r3, #0
 800036e:	60fb      	str	r3, [r7, #12]
 8000370:	e017      	b.n	80003a2 <console_help_command+0x3e>
	{
		printf("%s: %s\n", commands[idx].command, commands[idx].help_string);
 8000372:	4910      	ldr	r1, [pc, #64]	; (80003b4 <console_help_command+0x50>)
 8000374:	68fa      	ldr	r2, [r7, #12]
 8000376:	0013      	movs	r3, r2
 8000378:	005b      	lsls	r3, r3, #1
 800037a:	189b      	adds	r3, r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	5858      	ldr	r0, [r3, r1]
 8000380:	490c      	ldr	r1, [pc, #48]	; (80003b4 <console_help_command+0x50>)
 8000382:	68fa      	ldr	r2, [r7, #12]
 8000384:	0013      	movs	r3, r2
 8000386:	005b      	lsls	r3, r3, #1
 8000388:	189b      	adds	r3, r3, r2
 800038a:	009b      	lsls	r3, r3, #2
 800038c:	18cb      	adds	r3, r1, r3
 800038e:	3304      	adds	r3, #4
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <console_help_command+0x54>)
 8000394:	0001      	movs	r1, r0
 8000396:	0018      	movs	r0, r3
 8000398:	f00c fda8 	bl	800ceec <iprintf>
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	3301      	adds	r3, #1
 80003a0:	60fb      	str	r3, [r7, #12]
 80003a2:	68fb      	ldr	r3, [r7, #12]
 80003a4:	2b04      	cmp	r3, #4
 80003a6:	d9e4      	bls.n	8000372 <console_help_command+0xe>
	}
}
 80003a8:	46c0      	nop			; (mov r8, r8)
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	46bd      	mov	sp, r7
 80003ae:	b004      	add	sp, #16
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	20000000 	.word	0x20000000
 80003b8:	0800ea64 	.word	0x0800ea64

080003bc <console_test_command>:

/** */
static void console_test_command(const char *command_string)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	printf("test command %s\n", command_string);
 80003c4:	687a      	ldr	r2, [r7, #4]
 80003c6:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <console_test_command+0x2c>)
 80003c8:	0011      	movs	r1, r2
 80003ca:	0018      	movs	r0, r3
 80003cc:	f00c fd8e 	bl	800ceec <iprintf>
	fprintf(stderr, "test command %s\n", command_string);
 80003d0:	4b06      	ldr	r3, [pc, #24]	; (80003ec <console_test_command+0x30>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	68db      	ldr	r3, [r3, #12]
 80003d6:	687a      	ldr	r2, [r7, #4]
 80003d8:	4903      	ldr	r1, [pc, #12]	; (80003e8 <console_test_command+0x2c>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f00c fa54 	bl	800c888 <fiprintf>
}
 80003e0:	46c0      	nop			; (mov r8, r8)
 80003e2:	46bd      	mov	sp, r7
 80003e4:	b002      	add	sp, #8
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	0800ea6c 	.word	0x0800ea6c
 80003ec:	200001d4 	.word	0x200001d4

080003f0 <console_time_command>:

/** */
void console_time_command(const char *command_string)
{
 80003f0:	b5b0      	push	{r4, r5, r7, lr}
 80003f2:	b088      	sub	sp, #32
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
    uint8_t arg1Length;
    uint8_t arg2Length;
    const char *arg1 = console_get_parameter(command_string, 1, &arg1Length);
 80003f8:	2417      	movs	r4, #23
 80003fa:	193a      	adds	r2, r7, r4
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	2101      	movs	r1, #1
 8000400:	0018      	movs	r0, r3
 8000402:	f000 f9e8 	bl	80007d6 <console_get_parameter>
 8000406:	0003      	movs	r3, r0
 8000408:	61fb      	str	r3, [r7, #28]
    const char *arg2 = console_get_parameter(command_string, 2, &arg2Length);
 800040a:	2316      	movs	r3, #22
 800040c:	18fa      	adds	r2, r7, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	2102      	movs	r1, #2
 8000412:	0018      	movs	r0, r3
 8000414:	f000 f9df 	bl	80007d6 <console_get_parameter>
 8000418:	0003      	movs	r3, r0
 800041a:	61bb      	str	r3, [r7, #24]

    if (console_arg_is("get", arg1, arg1Length))
 800041c:	193b      	adds	r3, r7, r4
 800041e:	781a      	ldrb	r2, [r3, #0]
 8000420:	69f9      	ldr	r1, [r7, #28]
 8000422:	4b2a      	ldr	r3, [pc, #168]	; (80004cc <console_time_command+0xdc>)
 8000424:	0018      	movs	r0, r3
 8000426:	f000 f9af 	bl	8000788 <console_arg_is>
 800042a:	1e03      	subs	r3, r0, #0
 800042c:	d012      	beq.n	8000454 <console_time_command+0x64>
    {
        uint8_t hours, minutes;
        get_time(&hours, &minutes);
 800042e:	2414      	movs	r4, #20
 8000430:	193a      	adds	r2, r7, r4
 8000432:	2515      	movs	r5, #21
 8000434:	197b      	adds	r3, r7, r5
 8000436:	0011      	movs	r1, r2
 8000438:	0018      	movs	r0, r3
 800043a:	f001 febf 	bl	80021bc <get_time>
        printf("The time is set to %2.2d:%2.2d\n", hours, minutes);
 800043e:	197b      	adds	r3, r7, r5
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	0019      	movs	r1, r3
 8000444:	193b      	adds	r3, r7, r4
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	001a      	movs	r2, r3
 800044a:	4b21      	ldr	r3, [pc, #132]	; (80004d0 <console_time_command+0xe0>)
 800044c:	0018      	movs	r0, r3
 800044e:	f00c fd4d 	bl	800ceec <iprintf>
    }
    else
    {
        printf("incorrect argument\n");
    }
}
 8000452:	e036      	b.n	80004c2 <console_time_command+0xd2>
    else if (console_arg_is("set", arg1, arg1Length))
 8000454:	2317      	movs	r3, #23
 8000456:	18fb      	adds	r3, r7, r3
 8000458:	781a      	ldrb	r2, [r3, #0]
 800045a:	69f9      	ldr	r1, [r7, #28]
 800045c:	4b1d      	ldr	r3, [pc, #116]	; (80004d4 <console_time_command+0xe4>)
 800045e:	0018      	movs	r0, r3
 8000460:	f000 f992 	bl	8000788 <console_arg_is>
 8000464:	1e03      	subs	r3, r0, #0
 8000466:	d028      	beq.n	80004ba <console_time_command+0xca>
        if (arg2)
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	2b00      	cmp	r3, #0
 800046c:	d020      	beq.n	80004b0 <console_time_command+0xc0>
            if (sscanf(arg2, "%d:%d", (unsigned int *)&hours, (unsigned int *)&minutes) == 2)
 800046e:	230c      	movs	r3, #12
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2210      	movs	r2, #16
 8000474:	18ba      	adds	r2, r7, r2
 8000476:	4918      	ldr	r1, [pc, #96]	; (80004d8 <console_time_command+0xe8>)
 8000478:	69b8      	ldr	r0, [r7, #24]
 800047a:	f00c fea9 	bl	800d1d0 <siscanf>
 800047e:	0003      	movs	r3, r0
 8000480:	2b02      	cmp	r3, #2
 8000482:	d110      	bne.n	80004a6 <console_time_command+0xb6>
                set_time(hours, minutes);
 8000484:	693b      	ldr	r3, [r7, #16]
 8000486:	b2db      	uxtb	r3, r3
 8000488:	68fa      	ldr	r2, [r7, #12]
 800048a:	b2d2      	uxtb	r2, r2
 800048c:	0011      	movs	r1, r2
 800048e:	0018      	movs	r0, r3
 8000490:	f001 fe64 	bl	800215c <set_time>
                display_update();
 8000494:	f000 fcac 	bl	8000df0 <display_update>
                printf("Time set to %2.2ld:%2.2ld\n", hours, minutes);
 8000498:	6939      	ldr	r1, [r7, #16]
 800049a:	68fa      	ldr	r2, [r7, #12]
 800049c:	4b0f      	ldr	r3, [pc, #60]	; (80004dc <console_time_command+0xec>)
 800049e:	0018      	movs	r0, r3
 80004a0:	f00c fd24 	bl	800ceec <iprintf>
}
 80004a4:	e00d      	b.n	80004c2 <console_time_command+0xd2>
                printf("Parse error. Enter date and time in the format\nHH:MM\n");
 80004a6:	4b0e      	ldr	r3, [pc, #56]	; (80004e0 <console_time_command+0xf0>)
 80004a8:	0018      	movs	r0, r3
 80004aa:	f00c fdbf 	bl	800d02c <puts>
}
 80004ae:	e008      	b.n	80004c2 <console_time_command+0xd2>
            printf("missing argument");
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <console_time_command+0xf4>)
 80004b2:	0018      	movs	r0, r3
 80004b4:	f00c fd1a 	bl	800ceec <iprintf>
}
 80004b8:	e003      	b.n	80004c2 <console_time_command+0xd2>
        printf("incorrect argument\n");
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <console_time_command+0xf8>)
 80004bc:	0018      	movs	r0, r3
 80004be:	f00c fdb5 	bl	800d02c <puts>
}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	46bd      	mov	sp, r7
 80004c6:	b008      	add	sp, #32
 80004c8:	bdb0      	pop	{r4, r5, r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	0800ea80 	.word	0x0800ea80
 80004d0:	0800ea84 	.word	0x0800ea84
 80004d4:	0800eaa4 	.word	0x0800eaa4
 80004d8:	0800eaa8 	.word	0x0800eaa8
 80004dc:	0800eab0 	.word	0x0800eab0
 80004e0:	0800eacc 	.word	0x0800eacc
 80004e4:	0800eb04 	.word	0x0800eb04
 80004e8:	0800eb18 	.word	0x0800eb18

080004ec <console_alarm_command>:

/** */
void console_alarm_command(const char *command_string)
{
 80004ec:	b5b0      	push	{r4, r5, r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    uint8_t arg1Length;
    uint8_t arg2Length;
    const char *arg1 = console_get_parameter(command_string, 1, &arg1Length);
 80004f4:	2417      	movs	r4, #23
 80004f6:	193a      	adds	r2, r7, r4
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2101      	movs	r1, #1
 80004fc:	0018      	movs	r0, r3
 80004fe:	f000 f96a 	bl	80007d6 <console_get_parameter>
 8000502:	0003      	movs	r3, r0
 8000504:	61fb      	str	r3, [r7, #28]
    const char *arg2 = console_get_parameter(command_string, 2, &arg2Length);
 8000506:	2316      	movs	r3, #22
 8000508:	18fa      	adds	r2, r7, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	2102      	movs	r1, #2
 800050e:	0018      	movs	r0, r3
 8000510:	f000 f961 	bl	80007d6 <console_get_parameter>
 8000514:	0003      	movs	r3, r0
 8000516:	61bb      	str	r3, [r7, #24]

    if (console_arg_is("get", arg1, arg1Length))
 8000518:	193b      	adds	r3, r7, r4
 800051a:	781a      	ldrb	r2, [r3, #0]
 800051c:	69f9      	ldr	r1, [r7, #28]
 800051e:	4b3e      	ldr	r3, [pc, #248]	; (8000618 <console_alarm_command+0x12c>)
 8000520:	0018      	movs	r0, r3
 8000522:	f000 f931 	bl	8000788 <console_arg_is>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d012      	beq.n	8000550 <console_alarm_command+0x64>
    {
        uint8_t hours, minutes;
        get_alarm(&hours, &minutes);
 800052a:	2414      	movs	r4, #20
 800052c:	193a      	adds	r2, r7, r4
 800052e:	2515      	movs	r5, #21
 8000530:	197b      	adds	r3, r7, r5
 8000532:	0011      	movs	r1, r2
 8000534:	0018      	movs	r0, r3
 8000536:	f001 ff6f 	bl	8002418 <get_alarm>
        printf("The alarm is set to %2.2d:%2.2d\n", hours, minutes);
 800053a:	197b      	adds	r3, r7, r5
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	0019      	movs	r1, r3
 8000540:	193b      	adds	r3, r7, r4
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	001a      	movs	r2, r3
 8000546:	4b35      	ldr	r3, [pc, #212]	; (800061c <console_alarm_command+0x130>)
 8000548:	0018      	movs	r0, r3
 800054a:	f00c fccf 	bl	800ceec <iprintf>
    }
    else
    {
        printf("incorrect argument\n");
    }
}
 800054e:	e05e      	b.n	800060e <console_alarm_command+0x122>
    else if (console_arg_is("set", arg1, arg1Length))
 8000550:	2317      	movs	r3, #23
 8000552:	18fb      	adds	r3, r7, r3
 8000554:	781a      	ldrb	r2, [r3, #0]
 8000556:	69f9      	ldr	r1, [r7, #28]
 8000558:	4b31      	ldr	r3, [pc, #196]	; (8000620 <console_alarm_command+0x134>)
 800055a:	0018      	movs	r0, r3
 800055c:	f000 f914 	bl	8000788 <console_arg_is>
 8000560:	1e03      	subs	r3, r0, #0
 8000562:	d026      	beq.n	80005b2 <console_alarm_command+0xc6>
        if (arg2)
 8000564:	69bb      	ldr	r3, [r7, #24]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d01e      	beq.n	80005a8 <console_alarm_command+0xbc>
            if (sscanf(arg2, "%d:%d", (unsigned int *)&hours, (unsigned int *)&minutes) == 2)
 800056a:	230c      	movs	r3, #12
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	2210      	movs	r2, #16
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	492c      	ldr	r1, [pc, #176]	; (8000624 <console_alarm_command+0x138>)
 8000574:	69b8      	ldr	r0, [r7, #24]
 8000576:	f00c fe2b 	bl	800d1d0 <siscanf>
 800057a:	0003      	movs	r3, r0
 800057c:	2b02      	cmp	r3, #2
 800057e:	d10e      	bne.n	800059e <console_alarm_command+0xb2>
                set_alarm(hours, minutes);
 8000580:	693b      	ldr	r3, [r7, #16]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	68fa      	ldr	r2, [r7, #12]
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	0011      	movs	r1, r2
 800058a:	0018      	movs	r0, r3
 800058c:	f001 fefe 	bl	800238c <set_alarm>
                printf("Alarm set to %2.2ld:%2.2ld\n", hours, minutes);
 8000590:	6939      	ldr	r1, [r7, #16]
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	4b24      	ldr	r3, [pc, #144]	; (8000628 <console_alarm_command+0x13c>)
 8000596:	0018      	movs	r0, r3
 8000598:	f00c fca8 	bl	800ceec <iprintf>
}
 800059c:	e037      	b.n	800060e <console_alarm_command+0x122>
                printf("Parse error. Enter date and time in the format\nHH:MM\n");
 800059e:	4b23      	ldr	r3, [pc, #140]	; (800062c <console_alarm_command+0x140>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f00c fd43 	bl	800d02c <puts>
}
 80005a6:	e032      	b.n	800060e <console_alarm_command+0x122>
            printf("missing argument");
 80005a8:	4b21      	ldr	r3, [pc, #132]	; (8000630 <console_alarm_command+0x144>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f00c fc9e 	bl	800ceec <iprintf>
}
 80005b0:	e02d      	b.n	800060e <console_alarm_command+0x122>
    else if (console_arg_is("enable", arg1, arg1Length))
 80005b2:	2317      	movs	r3, #23
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	69f9      	ldr	r1, [r7, #28]
 80005ba:	4b1e      	ldr	r3, [pc, #120]	; (8000634 <console_alarm_command+0x148>)
 80005bc:	0018      	movs	r0, r3
 80005be:	f000 f8e3 	bl	8000788 <console_arg_is>
 80005c2:	1e03      	subs	r3, r0, #0
 80005c4:	d00a      	beq.n	80005dc <console_alarm_command+0xf0>
    	enable_alarm(true);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 ff48 	bl	800245c <enable_alarm>
		display_alarm_enabled(true);
 80005cc:	2001      	movs	r0, #1
 80005ce:	f000 fc9b 	bl	8000f08 <display_alarm_enabled>
    	printf("Alarm enabled\n");
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <console_alarm_command+0x14c>)
 80005d4:	0018      	movs	r0, r3
 80005d6:	f00c fd29 	bl	800d02c <puts>
}
 80005da:	e018      	b.n	800060e <console_alarm_command+0x122>
    else if (console_arg_is("cancel", arg1, arg1Length))
 80005dc:	2317      	movs	r3, #23
 80005de:	18fb      	adds	r3, r7, r3
 80005e0:	781a      	ldrb	r2, [r3, #0]
 80005e2:	69f9      	ldr	r1, [r7, #28]
 80005e4:	4b15      	ldr	r3, [pc, #84]	; (800063c <console_alarm_command+0x150>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 f8ce 	bl	8000788 <console_arg_is>
 80005ec:	1e03      	subs	r3, r0, #0
 80005ee:	d00a      	beq.n	8000606 <console_alarm_command+0x11a>
    	enable_alarm(false);
 80005f0:	2000      	movs	r0, #0
 80005f2:	f001 ff33 	bl	800245c <enable_alarm>
		display_alarm_enabled(false);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f000 fc86 	bl	8000f08 <display_alarm_enabled>
    	printf("Alarm cancelled\n");
 80005fc:	4b10      	ldr	r3, [pc, #64]	; (8000640 <console_alarm_command+0x154>)
 80005fe:	0018      	movs	r0, r3
 8000600:	f00c fd14 	bl	800d02c <puts>
}
 8000604:	e003      	b.n	800060e <console_alarm_command+0x122>
        printf("incorrect argument\n");
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <console_alarm_command+0x158>)
 8000608:	0018      	movs	r0, r3
 800060a:	f00c fd0f 	bl	800d02c <puts>
}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b008      	add	sp, #32
 8000614:	bdb0      	pop	{r4, r5, r7, pc}
 8000616:	46c0      	nop			; (mov r8, r8)
 8000618:	0800ea80 	.word	0x0800ea80
 800061c:	0800eb2c 	.word	0x0800eb2c
 8000620:	0800eaa4 	.word	0x0800eaa4
 8000624:	0800eaa8 	.word	0x0800eaa8
 8000628:	0800eb50 	.word	0x0800eb50
 800062c:	0800eacc 	.word	0x0800eacc
 8000630:	0800eb04 	.word	0x0800eb04
 8000634:	0800eb6c 	.word	0x0800eb6c
 8000638:	0800eb74 	.word	0x0800eb74
 800063c:	0800eb84 	.word	0x0800eb84
 8000640:	0800eb8c 	.word	0x0800eb8c
 8000644:	0800eb18 	.word	0x0800eb18

08000648 <put_history>:

/** */
static void put_history(char *input)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    strcpy(input_history[history_index], input);
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <put_history+0x50>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b25b      	sxtb	r3, r3
 8000656:	001a      	movs	r2, r3
 8000658:	0013      	movs	r3, r2
 800065a:	011b      	lsls	r3, r3, #4
 800065c:	1a9b      	subs	r3, r3, r2
 800065e:	009b      	lsls	r3, r3, #2
 8000660:	4a0e      	ldr	r2, [pc, #56]	; (800069c <put_history+0x54>)
 8000662:	189b      	adds	r3, r3, r2
 8000664:	687a      	ldr	r2, [r7, #4]
 8000666:	0011      	movs	r1, r2
 8000668:	0018      	movs	r0, r3
 800066a:	f00c fe27 	bl	800d2bc <strcpy>

    if (++history_index == HISTORY_DEPTH)
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <put_history+0x50>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	b25b      	sxtb	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	3301      	adds	r3, #1
 8000678:	b2db      	uxtb	r3, r3
 800067a:	b25a      	sxtb	r2, r3
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <put_history+0x50>)
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <put_history+0x50>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	b25b      	sxtb	r3, r3
 8000686:	2b05      	cmp	r3, #5
 8000688:	d102      	bne.n	8000690 <put_history+0x48>
    {
        history_index = 0;
 800068a:	4b03      	ldr	r3, [pc, #12]	; (8000698 <put_history+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
    }
}
 8000690:	46c0      	nop			; (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	b002      	add	sp, #8
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200003c0 	.word	0x200003c0
 800069c:	20000294 	.word	0x20000294

080006a0 <get_history>:

/** */
static void get_history(char *input, bool reset)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	000a      	movs	r2, r1
 80006aa:	1cfb      	adds	r3, r7, #3
 80006ac:	701a      	strb	r2, [r3, #0]
    static int8_t index = 0;
    if (reset)
 80006ae:	1cfb      	adds	r3, r7, #3
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d011      	beq.n	80006da <get_history+0x3a>
    {
        index = history_index -1;
 80006b6:	4b1b      	ldr	r3, [pc, #108]	; (8000724 <get_history+0x84>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	3b01      	subs	r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	b25a      	sxtb	r2, r3
 80006c4:	4b18      	ldr	r3, [pc, #96]	; (8000728 <get_history+0x88>)
 80006c6:	701a      	strb	r2, [r3, #0]

        if (index < 0)
 80006c8:	4b17      	ldr	r3, [pc, #92]	; (8000728 <get_history+0x88>)
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	b25b      	sxtb	r3, r3
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	da24      	bge.n	800071c <get_history+0x7c>
        {
            index = HISTORY_DEPTH;
 80006d2:	4b15      	ldr	r3, [pc, #84]	; (8000728 <get_history+0x88>)
 80006d4:	2205      	movs	r2, #5
 80006d6:	701a      	strb	r2, [r3, #0]
        }
        return;
 80006d8:	e020      	b.n	800071c <get_history+0x7c>
    }

    strcpy(input, input_history[index]);
 80006da:	4b13      	ldr	r3, [pc, #76]	; (8000728 <get_history+0x88>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	b25b      	sxtb	r3, r3
 80006e0:	001a      	movs	r2, r3
 80006e2:	0013      	movs	r3, r2
 80006e4:	011b      	lsls	r3, r3, #4
 80006e6:	1a9b      	subs	r3, r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <get_history+0x8c>)
 80006ec:	189a      	adds	r2, r3, r2
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	0011      	movs	r1, r2
 80006f2:	0018      	movs	r0, r3
 80006f4:	f00c fde2 	bl	800d2bc <strcpy>

    if (--index < 0)
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <get_history+0x88>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b25b      	sxtb	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	3b01      	subs	r3, #1
 8000702:	b2db      	uxtb	r3, r3
 8000704:	b25a      	sxtb	r2, r3
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <get_history+0x88>)
 8000708:	701a      	strb	r2, [r3, #0]
 800070a:	4b07      	ldr	r3, [pc, #28]	; (8000728 <get_history+0x88>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	b25b      	sxtb	r3, r3
 8000710:	2b00      	cmp	r3, #0
 8000712:	da04      	bge.n	800071e <get_history+0x7e>
    {
        index = HISTORY_DEPTH;
 8000714:	4b04      	ldr	r3, [pc, #16]	; (8000728 <get_history+0x88>)
 8000716:	2205      	movs	r2, #5
 8000718:	701a      	strb	r2, [r3, #0]
 800071a:	e000      	b.n	800071e <get_history+0x7e>
        return;
 800071c:	46c0      	nop			; (mov r8, r8)
    }
}
 800071e:	46bd      	mov	sp, r7
 8000720:	b002      	add	sp, #8
 8000722:	bd80      	pop	{r7, pc}
 8000724:	200003c0 	.word	0x200003c0
 8000728:	200003c8 	.word	0x200003c8
 800072c:	20000294 	.word	0x20000294

08000730 <console_history_command>:

/** */
static void console_history_command(const char *command_string)
{
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    (void)command_string;

    for (uint8_t i = 0; i < HISTORY_DEPTH; i++)
 8000738:	230f      	movs	r3, #15
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	2200      	movs	r2, #0
 800073e:	701a      	strb	r2, [r3, #0]
 8000740:	e014      	b.n	800076c <console_history_command+0x3c>
    {
        printf("%d %s\n", i + 1, input_history[i]);
 8000742:	240f      	movs	r4, #15
 8000744:	193b      	adds	r3, r7, r4
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	1c59      	adds	r1, r3, #1
 800074a:	193b      	adds	r3, r7, r4
 800074c:	781a      	ldrb	r2, [r3, #0]
 800074e:	0013      	movs	r3, r2
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	1a9b      	subs	r3, r3, r2
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <console_history_command+0x50>)
 8000758:	189a      	adds	r2, r3, r2
 800075a:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <console_history_command+0x54>)
 800075c:	0018      	movs	r0, r3
 800075e:	f00c fbc5 	bl	800ceec <iprintf>
    for (uint8_t i = 0; i < HISTORY_DEPTH; i++)
 8000762:	193b      	adds	r3, r7, r4
 8000764:	781a      	ldrb	r2, [r3, #0]
 8000766:	193b      	adds	r3, r7, r4
 8000768:	3201      	adds	r2, #1
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	230f      	movs	r3, #15
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b04      	cmp	r3, #4
 8000774:	d9e5      	bls.n	8000742 <console_history_command+0x12>
    }
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	b005      	add	sp, #20
 800077e:	bd90      	pop	{r4, r7, pc}
 8000780:	20000294 	.word	0x20000294
 8000784:	0800eb9c 	.word	0x0800eb9c

08000788 <console_arg_is>:
//    }
//}

/** */
static bool console_arg_is(const char *name, const char *arg, uint8_t length)
{
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	701a      	strb	r2, [r3, #0]
    return arg != NULL && length == strlen(name) && strncmp(name, arg, length) == 0;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d013      	beq.n	80007c4 <console_arg_is+0x3c>
 800079c:	1dfb      	adds	r3, r7, #7
 800079e:	781c      	ldrb	r4, [r3, #0]
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	0018      	movs	r0, r3
 80007a4:	f7ff fcba 	bl	800011c <strlen>
 80007a8:	0003      	movs	r3, r0
 80007aa:	429c      	cmp	r4, r3
 80007ac:	d10a      	bne.n	80007c4 <console_arg_is+0x3c>
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	0018      	movs	r0, r3
 80007b8:	f00c fd88 	bl	800d2cc <strncmp>
 80007bc:	1e03      	subs	r3, r0, #0
 80007be:	d101      	bne.n	80007c4 <console_arg_is+0x3c>
 80007c0:	2301      	movs	r3, #1
 80007c2:	e000      	b.n	80007c6 <console_arg_is+0x3e>
 80007c4:	2300      	movs	r3, #0
 80007c6:	1c1a      	adds	r2, r3, #0
 80007c8:	2301      	movs	r3, #1
 80007ca:	4013      	ands	r3, r2
 80007cc:	b2db      	uxtb	r3, r3
}
 80007ce:	0018      	movs	r0, r3
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b005      	add	sp, #20
 80007d4:	bd90      	pop	{r4, r7, pc}

080007d6 <console_get_parameter>:

/** */
static const char* console_get_parameter( const char *command_string, uint8_t wanted_parameter, uint8_t *parameter_string_length)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	230b      	movs	r3, #11
 80007e2:	18fb      	adds	r3, r7, r3
 80007e4:	1c0a      	adds	r2, r1, #0
 80007e6:	701a      	strb	r2, [r3, #0]
	uint8_t parameters_found = 0;
 80007e8:	2317      	movs	r3, #23
 80007ea:	18fb      	adds	r3, r7, r3
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
	const char *return_parameter = NULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	613b      	str	r3, [r7, #16]

	*parameter_string_length = 0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	701a      	strb	r2, [r3, #0]

	while(parameters_found < wanted_parameter)
 80007fa:	e042      	b.n	8000882 <console_get_parameter+0xac>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
		{
			command_string++;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	3301      	adds	r3, #1
 8000800:	60fb      	str	r3, [r7, #12]
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d007      	beq.n	800081a <console_get_parameter+0x44>
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	2b20      	cmp	r3, #32
 8000810:	d1f4      	bne.n	80007fc <console_get_parameter+0x26>
		}

		/* Find the start of the next string. */
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) == ' ' ) )
 8000812:	e002      	b.n	800081a <console_get_parameter+0x44>
		{
			command_string++;
 8000814:	68fb      	ldr	r3, [r7, #12]
 8000816:	3301      	adds	r3, #1
 8000818:	60fb      	str	r3, [r7, #12]
		while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) == ' ' ) )
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	781b      	ldrb	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <console_get_parameter+0x54>
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b20      	cmp	r3, #32
 8000828:	d0f4      	beq.n	8000814 <console_get_parameter+0x3e>
		}

		/* Was a string found? */
		if( *command_string != 0x00 )
 800082a:	68fb      	ldr	r3, [r7, #12]
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d030      	beq.n	8000894 <console_get_parameter+0xbe>
		{
			/* Is this the start of the required parameter? */
			parameters_found++;
 8000832:	2117      	movs	r1, #23
 8000834:	187b      	adds	r3, r7, r1
 8000836:	781a      	ldrb	r2, [r3, #0]
 8000838:	187b      	adds	r3, r7, r1
 800083a:	3201      	adds	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]

			if( parameters_found == wanted_parameter )
 800083e:	187a      	adds	r2, r7, r1
 8000840:	230b      	movs	r3, #11
 8000842:	18fb      	adds	r3, r7, r3
 8000844:	7812      	ldrb	r2, [r2, #0]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	429a      	cmp	r2, r3
 800084a:	d11a      	bne.n	8000882 <console_get_parameter+0xac>
			{
				/* How long is the parameter? */
				return_parameter = command_string;
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	613b      	str	r3, [r7, #16]
				while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
 8000850:	e008      	b.n	8000864 <console_get_parameter+0x8e>
				{
					( *parameter_string_length )++;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	3301      	adds	r3, #1
 8000858:	b2da      	uxtb	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	701a      	strb	r2, [r3, #0]
					command_string++;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	3301      	adds	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
				while( ( ( *command_string ) != 0x00 ) && ( ( *command_string ) != ' ' ) )
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d003      	beq.n	8000874 <console_get_parameter+0x9e>
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b20      	cmp	r3, #32
 8000872:	d1ee      	bne.n	8000852 <console_get_parameter+0x7c>
				}

				if( *parameter_string_length == 0 )
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	781b      	ldrb	r3, [r3, #0]
 8000878:	2b00      	cmp	r3, #0
 800087a:	d10d      	bne.n	8000898 <console_get_parameter+0xc2>
				{
					return_parameter = NULL;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]
				}

				break;
 8000880:	e00a      	b.n	8000898 <console_get_parameter+0xc2>
	while(parameters_found < wanted_parameter)
 8000882:	2317      	movs	r3, #23
 8000884:	18fa      	adds	r2, r7, r3
 8000886:	230b      	movs	r3, #11
 8000888:	18fb      	adds	r3, r7, r3
 800088a:	7812      	ldrb	r2, [r2, #0]
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	429a      	cmp	r2, r3
 8000890:	d3b7      	bcc.n	8000802 <console_get_parameter+0x2c>
 8000892:	e002      	b.n	800089a <console_get_parameter+0xc4>
			}
		}
		else
		{
			break;
 8000894:	46c0      	nop			; (mov r8, r8)
 8000896:	e000      	b.n	800089a <console_get_parameter+0xc4>
				break;
 8000898:	46c0      	nop			; (mov r8, r8)
		}
	}

	return return_parameter;
 800089a:	693b      	ldr	r3, [r7, #16]
}
 800089c:	0018      	movs	r0, r3
 800089e:	46bd      	mov	sp, r7
 80008a0:	b006      	add	sp, #24
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <process_command>:

/** */
static void process_command(const char * const input)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 80008ac:	2300      	movs	r3, #0
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	e028      	b.n	8000904 <process_command+0x60>
	{
		if(strncmp( commands[idx].command, input, strlen(commands[idx].command)) == 0)
 80008b2:	491a      	ldr	r1, [pc, #104]	; (800091c <process_command+0x78>)
 80008b4:	68fa      	ldr	r2, [r7, #12]
 80008b6:	0013      	movs	r3, r2
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	189b      	adds	r3, r3, r2
 80008bc:	009b      	lsls	r3, r3, #2
 80008be:	585c      	ldr	r4, [r3, r1]
 80008c0:	4916      	ldr	r1, [pc, #88]	; (800091c <process_command+0x78>)
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	0013      	movs	r3, r2
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	189b      	adds	r3, r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	585b      	ldr	r3, [r3, r1]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff fc24 	bl	800011c <strlen>
 80008d4:	0002      	movs	r2, r0
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	0019      	movs	r1, r3
 80008da:	0020      	movs	r0, r4
 80008dc:	f00c fcf6 	bl	800d2cc <strncmp>
 80008e0:	1e03      	subs	r3, r0, #0
 80008e2:	d10c      	bne.n	80008fe <process_command+0x5a>
		{
			commands[idx].command_interpreter(input);
 80008e4:	490d      	ldr	r1, [pc, #52]	; (800091c <process_command+0x78>)
 80008e6:	68fa      	ldr	r2, [r7, #12]
 80008e8:	0013      	movs	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	009b      	lsls	r3, r3, #2
 80008f0:	18cb      	adds	r3, r1, r3
 80008f2:	3308      	adds	r3, #8
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	687a      	ldr	r2, [r7, #4]
 80008f8:	0010      	movs	r0, r2
 80008fa:	4798      	blx	r3
			return;
 80008fc:	e00b      	b.n	8000916 <process_command+0x72>
	for(int idx = 0; idx < sizeof(commands)/sizeof(command_t); idx++)
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3301      	adds	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	2b04      	cmp	r3, #4
 8000908:	d9d3      	bls.n	80008b2 <process_command+0xe>
		}
	}

	printf("unrecognised command %s\n", input);
 800090a:	687a      	ldr	r2, [r7, #4]
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <process_command+0x7c>)
 800090e:	0011      	movs	r1, r2
 8000910:	0018      	movs	r0, r3
 8000912:	f00c faeb 	bl	800ceec <iprintf>
}
 8000916:	46bd      	mov	sp, r7
 8000918:	b005      	add	sp, #20
 800091a:	bd90      	pop	{r4, r7, pc}
 800091c:	20000000 	.word	0x20000000
 8000920:	0800eba4 	.word	0x0800eba4

08000924 <console_process_key>:

/** */
void console_process_key(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
    if(kbhit())
 800092a:	f00b fa1b 	bl	800bd64 <usb_char_waiting>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d100      	bne.n	8000934 <console_process_key+0x10>
 8000932:	e0a6      	b.n	8000a82 <console_process_key+0x15e>
    {
    	int8_t ch = getchar();
 8000934:	f00b ffb8 	bl	800c8a8 <getchar>
 8000938:	0002      	movs	r2, r0
 800093a:	1dfb      	adds	r3, r7, #7
 800093c:	701a      	strb	r2, [r3, #0]

        // look for up arrow key
        if ((ch == 0x1b) || (ch == 0x5b))
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	b25b      	sxtb	r3, r3
 8000944:	2b1b      	cmp	r3, #27
 8000946:	d004      	beq.n	8000952 <console_process_key+0x2e>
 8000948:	1dfb      	adds	r3, r7, #7
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	b25b      	sxtb	r3, r3
 800094e:	2b5b      	cmp	r3, #91	; 0x5b
 8000950:	d126      	bne.n	80009a0 <console_process_key+0x7c>
        {
           	ch = getchar();
 8000952:	f00b ffa9 	bl	800c8a8 <getchar>
 8000956:	0002      	movs	r2, r0
 8000958:	1dfb      	adds	r3, r7, #7
 800095a:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f001 fed1 	bl	8002704 <HAL_Delay>
			ch = getchar();
 8000962:	f00b ffa1 	bl	800c8a8 <getchar>
 8000966:	0002      	movs	r2, r0
 8000968:	1dfb      	adds	r3, r7, #7
 800096a:	701a      	strb	r2, [r3, #0]
        	HAL_Delay(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f001 fec9 	bl	8002704 <HAL_Delay>

        	// clear the line to remove the uparrow
            printf(CLL);
 8000972:	4b45      	ldr	r3, [pc, #276]	; (8000a88 <console_process_key+0x164>)
 8000974:	0018      	movs	r0, r3
 8000976:	f00c fab9 	bl	800ceec <iprintf>
            get_history(input,false);
 800097a:	4b44      	ldr	r3, [pc, #272]	; (8000a8c <console_process_key+0x168>)
 800097c:	2100      	movs	r1, #0
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff fe8e 	bl	80006a0 <get_history>
            inputIndex = strlen(input);
 8000984:	4b41      	ldr	r3, [pc, #260]	; (8000a8c <console_process_key+0x168>)
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fbc8 	bl	800011c <strlen>
 800098c:	0002      	movs	r2, r0
 800098e:	4b40      	ldr	r3, [pc, #256]	; (8000a90 <console_process_key+0x16c>)
 8000990:	601a      	str	r2, [r3, #0]
            printf("\r$ %s", input);
 8000992:	4a3e      	ldr	r2, [pc, #248]	; (8000a8c <console_process_key+0x168>)
 8000994:	4b3f      	ldr	r3, [pc, #252]	; (8000a94 <console_process_key+0x170>)
 8000996:	0011      	movs	r1, r2
 8000998:	0018      	movs	r0, r3
 800099a:	f00c faa7 	bl	800ceec <iprintf>
            return;
 800099e:	e070      	b.n	8000a82 <console_process_key+0x15e>
        }
        else
		{
        	putchar(ch);
 80009a0:	1dfb      	adds	r3, r7, #7
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b25b      	sxtb	r3, r3
 80009a6:	0018      	movs	r0, r3
 80009a8:	f00c faba 	bl	800cf20 <putchar>
		}

        if (ch == '\r')
 80009ac:	1dfb      	adds	r3, r7, #7
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b25b      	sxtb	r3, r3
 80009b2:	2b0d      	cmp	r3, #13
 80009b4:	d12d      	bne.n	8000a12 <console_process_key+0xee>
        {
            printf("\n");
 80009b6:	200a      	movs	r0, #10
 80009b8:	f00c fab2 	bl	800cf20 <putchar>

            if (inputIndex == 0)
 80009bc:	4b34      	ldr	r3, [pc, #208]	; (8000a90 <console_process_key+0x16c>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d104      	bne.n	80009ce <console_process_key+0xaa>
            {
                printf("$ ");
 80009c4:	4b34      	ldr	r3, [pc, #208]	; (8000a98 <console_process_key+0x174>)
 80009c6:	0018      	movs	r0, r3
 80009c8:	f00c fa90 	bl	800ceec <iprintf>
                return;
 80009cc:	e059      	b.n	8000a82 <console_process_key+0x15e>
            }

			process_command(input);
 80009ce:	4b2f      	ldr	r3, [pc, #188]	; (8000a8c <console_process_key+0x168>)
 80009d0:	0018      	movs	r0, r3
 80009d2:	f7ff ff67 	bl	80008a4 <process_command>

            if(strcmp(input, "history")!=0)
 80009d6:	4a31      	ldr	r2, [pc, #196]	; (8000a9c <console_process_key+0x178>)
 80009d8:	4b2c      	ldr	r3, [pc, #176]	; (8000a8c <console_process_key+0x168>)
 80009da:	0011      	movs	r1, r2
 80009dc:	0018      	movs	r0, r3
 80009de:	f7ff fb93 	bl	8000108 <strcmp>
 80009e2:	1e03      	subs	r3, r0, #0
 80009e4:	d003      	beq.n	80009ee <console_process_key+0xca>
            {
                put_history(input);
 80009e6:	4b29      	ldr	r3, [pc, #164]	; (8000a8c <console_process_key+0x168>)
 80009e8:	0018      	movs	r0, r3
 80009ea:	f7ff fe2d 	bl	8000648 <put_history>
            }

            get_history(NULL, true);
 80009ee:	2101      	movs	r1, #1
 80009f0:	2000      	movs	r0, #0
 80009f2:	f7ff fe55 	bl	80006a0 <get_history>

            inputIndex = 0;
 80009f6:	4b26      	ldr	r3, [pc, #152]	; (8000a90 <console_process_key+0x16c>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
            memset(input, 0x00, sizeof(input));
 80009fc:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <console_process_key+0x168>)
 80009fe:	223c      	movs	r2, #60	; 0x3c
 8000a00:	2100      	movs	r1, #0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f00b ff86 	bl	800c914 <memset>
            printf("\n$ ");
 8000a08:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <console_process_key+0x17c>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f00c fa6e 	bl	800ceec <iprintf>
 8000a10:	e037      	b.n	8000a82 <console_process_key+0x15e>
        }
        else
        {
            if (ch == '\n')
 8000a12:	1dfb      	adds	r3, r7, #7
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	b25b      	sxtb	r3, r3
 8000a18:	2b0a      	cmp	r3, #10
 8000a1a:	d032      	beq.n	8000a82 <console_process_key+0x15e>
            {
                // ignore carriage returns
            }
            else if (ch == '\b')
 8000a1c:	1dfb      	adds	r3, r7, #7
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b25b      	sxtb	r3, r3
 8000a22:	2b08      	cmp	r3, #8
 8000a24:	d114      	bne.n	8000a50 <console_process_key+0x12c>
            {
                // process backspace
                if (inputIndex > 0)
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <console_process_key+0x16c>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d009      	beq.n	8000a42 <console_process_key+0x11e>
                {
                    inputIndex--;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <console_process_key+0x16c>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	1e5a      	subs	r2, r3, #1
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <console_process_key+0x16c>)
 8000a36:	601a      	str	r2, [r3, #0]
                    input[inputIndex] = '\0';
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <console_process_key+0x16c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a13      	ldr	r2, [pc, #76]	; (8000a8c <console_process_key+0x168>)
 8000a3e:	2100      	movs	r1, #0
 8000a40:	54d1      	strb	r1, [r2, r3]
                }

                printf(CLL "\r$ %s", input);
 8000a42:	4a12      	ldr	r2, [pc, #72]	; (8000a8c <console_process_key+0x168>)
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <console_process_key+0x180>)
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f00c fa4f 	bl	800ceec <iprintf>
 8000a4e:	e018      	b.n	8000a82 <console_process_key+0x15e>
            }
            else if (ch >= ' ' && ch <= '~')
 8000a50:	1dfb      	adds	r3, r7, #7
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b25b      	sxtb	r3, r3
 8000a56:	2b1f      	cmp	r3, #31
 8000a58:	dd13      	ble.n	8000a82 <console_process_key+0x15e>
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	b25b      	sxtb	r3, r3
 8000a60:	2b7f      	cmp	r3, #127	; 0x7f
 8000a62:	d00e      	beq.n	8000a82 <console_process_key+0x15e>
            {
                // save printable characters
                if (inputIndex < sizeof(input))
 8000a64:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <console_process_key+0x16c>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2b3b      	cmp	r3, #59	; 0x3b
 8000a6a:	d80a      	bhi.n	8000a82 <console_process_key+0x15e>
                {
                    input[inputIndex] = ch;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <console_process_key+0x16c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	1dfa      	adds	r2, r7, #7
 8000a72:	7811      	ldrb	r1, [r2, #0]
 8000a74:	4a05      	ldr	r2, [pc, #20]	; (8000a8c <console_process_key+0x168>)
 8000a76:	54d1      	strb	r1, [r2, r3]
                    inputIndex++;
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <console_process_key+0x16c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1c5a      	adds	r2, r3, #1
 8000a7e:	4b04      	ldr	r3, [pc, #16]	; (8000a90 <console_process_key+0x16c>)
 8000a80:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
}
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b002      	add	sp, #8
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	0800ebc0 	.word	0x0800ebc0
 8000a8c:	20000258 	.word	0x20000258
 8000a90:	200003c4 	.word	0x200003c4
 8000a94:	0800ebc8 	.word	0x0800ebc8
 8000a98:	0800ebd0 	.word	0x0800ebd0
 8000a9c:	0800ea40 	.word	0x0800ea40
 8000aa0:	0800ebd4 	.word	0x0800ebd4
 8000aa4:	0800ebd8 	.word	0x0800ebd8

08000aa8 <deselect_digit>:
// brightness (multiplexing pulse width from 1000 to 5000
static int32_t brightness = 5000;

/** turn off all digit selects */
static void deselect_digit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, 1);
 8000aac:	2390      	movs	r3, #144	; 0x90
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	2180      	movs	r1, #128	; 0x80
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f002 f8ee 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, 1);
 8000aba:	2380      	movs	r3, #128	; 0x80
 8000abc:	0059      	lsls	r1, r3, #1
 8000abe:	2390      	movs	r3, #144	; 0x90
 8000ac0:	05db      	lsls	r3, r3, #23
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 f8e6 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, 1);
 8000aca:	2380      	movs	r3, #128	; 0x80
 8000acc:	0099      	lsls	r1, r3, #2
 8000ace:	2390      	movs	r3, #144	; 0x90
 8000ad0:	05db      	lsls	r3, r3, #23
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f002 f8de 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, 1);
 8000ada:	2380      	movs	r3, #128	; 0x80
 8000adc:	00d9      	lsls	r1, r3, #3
 8000ade:	2390      	movs	r3, #144	; 0x90
 8000ae0:	05db      	lsls	r3, r3, #23
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f002 f8d6 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(COLON_GPIO_Port, COLON_Pin, 0);
 8000aea:	2380      	movs	r3, #128	; 0x80
 8000aec:	0219      	lsls	r1, r3, #8
 8000aee:	2390      	movs	r3, #144	; 0x90
 8000af0:	05db      	lsls	r3, r3, #23
 8000af2:	2200      	movs	r2, #0
 8000af4:	0018      	movs	r0, r3
 8000af6:	f002 f8ce 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, 0);
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	019b      	lsls	r3, r3, #6
 8000afe:	4804      	ldr	r0, [pc, #16]	; (8000b10 <deselect_digit+0x68>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	0019      	movs	r1, r3
 8000b04:	f002 f8c7 	bl	8002c96 <HAL_GPIO_WritePin>
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	46c0      	nop			; (mov r8, r8)
 8000b10:	48000400 	.word	0x48000400

08000b14 <select_digit>:

/** select a specific digit, 0 to 3 */
static void select_digit(int digit)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	switch( digit & 0x03)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2203      	movs	r2, #3
 8000b20:	4013      	ands	r3, r2
 8000b22:	2b03      	cmp	r3, #3
 8000b24:	d022      	beq.n	8000b6c <select_digit+0x58>
 8000b26:	dc2a      	bgt.n	8000b7e <select_digit+0x6a>
 8000b28:	2b02      	cmp	r3, #2
 8000b2a:	d016      	beq.n	8000b5a <select_digit+0x46>
 8000b2c:	dc27      	bgt.n	8000b7e <select_digit+0x6a>
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d002      	beq.n	8000b38 <select_digit+0x24>
 8000b32:	2b01      	cmp	r3, #1
 8000b34:	d008      	beq.n	8000b48 <select_digit+0x34>
 8000b36:	e022      	b.n	8000b7e <select_digit+0x6a>
	{
		case 0:	HAL_GPIO_WritePin(DIG_1_GPIO_Port, DIG_1_Pin, 0); break;
 8000b38:	2390      	movs	r3, #144	; 0x90
 8000b3a:	05db      	lsls	r3, r3, #23
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2180      	movs	r1, #128	; 0x80
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 f8a8 	bl	8002c96 <HAL_GPIO_WritePin>
 8000b46:	e01a      	b.n	8000b7e <select_digit+0x6a>
		case 1:	HAL_GPIO_WritePin(DIG_2_GPIO_Port, DIG_2_Pin, 0); break;
 8000b48:	2380      	movs	r3, #128	; 0x80
 8000b4a:	0059      	lsls	r1, r3, #1
 8000b4c:	2390      	movs	r3, #144	; 0x90
 8000b4e:	05db      	lsls	r3, r3, #23
 8000b50:	2200      	movs	r2, #0
 8000b52:	0018      	movs	r0, r3
 8000b54:	f002 f89f 	bl	8002c96 <HAL_GPIO_WritePin>
 8000b58:	e011      	b.n	8000b7e <select_digit+0x6a>
		case 2:	HAL_GPIO_WritePin(DIG_3_GPIO_Port, DIG_3_Pin, 0); break;
 8000b5a:	2380      	movs	r3, #128	; 0x80
 8000b5c:	0099      	lsls	r1, r3, #2
 8000b5e:	2390      	movs	r3, #144	; 0x90
 8000b60:	05db      	lsls	r3, r3, #23
 8000b62:	2200      	movs	r2, #0
 8000b64:	0018      	movs	r0, r3
 8000b66:	f002 f896 	bl	8002c96 <HAL_GPIO_WritePin>
 8000b6a:	e008      	b.n	8000b7e <select_digit+0x6a>
		case 3:	HAL_GPIO_WritePin(DIG_4_GPIO_Port, DIG_4_Pin, 0); break;
 8000b6c:	2380      	movs	r3, #128	; 0x80
 8000b6e:	00d9      	lsls	r1, r3, #3
 8000b70:	2390      	movs	r3, #144	; 0x90
 8000b72:	05db      	lsls	r3, r3, #23
 8000b74:	2200      	movs	r2, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f002 f88d 	bl	8002c96 <HAL_GPIO_WritePin>
 8000b7c:	46c0      	nop			; (mov r8, r8)
	}

	// turn colon on when requested
	if(((digit & 0x03) == 0x03) && colon_on)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2203      	movs	r2, #3
 8000b82:	4013      	ands	r3, r2
 8000b84:	2b03      	cmp	r3, #3
 8000b86:	d10b      	bne.n	8000ba0 <select_digit+0x8c>
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <select_digit+0xb4>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d007      	beq.n	8000ba0 <select_digit+0x8c>
	{
		HAL_GPIO_WritePin(COLON_GPIO_Port, COLON_Pin, 1);
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	0219      	lsls	r1, r3, #8
 8000b94:	2390      	movs	r3, #144	; 0x90
 8000b96:	05db      	lsls	r3, r3, #23
 8000b98:	2201      	movs	r2, #1
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f002 f87b 	bl	8002c96 <HAL_GPIO_WritePin>
	}

	// display decimal point in rightmost digit if alarm is enabled
	if(((digit & 0x03) == 0) && alarm_enabled)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	d10a      	bne.n	8000bbe <select_digit+0xaa>
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <select_digit+0xb8>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d006      	beq.n	8000bbe <select_digit+0xaa>
	{
		HAL_GPIO_WritePin(DP_GPIO_Port, DP_Pin, 1);
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	019b      	lsls	r3, r3, #6
 8000bb4:	4806      	ldr	r0, [pc, #24]	; (8000bd0 <select_digit+0xbc>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	0019      	movs	r1, r3
 8000bba:	f002 f86c 	bl	8002c96 <HAL_GPIO_WritePin>
	}
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b002      	add	sp, #8
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	200003d0 	.word	0x200003d0
 8000bcc:	200003d1 	.word	0x200003d1
 8000bd0:	48000400 	.word	0x48000400

08000bd4 <write_digit>:

/** write to selected digit */
static void write_digit(int digit)
{
 8000bd4:	b590      	push	{r4, r7, lr}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	uint8_t pattern = patterns[digit & 0x0f];
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	220f      	movs	r2, #15
 8000be0:	401a      	ands	r2, r3
 8000be2:	240f      	movs	r4, #15
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	4930      	ldr	r1, [pc, #192]	; (8000ca8 <write_digit+0xd4>)
 8000be8:	5c8a      	ldrb	r2, [r1, r2]
 8000bea:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SEG_G_GPIO_Port, SEG_G_Pin, (pattern >> 0 & 1));
 8000bec:	193b      	adds	r3, r7, r4
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	4013      	ands	r3, r2
 8000bf4:	b2da      	uxtb	r2, r3
 8000bf6:	2390      	movs	r3, #144	; 0x90
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	2140      	movs	r1, #64	; 0x40
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f002 f84a 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_F_GPIO_Port, SEG_F_Pin, (pattern >> 1 & 1));
 8000c02:	193b      	adds	r3, r7, r4
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	085b      	lsrs	r3, r3, #1
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	2201      	movs	r2, #1
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	2390      	movs	r3, #144	; 0x90
 8000c12:	05db      	lsls	r3, r3, #23
 8000c14:	2120      	movs	r1, #32
 8000c16:	0018      	movs	r0, r3
 8000c18:	f002 f83d 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_E_GPIO_Port, SEG_E_Pin, (pattern >> 2 & 1));
 8000c1c:	193b      	adds	r3, r7, r4
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	089b      	lsrs	r3, r3, #2
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	2201      	movs	r2, #1
 8000c26:	4013      	ands	r3, r2
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	2390      	movs	r3, #144	; 0x90
 8000c2c:	05db      	lsls	r3, r3, #23
 8000c2e:	2110      	movs	r1, #16
 8000c30:	0018      	movs	r0, r3
 8000c32:	f002 f830 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_D_GPIO_Port, SEG_D_Pin, (pattern >> 3 & 1));
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	08db      	lsrs	r3, r3, #3
 8000c3c:	b2db      	uxtb	r3, r3
 8000c3e:	2201      	movs	r2, #1
 8000c40:	4013      	ands	r3, r2
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	2390      	movs	r3, #144	; 0x90
 8000c46:	05db      	lsls	r3, r3, #23
 8000c48:	2108      	movs	r1, #8
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 f823 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_C_GPIO_Port, SEG_C_Pin, (pattern >> 4 & 1));
 8000c50:	193b      	adds	r3, r7, r4
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	091b      	lsrs	r3, r3, #4
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	2201      	movs	r2, #1
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	2390      	movs	r3, #144	; 0x90
 8000c60:	05db      	lsls	r3, r3, #23
 8000c62:	2104      	movs	r1, #4
 8000c64:	0018      	movs	r0, r3
 8000c66:	f002 f816 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_B_GPIO_Port, SEG_B_Pin, (pattern >> 5 & 1));
 8000c6a:	193b      	adds	r3, r7, r4
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	095b      	lsrs	r3, r3, #5
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2201      	movs	r2, #1
 8000c74:	4013      	ands	r3, r2
 8000c76:	b2da      	uxtb	r2, r3
 8000c78:	2390      	movs	r3, #144	; 0x90
 8000c7a:	05db      	lsls	r3, r3, #23
 8000c7c:	2102      	movs	r1, #2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f002 f809 	bl	8002c96 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SEG_A_GPIO_Port, SEG_A_Pin, (pattern >> 6 & 1));
 8000c84:	193b      	adds	r3, r7, r4
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	099b      	lsrs	r3, r3, #6
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	4013      	ands	r3, r2
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	2390      	movs	r3, #144	; 0x90
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2101      	movs	r1, #1
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fffc 	bl	8002c96 <HAL_GPIO_WritePin>
}
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b005      	add	sp, #20
 8000ca4:	bd90      	pop	{r4, r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	2000003c 	.word	0x2000003c

08000cac <multiplexer_timer_callback>:

/** */
static void multiplexer_timer_callback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	static uint8_t digit;

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7f1b      	ldrb	r3, [r3, #28]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d11d      	bne.n	8000cf8 <multiplexer_timer_callback+0x4c>
	{
		// leading zero suppression (on hours only)
		if(digit == 3 && display_time.digit[digit] == 0x00)
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	2b03      	cmp	r3, #3
 8000cc2:	d10c      	bne.n	8000cde <multiplexer_timer_callback+0x32>
 8000cc4:	4b18      	ldr	r3, [pc, #96]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	001a      	movs	r2, r3
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <multiplexer_timer_callback+0x80>)
 8000ccc:	5c9b      	ldrb	r3, [r3, r2]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d105      	bne.n	8000cde <multiplexer_timer_callback+0x32>
		{
			display_time.digit[digit] = 0x0a;
 8000cd2:	4b15      	ldr	r3, [pc, #84]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000cd4:	781b      	ldrb	r3, [r3, #0]
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <multiplexer_timer_callback+0x80>)
 8000cda:	210a      	movs	r1, #10
 8000cdc:	5499      	strb	r1, [r3, r2]
		}

		write_digit(display_time.digit[digit]);
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	001a      	movs	r2, r3
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <multiplexer_timer_callback+0x80>)
 8000ce6:	5c9b      	ldrb	r3, [r3, r2]
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff ff73 	bl	8000bd4 <write_digit>
		select_digit(digit);
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f7ff ff0e 	bl	8000b14 <select_digit>
	}

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	7f1b      	ldrb	r3, [r3, #28]
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d10e      	bne.n	8000d1e <multiplexer_timer_callback+0x72>
	{
		deselect_digit();
 8000d00:	f7ff fed2 	bl	8000aa8 <deselect_digit>

		if(++digit == 4)
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	b2da      	uxtb	r2, r3
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	4b05      	ldr	r3, [pc, #20]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b04      	cmp	r3, #4
 8000d16:	d102      	bne.n	8000d1e <multiplexer_timer_callback+0x72>
		{
			digit = 0;
 8000d18:	4b03      	ldr	r3, [pc, #12]	; (8000d28 <multiplexer_timer_callback+0x7c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	b002      	add	sp, #8
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	46c0      	nop			; (mov r8, r8)
 8000d28:	200003d3 	.word	0x200003d3
 8000d2c:	200003cc 	.word	0x200003cc

08000d30 <update_timer_callback>:

/** */
static void update_timer_callback(TIM_HandleTypeDef *timer)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
	display_update();
 8000d38:	f000 f85a 	bl	8000df0 <display_update>
}
 8000d3c:	46c0      	nop			; (mov r8, r8)
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <set_brightness>:

/** */
static void set_brightness(uint32_t brightness)
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b08b      	sub	sp, #44	; 0x2c
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4c:	240c      	movs	r4, #12
 8000d4e:	193b      	adds	r3, r7, r4
 8000d50:	0018      	movs	r0, r3
 8000d52:	231c      	movs	r3, #28
 8000d54:	001a      	movs	r2, r3
 8000d56:	2100      	movs	r1, #0
 8000d58:	f00b fddc 	bl	800c914 <memset>
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d5c:	0021      	movs	r1, r4
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2260      	movs	r2, #96	; 0x60
 8000d62:	601a      	str	r2, [r3, #0]
	sConfigOC.Pulse = 0;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	605a      	str	r2, [r3, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	609a      	str	r2, [r3, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d70:	187b      	adds	r3, r7, r1
 8000d72:	2200      	movs	r2, #0
 8000d74:	611a      	str	r2, [r3, #16]
	sConfigOC.Pulse = brightness;
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	687a      	ldr	r2, [r7, #4]
 8000d7a:	605a      	str	r2, [r3, #4]
	HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2);
 8000d7c:	1879      	adds	r1, r7, r1
 8000d7e:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <set_brightness+0x4c>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	0018      	movs	r0, r3
 8000d84:	f005 feb4 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
}
 8000d88:	46c0      	nop			; (mov r8, r8)
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	b00b      	add	sp, #44	; 0x2c
 8000d8e:	bd90      	pop	{r4, r7, pc}
 8000d90:	200004c8 	.word	0x200004c8

08000d94 <display_start>:

/** */
void display_start(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	// start the update timer (1s period)
	HAL_TIM_RegisterCallback(&htim2, HAL_TIM_PERIOD_ELAPSED_CB_ID, update_timer_callback);
 8000d98:	4a10      	ldr	r2, [pc, #64]	; (8000ddc <display_start+0x48>)
 8000d9a:	4b11      	ldr	r3, [pc, #68]	; (8000de0 <display_start+0x4c>)
 8000d9c:	210e      	movs	r1, #14
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f006 f890 	bl	8006ec4 <HAL_TIM_RegisterCallback>
	HAL_TIM_Base_Start_IT(&htim2);
 8000da4:	4b0e      	ldr	r3, [pc, #56]	; (8000de0 <display_start+0x4c>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f005 fbb4 	bl	8006514 <HAL_TIM_Base_Start_IT>

	// start the multiplexer timer (100ms period)
	HAL_TIM_RegisterCallback(&htim3, HAL_TIM_PWM_PULSE_FINISHED_CB_ID, multiplexer_timer_callback);
 8000dac:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <display_start+0x50>)
 8000dae:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <display_start+0x54>)
 8000db0:	2115      	movs	r1, #21
 8000db2:	0018      	movs	r0, r3
 8000db4:	f006 f886 	bl	8006ec4 <HAL_TIM_RegisterCallback>
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <display_start+0x54>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f005 fc61 	bl	8006684 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 8000dc2:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <display_start+0x54>)
 8000dc4:	2104      	movs	r1, #4
 8000dc6:	0018      	movs	r0, r3
 8000dc8:	f005 fc5c 	bl	8006684 <HAL_TIM_PWM_Start_IT>

	set_brightness(MAX_BRIGHTNESS);
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <display_start+0x58>)
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f7ff ffb8 	bl	8000d44 <set_brightness>
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	08000d31 	.word	0x08000d31
 8000de0:	20000414 	.word	0x20000414
 8000de4:	08000cad 	.word	0x08000cad
 8000de8:	200004c8 	.word	0x200004c8
 8000dec:	0000128e 	.word	0x0000128e

08000df0 <display_update>:

/** */
void display_update(void)
{
 8000df0:	b590      	push	{r4, r7, lr}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
	uint8_t hours, minutes;

	if(alarm_time)
 8000df6:	4b28      	ldr	r3, [pc, #160]	; (8000e98 <display_update+0xa8>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d009      	beq.n	8000e12 <display_update+0x22>
	{
		get_alarm(&hours, &minutes);
 8000dfe:	1d3a      	adds	r2, r7, #4
 8000e00:	1d7b      	adds	r3, r7, #5
 8000e02:	0011      	movs	r1, r2
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fb07 	bl	8002418 <get_alarm>
	    colon_on = false;
 8000e0a:	4b24      	ldr	r3, [pc, #144]	; (8000e9c <display_update+0xac>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
 8000e10:	e013      	b.n	8000e3a <display_update+0x4a>
	}
	else
	{
		get_time(&hours, &minutes);
 8000e12:	1d3a      	adds	r2, r7, #4
 8000e14:	1d7b      	adds	r3, r7, #5
 8000e16:	0011      	movs	r1, r2
 8000e18:	0018      	movs	r0, r3
 8000e1a:	f001 f9cf 	bl	80021bc <get_time>
	    colon_on = !colon_on;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	; (8000e9c <display_update+0xac>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	4193      	sbcs	r3, r2
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	2201      	movs	r2, #1
 8000e2a:	4053      	eors	r3, r2
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	1c1a      	adds	r2, r3, #0
 8000e30:	2301      	movs	r3, #1
 8000e32:	4013      	ands	r3, r2
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <display_update+0xac>)
 8000e38:	701a      	strb	r2, [r3, #0]
	}

	uint8_t bcd_hours = RTC_ByteToBcd2(hours);
 8000e3a:	1d7b      	adds	r3, r7, #5
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	1dfc      	adds	r4, r7, #7
 8000e40:	0018      	movs	r0, r3
 8000e42:	f005 fa7b 	bl	800633c <RTC_ByteToBcd2>
 8000e46:	0003      	movs	r3, r0
 8000e48:	7023      	strb	r3, [r4, #0]
	uint8_t bcd_minutes = RTC_ByteToBcd2(minutes);
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	1dbc      	adds	r4, r7, #6
 8000e50:	0018      	movs	r0, r3
 8000e52:	f005 fa73 	bl	800633c <RTC_ByteToBcd2>
 8000e56:	0003      	movs	r3, r0
 8000e58:	7023      	strb	r3, [r4, #0]

	display_time.digit[3] = ( bcd_hours & 0xf0 ) >> 4;
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <display_update+0xb0>)
 8000e64:	70da      	strb	r2, [r3, #3]
	display_time.digit[2] = ( bcd_hours & 0x0f ) >> 0;
 8000e66:	1dfb      	adds	r3, r7, #7
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	220f      	movs	r2, #15
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	4b0b      	ldr	r3, [pc, #44]	; (8000ea0 <display_update+0xb0>)
 8000e72:	709a      	strb	r2, [r3, #2]
	display_time.digit[1] = ( bcd_minutes & 0xf0 ) >> 4;
 8000e74:	1dbb      	adds	r3, r7, #6
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	091b      	lsrs	r3, r3, #4
 8000e7a:	b2da      	uxtb	r2, r3
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <display_update+0xb0>)
 8000e7e:	705a      	strb	r2, [r3, #1]
	display_time.digit[0] = ( bcd_minutes & 0x0f ) >> 0;
 8000e80:	1dbb      	adds	r3, r7, #6
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	220f      	movs	r2, #15
 8000e86:	4013      	ands	r3, r2
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	4b05      	ldr	r3, [pc, #20]	; (8000ea0 <display_update+0xb0>)
 8000e8c:	701a      	strb	r2, [r3, #0]
}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b003      	add	sp, #12
 8000e94:	bd90      	pop	{r4, r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	200003d2 	.word	0x200003d2
 8000e9c:	200003d0 	.word	0x200003d0
 8000ea0:	200003cc 	.word	0x200003cc

08000ea4 <display_increase_brightness>:

/** */
void display_increase_brightness(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
	if(brightness < MAX_BRIGHTNESS)
 8000ea8:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <display_increase_brightness+0x2c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a09      	ldr	r2, [pc, #36]	; (8000ed4 <display_increase_brightness+0x30>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	dc05      	bgt.n	8000ebe <display_increase_brightness+0x1a>
	{
		brightness+=INC_BRIGHTNESS;
 8000eb2:	4b07      	ldr	r3, [pc, #28]	; (8000ed0 <display_increase_brightness+0x2c>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	33fa      	adds	r3, #250	; 0xfa
 8000eb8:	001a      	movs	r2, r3
 8000eba:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <display_increase_brightness+0x2c>)
 8000ebc:	601a      	str	r2, [r3, #0]
	}
	set_brightness(brightness);
 8000ebe:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <display_increase_brightness+0x2c>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f7ff ff3e 	bl	8000d44 <set_brightness>
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	46c0      	nop			; (mov r8, r8)
 8000ed0:	2000004c 	.word	0x2000004c
 8000ed4:	0000128d 	.word	0x0000128d

08000ed8 <display_decrease_brightness>:

/** */
void display_decrease_brightness(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	if(brightness > MIN_BRIGHTNESS)
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <display_decrease_brightness+0x2c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	23fa      	movs	r3, #250	; 0xfa
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dd05      	ble.n	8000ef4 <display_decrease_brightness+0x1c>
	{
		brightness-=INC_BRIGHTNESS;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	; (8000f04 <display_decrease_brightness+0x2c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	3bfa      	subs	r3, #250	; 0xfa
 8000eee:	001a      	movs	r2, r3
 8000ef0:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <display_decrease_brightness+0x2c>)
 8000ef2:	601a      	str	r2, [r3, #0]
	}
	set_brightness(brightness);
 8000ef4:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <display_decrease_brightness+0x2c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0018      	movs	r0, r3
 8000efa:	f7ff ff23 	bl	8000d44 <set_brightness>
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	2000004c 	.word	0x2000004c

08000f08 <display_alarm_enabled>:

/** */
void display_alarm_enabled(bool enabled)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	0002      	movs	r2, r0
 8000f10:	1dfb      	adds	r3, r7, #7
 8000f12:	701a      	strb	r2, [r3, #0]
	alarm_enabled = enabled;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <display_alarm_enabled+0x1c>)
 8000f16:	1dfa      	adds	r2, r7, #7
 8000f18:	7812      	ldrb	r2, [r2, #0]
 8000f1a:	701a      	strb	r2, [r3, #0]
}
 8000f1c:	46c0      	nop			; (mov r8, r8)
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	b002      	add	sp, #8
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	200003d1 	.word	0x200003d1

08000f28 <display_alarm_time>:

/** */
void  display_alarm_time(bool time)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	0002      	movs	r2, r0
 8000f30:	1dfb      	adds	r3, r7, #7
 8000f32:	701a      	strb	r2, [r3, #0]
	alarm_time = time;
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <display_alarm_time+0x1c>)
 8000f36:	1dfa      	adds	r2, r7, #7
 8000f38:	7812      	ldrb	r2, [r2, #0]
 8000f3a:	701a      	strb	r2, [r3, #0]
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b002      	add	sp, #8
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200003d2 	.word	0x200003d2

08000f48 <_read>:
#include "usbd_core.h"
#include "usbd_cdc_if.h"

// read from usb serial port
int _read(int file, char *data, int len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	while(!usb_char_waiting())
 8000f54:	e002      	b.n	8000f5c <_read+0x14>
	{
		HAL_Delay(10);
 8000f56:	200a      	movs	r0, #10
 8000f58:	f001 fbd4 	bl	8002704 <HAL_Delay>
	while(!usb_char_waiting())
 8000f5c:	f00a ff02 	bl	800bd64 <usb_char_waiting>
 8000f60:	1e03      	subs	r3, r0, #0
 8000f62:	d0f8      	beq.n	8000f56 <_read+0xe>
	}

    *data = usb_read_char();
 8000f64:	f00a ff12 	bl	800bd8c <usb_read_char>
 8000f68:	0003      	movs	r3, r0
 8000f6a:	001a      	movs	r2, r3
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	701a      	strb	r2, [r3, #0]
	return 1;
 8000f70:	2301      	movs	r3, #1
}
 8000f72:	0018      	movs	r0, r3
 8000f74:	46bd      	mov	sp, r7
 8000f76:	b004      	add	sp, #16
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <_write>:

// write to usb serial port
int _write(int file, char *ptr, int len)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b084      	sub	sp, #16
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	60f8      	str	r0, [r7, #12]
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607a      	str	r2, [r7, #4]
	if(usb_is_configured())
 8000f86:	f00a ff21 	bl	800bdcc <usb_is_configured>
 8000f8a:	1e03      	subs	r3, r0, #0
 8000f8c:	d006      	beq.n	8000f9c <_write+0x22>
	{
		usb_write_chars(ptr, len);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	68bb      	ldr	r3, [r7, #8]
 8000f94:	0011      	movs	r1, r2
 8000f96:	0018      	movs	r0, r3
 8000f98:	f00a ff22 	bl	800bde0 <usb_write_chars>
	}

	return len;
 8000f9c:	687b      	ldr	r3, [r7, #4]
}
 8000f9e:	0018      	movs	r0, r3
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b004      	add	sp, #16
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fae:	f001 fb45 	bl	800263c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb2:	f000 f843 	bl	800103c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb6:	f000 faf3 	bl	80015a0 <MX_GPIO_Init>
  MX_RTC_Init();
 8000fba:	f000 f8b1 	bl	8001120 <MX_RTC_Init>
  MX_TIM17_Init();
 8000fbe:	f000 fa97 	bl	80014f0 <MX_TIM17_Init>
  MX_USART3_UART_Init();
 8000fc2:	f000 fabd 	bl	8001540 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000fc6:	f000 f8e5 	bl	8001194 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fca:	f000 f937 	bl	800123c <MX_TIM3_Init>
  MX_TIM7_Init();
 8000fce:	f000 f9fb 	bl	80013c8 <MX_TIM7_Init>
  MX_USB_DEVICE_Init();
 8000fd2:	f00a fe93 	bl	800bcfc <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8000fd6:	f000 f9bb 	bl	8001350 <MX_TIM6_Init>
  MX_TIM15_Init();
 8000fda:	f000 fa31 	bl	8001440 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */
  setvbuf(stdin, NULL, _IONBF, 0);
 8000fde:	4b16      	ldr	r3, [pc, #88]	; (8001038 <main+0x90>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6858      	ldr	r0, [r3, #4]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	2100      	movs	r1, #0
 8000fea:	f00c f829 	bl	800d040 <setvbuf>
  setvbuf(stdout, NULL, _IONBF, 0);
 8000fee:	4b12      	ldr	r3, [pc, #72]	; (8001038 <main+0x90>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	6898      	ldr	r0, [r3, #8]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	f00c f821 	bl	800d040 <setvbuf>
  setvbuf(stderr, NULL, _IONBF, 0);
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <main+0x90>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68d8      	ldr	r0, [r3, #12]
 8001004:	2300      	movs	r3, #0
 8001006:	2202      	movs	r2, #2
 8001008:	2100      	movs	r1, #0
 800100a:	f00c f819 	bl	800d040 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(int delay =0; delay < 50; delay++)
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	e009      	b.n	8001028 <main+0x80>
	  {
			if(usb_is_configured())
 8001014:	f00a feda 	bl	800bdcc <usb_is_configured>
 8001018:	1e03      	subs	r3, r0, #0
 800101a:	d109      	bne.n	8001030 <main+0x88>
			{
				break;
			}
			HAL_Delay(100);
 800101c:	2064      	movs	r0, #100	; 0x64
 800101e:	f001 fb71 	bl	8002704 <HAL_Delay>
	  for(int delay =0; delay < 50; delay++)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2b31      	cmp	r3, #49	; 0x31
 800102c:	ddf2      	ble.n	8001014 <main+0x6c>
 800102e:	e000      	b.n	8001032 <main+0x8a>
				break;
 8001030:	46c0      	nop			; (mov r8, r8)
	  }
	  main_task();
 8001032:	f000 fbaf 	bl	8001794 <main_task>
	  for(int delay =0; delay < 50; delay++)
 8001036:	e7ea      	b.n	800100e <main+0x66>
 8001038:	200001d4 	.word	0x200001d4

0800103c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800103c:	b590      	push	{r4, r7, lr}
 800103e:	b099      	sub	sp, #100	; 0x64
 8001040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001042:	242c      	movs	r4, #44	; 0x2c
 8001044:	193b      	adds	r3, r7, r4
 8001046:	0018      	movs	r0, r3
 8001048:	2334      	movs	r3, #52	; 0x34
 800104a:	001a      	movs	r2, r3
 800104c:	2100      	movs	r1, #0
 800104e:	f00b fc61 	bl	800c914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001052:	231c      	movs	r3, #28
 8001054:	18fb      	adds	r3, r7, r3
 8001056:	0018      	movs	r0, r3
 8001058:	2310      	movs	r3, #16
 800105a:	001a      	movs	r2, r3
 800105c:	2100      	movs	r1, #0
 800105e:	f00b fc59 	bl	800c914 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001062:	003b      	movs	r3, r7
 8001064:	0018      	movs	r0, r3
 8001066:	231c      	movs	r3, #28
 8001068:	001a      	movs	r2, r3
 800106a:	2100      	movs	r1, #0
 800106c:	f00b fc52 	bl	800c914 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001070:	f003 fcb8 	bl	80049e4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8001074:	4b29      	ldr	r3, [pc, #164]	; (800111c <SystemClock_Config+0xe0>)
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	4b28      	ldr	r3, [pc, #160]	; (800111c <SystemClock_Config+0xe0>)
 800107a:	2118      	movs	r1, #24
 800107c:	430a      	orrs	r2, r1
 800107e:	621a      	str	r2, [r3, #32]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001080:	0021      	movs	r1, r4
 8001082:	187b      	adds	r3, r7, r1
 8001084:	2205      	movs	r2, #5
 8001086:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	187b      	adds	r3, r7, r1
 800108a:	2201      	movs	r2, #1
 800108c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800108e:	187b      	adds	r3, r7, r1
 8001090:	2201      	movs	r2, #1
 8001092:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001094:	187b      	adds	r3, r7, r1
 8001096:	2202      	movs	r2, #2
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800109a:	187b      	adds	r3, r7, r1
 800109c:	2280      	movs	r2, #128	; 0x80
 800109e:	0252      	lsls	r2, r2, #9
 80010a0:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80010a2:	187b      	adds	r3, r7, r1
 80010a4:	2280      	movs	r2, #128	; 0x80
 80010a6:	0352      	lsls	r2, r2, #13
 80010a8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	2200      	movs	r2, #0
 80010ae:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	0018      	movs	r0, r3
 80010b4:	f003 fca4 	bl	8004a00 <HAL_RCC_OscConfig>
 80010b8:	1e03      	subs	r3, r0, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010bc:	f000 fb54 	bl	8001768 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c0:	211c      	movs	r1, #28
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2202      	movs	r2, #2
 80010cc:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010d4:	187b      	adds	r3, r7, r1
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010da:	187b      	adds	r3, r7, r1
 80010dc:	2101      	movs	r1, #1
 80010de:	0018      	movs	r0, r3
 80010e0:	f004 f814 	bl	800510c <HAL_RCC_ClockConfig>
 80010e4:	1e03      	subs	r3, r0, #0
 80010e6:	d001      	beq.n	80010ec <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80010e8:	f000 fb3e 	bl	8001768 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RTC;
 80010ec:	003b      	movs	r3, r7
 80010ee:	22c0      	movs	r2, #192	; 0xc0
 80010f0:	0292      	lsls	r2, r2, #10
 80010f2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80010f4:	003b      	movs	r3, r7
 80010f6:	2280      	movs	r2, #128	; 0x80
 80010f8:	0052      	lsls	r2, r2, #1
 80010fa:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010fc:	003b      	movs	r3, r7
 80010fe:	2280      	movs	r2, #128	; 0x80
 8001100:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001102:	003b      	movs	r3, r7
 8001104:	0018      	movs	r0, r3
 8001106:	f004 f96d 	bl	80053e4 <HAL_RCCEx_PeriphCLKConfig>
 800110a:	1e03      	subs	r3, r0, #0
 800110c:	d001      	beq.n	8001112 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 800110e:	f000 fb2b 	bl	8001768 <Error_Handler>
  }
}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	46bd      	mov	sp, r7
 8001116:	b019      	add	sp, #100	; 0x64
 8001118:	bd90      	pop	{r4, r7, pc}
 800111a:	46c0      	nop			; (mov r8, r8)
 800111c:	40021000 	.word	0x40021000

08001120 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b090      	sub	sp, #64	; 0x40
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001126:	232c      	movs	r3, #44	; 0x2c
 8001128:	18fb      	adds	r3, r7, r3
 800112a:	0018      	movs	r0, r3
 800112c:	2314      	movs	r3, #20
 800112e:	001a      	movs	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	f00b fbef 	bl	800c914 <memset>
  RTC_DateTypeDef sDate = {0};
 8001136:	2328      	movs	r3, #40	; 0x28
 8001138:	18fb      	adds	r3, r7, r3
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 800113e:	003b      	movs	r3, r7
 8001140:	0018      	movs	r0, r3
 8001142:	2328      	movs	r3, #40	; 0x28
 8001144:	001a      	movs	r2, r3
 8001146:	2100      	movs	r1, #0
 8001148:	f00b fbe4 	bl	800c914 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800114c:	4b0f      	ldr	r3, [pc, #60]	; (800118c <MX_RTC_Init+0x6c>)
 800114e:	4a10      	ldr	r2, [pc, #64]	; (8001190 <MX_RTC_Init+0x70>)
 8001150:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_RTC_Init+0x6c>)
 8001154:	2200      	movs	r2, #0
 8001156:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_RTC_Init+0x6c>)
 800115a:	227f      	movs	r2, #127	; 0x7f
 800115c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_RTC_Init+0x6c>)
 8001160:	22ff      	movs	r2, #255	; 0xff
 8001162:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_RTC_Init+0x6c>)
 8001166:	2200      	movs	r2, #0
 8001168:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_RTC_Init+0x6c>)
 800116c:	2200      	movs	r2, #0
 800116e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_RTC_Init+0x6c>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001176:	4b05      	ldr	r3, [pc, #20]	; (800118c <MX_RTC_Init+0x6c>)
 8001178:	0018      	movs	r0, r3
 800117a:	f004 fa31 	bl	80055e0 <HAL_RTC_Init>
 800117e:	1e03      	subs	r3, r0, #0
 8001180:	d001      	beq.n	8001186 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8001182:	f000 faf1 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001186:	46bd      	mov	sp, r7
 8001188:	b010      	add	sp, #64	; 0x40
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200003d4 	.word	0x200003d4
 8001190:	40002800 	.word	0x40002800

08001194 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119a:	2308      	movs	r3, #8
 800119c:	18fb      	adds	r3, r7, r3
 800119e:	0018      	movs	r0, r3
 80011a0:	2310      	movs	r3, #16
 80011a2:	001a      	movs	r2, r3
 80011a4:	2100      	movs	r1, #0
 80011a6:	f00b fbb5 	bl	800c914 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011aa:	003b      	movs	r3, r7
 80011ac:	0018      	movs	r0, r3
 80011ae:	2308      	movs	r3, #8
 80011b0:	001a      	movs	r2, r3
 80011b2:	2100      	movs	r1, #0
 80011b4:	f00b fbae 	bl	800c914 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	05d2      	lsls	r2, r2, #23
 80011be:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48;
 80011c0:	4b1c      	ldr	r3, [pc, #112]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011c2:	2230      	movs	r2, #48	; 0x30
 80011c4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000000;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011ce:	4a1a      	ldr	r2, [pc, #104]	; (8001238 <MX_TIM2_Init+0xa4>)
 80011d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011de:	4b15      	ldr	r3, [pc, #84]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011e0:	0018      	movs	r0, r3
 80011e2:	f005 f913 	bl	800640c <HAL_TIM_Base_Init>
 80011e6:	1e03      	subs	r3, r0, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80011ea:	f000 fabd 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011ee:	2108      	movs	r1, #8
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	0152      	lsls	r2, r2, #5
 80011f6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011f8:	187a      	adds	r2, r7, r1
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_TIM2_Init+0xa0>)
 80011fc:	0011      	movs	r1, r2
 80011fe:	0018      	movs	r0, r3
 8001200:	f005 fd3c 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001208:	f000 faae 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800120c:	003b      	movs	r3, r7
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001212:	003b      	movs	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001218:	003a      	movs	r2, r7
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_TIM2_Init+0xa0>)
 800121c:	0011      	movs	r1, r2
 800121e:	0018      	movs	r0, r3
 8001220:	f006 fade 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001224:	1e03      	subs	r3, r0, #0
 8001226:	d001      	beq.n	800122c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001228:	f000 fa9e 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800122c:	46c0      	nop			; (mov r8, r8)
 800122e:	46bd      	mov	sp, r7
 8001230:	b006      	add	sp, #24
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000414 	.word	0x20000414
 8001238:	000f4240 	.word	0x000f4240

0800123c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08e      	sub	sp, #56	; 0x38
 8001240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001242:	2328      	movs	r3, #40	; 0x28
 8001244:	18fb      	adds	r3, r7, r3
 8001246:	0018      	movs	r0, r3
 8001248:	2310      	movs	r3, #16
 800124a:	001a      	movs	r2, r3
 800124c:	2100      	movs	r1, #0
 800124e:	f00b fb61 	bl	800c914 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	2320      	movs	r3, #32
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	0018      	movs	r0, r3
 8001258:	2308      	movs	r3, #8
 800125a:	001a      	movs	r2, r3
 800125c:	2100      	movs	r1, #0
 800125e:	f00b fb59 	bl	800c914 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001262:	1d3b      	adds	r3, r7, #4
 8001264:	0018      	movs	r0, r3
 8001266:	231c      	movs	r3, #28
 8001268:	001a      	movs	r2, r3
 800126a:	2100      	movs	r1, #0
 800126c:	f00b fb52 	bl	800c914 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001270:	4b34      	ldr	r3, [pc, #208]	; (8001344 <MX_TIM3_Init+0x108>)
 8001272:	4a35      	ldr	r2, [pc, #212]	; (8001348 <MX_TIM3_Init+0x10c>)
 8001274:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48;
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <MX_TIM3_Init+0x108>)
 8001278:	2230      	movs	r2, #48	; 0x30
 800127a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <MX_TIM3_Init+0x108>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 5000;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <MX_TIM3_Init+0x108>)
 8001284:	4a31      	ldr	r2, [pc, #196]	; (800134c <MX_TIM3_Init+0x110>)
 8001286:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001288:	4b2e      	ldr	r3, [pc, #184]	; (8001344 <MX_TIM3_Init+0x108>)
 800128a:	2200      	movs	r2, #0
 800128c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128e:	4b2d      	ldr	r3, [pc, #180]	; (8001344 <MX_TIM3_Init+0x108>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001294:	4b2b      	ldr	r3, [pc, #172]	; (8001344 <MX_TIM3_Init+0x108>)
 8001296:	0018      	movs	r0, r3
 8001298:	f005 f8b8 	bl	800640c <HAL_TIM_Base_Init>
 800129c:	1e03      	subs	r3, r0, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80012a0:	f000 fa62 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	2128      	movs	r1, #40	; 0x28
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	2280      	movs	r2, #128	; 0x80
 80012aa:	0152      	lsls	r2, r2, #5
 80012ac:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012ae:	187a      	adds	r2, r7, r1
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <MX_TIM3_Init+0x108>)
 80012b2:	0011      	movs	r1, r2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f005 fce1 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 80012ba:	1e03      	subs	r3, r0, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80012be:	f000 fa53 	bl	8001768 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012c2:	4b20      	ldr	r3, [pc, #128]	; (8001344 <MX_TIM3_Init+0x108>)
 80012c4:	0018      	movs	r0, r3
 80012c6:	f005 f977 	bl	80065b8 <HAL_TIM_PWM_Init>
 80012ca:	1e03      	subs	r3, r0, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80012ce:	f000 fa4b 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d2:	2120      	movs	r1, #32
 80012d4:	187b      	adds	r3, r7, r1
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012da:	187b      	adds	r3, r7, r1
 80012dc:	2200      	movs	r2, #0
 80012de:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012e0:	187a      	adds	r2, r7, r1
 80012e2:	4b18      	ldr	r3, [pc, #96]	; (8001344 <MX_TIM3_Init+0x108>)
 80012e4:	0011      	movs	r1, r2
 80012e6:	0018      	movs	r0, r3
 80012e8:	f006 fa7a 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80012f0:	f000 fa3a 	bl	8001768 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	2260      	movs	r2, #96	; 0x60
 80012f8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80012fa:	1d3b      	adds	r3, r7, #4
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130c:	1d39      	adds	r1, r7, #4
 800130e:	4b0d      	ldr	r3, [pc, #52]	; (8001344 <MX_TIM3_Init+0x108>)
 8001310:	2200      	movs	r2, #0
 8001312:	0018      	movs	r0, r3
 8001314:	f005 fbec 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 800131c:	f000 fa24 	bl	8001768 <Error_Handler>
  }
  sConfigOC.Pulse = 5000;
 8001320:	1d3b      	adds	r3, r7, #4
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <MX_TIM3_Init+0x110>)
 8001324:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	1d39      	adds	r1, r7, #4
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <MX_TIM3_Init+0x108>)
 800132a:	2204      	movs	r2, #4
 800132c:	0018      	movs	r0, r3
 800132e:	f005 fbdf 	bl	8006af0 <HAL_TIM_PWM_ConfigChannel>
 8001332:	1e03      	subs	r3, r0, #0
 8001334:	d001      	beq.n	800133a <MX_TIM3_Init+0xfe>
  {
    Error_Handler();
 8001336:	f000 fa17 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800133a:	46c0      	nop			; (mov r8, r8)
 800133c:	46bd      	mov	sp, r7
 800133e:	b00e      	add	sp, #56	; 0x38
 8001340:	bd80      	pop	{r7, pc}
 8001342:	46c0      	nop			; (mov r8, r8)
 8001344:	200004c8 	.word	0x200004c8
 8001348:	40000400 	.word	0x40000400
 800134c:	00001388 	.word	0x00001388

08001350 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001356:	003b      	movs	r3, r7
 8001358:	0018      	movs	r0, r3
 800135a:	2308      	movs	r3, #8
 800135c:	001a      	movs	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	f00b fad8 	bl	800c914 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001364:	4b15      	ldr	r3, [pc, #84]	; (80013bc <MX_TIM6_Init+0x6c>)
 8001366:	4a16      	ldr	r2, [pc, #88]	; (80013c0 <MX_TIM6_Init+0x70>)
 8001368:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 3200;
 800136a:	4b14      	ldr	r3, [pc, #80]	; (80013bc <MX_TIM6_Init+0x6c>)
 800136c:	22c8      	movs	r2, #200	; 0xc8
 800136e:	0112      	lsls	r2, r2, #4
 8001370:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <MX_TIM6_Init+0x6c>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5000;
 8001378:	4b10      	ldr	r3, [pc, #64]	; (80013bc <MX_TIM6_Init+0x6c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_TIM6_Init+0x74>)
 800137c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800137e:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <MX_TIM6_Init+0x6c>)
 8001380:	2280      	movs	r2, #128	; 0x80
 8001382:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001384:	4b0d      	ldr	r3, [pc, #52]	; (80013bc <MX_TIM6_Init+0x6c>)
 8001386:	0018      	movs	r0, r3
 8001388:	f005 f840 	bl	800640c <HAL_TIM_Base_Init>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8001390:	f000 f9ea 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	003b      	movs	r3, r7
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800139a:	003b      	movs	r3, r7
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80013a0:	003a      	movs	r2, r7
 80013a2:	4b06      	ldr	r3, [pc, #24]	; (80013bc <MX_TIM6_Init+0x6c>)
 80013a4:	0011      	movs	r1, r2
 80013a6:	0018      	movs	r0, r3
 80013a8:	f006 fa1a 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 80013ac:	1e03      	subs	r3, r0, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 80013b0:	f000 f9da 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80013b4:	46c0      	nop			; (mov r8, r8)
 80013b6:	46bd      	mov	sp, r7
 80013b8:	b002      	add	sp, #8
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000057c 	.word	0x2000057c
 80013c0:	40001000 	.word	0x40001000
 80013c4:	00001388 	.word	0x00001388

080013c8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	003b      	movs	r3, r7
 80013d0:	0018      	movs	r0, r3
 80013d2:	2308      	movs	r3, #8
 80013d4:	001a      	movs	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	f00b fa9c 	bl	800c914 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80013dc:	4b15      	ldr	r3, [pc, #84]	; (8001434 <MX_TIM7_Init+0x6c>)
 80013de:	4a16      	ldr	r2, [pc, #88]	; (8001438 <MX_TIM7_Init+0x70>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80;
 80013e2:	4b14      	ldr	r3, [pc, #80]	; (8001434 <MX_TIM7_Init+0x6c>)
 80013e4:	2250      	movs	r2, #80	; 0x50
 80013e6:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_TIM7_Init+0x6c>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 20000;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_TIM7_Init+0x6c>)
 80013f0:	4a12      	ldr	r2, [pc, #72]	; (800143c <MX_TIM7_Init+0x74>)
 80013f2:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_TIM7_Init+0x6c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_TIM7_Init+0x6c>)
 80013fc:	0018      	movs	r0, r3
 80013fe:	f005 f805 	bl	800640c <HAL_TIM_Base_Init>
 8001402:	1e03      	subs	r3, r0, #0
 8001404:	d001      	beq.n	800140a <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8001406:	f000 f9af 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	003b      	movs	r3, r7
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001410:	003b      	movs	r3, r7
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001416:	003a      	movs	r2, r7
 8001418:	4b06      	ldr	r3, [pc, #24]	; (8001434 <MX_TIM7_Init+0x6c>)
 800141a:	0011      	movs	r1, r2
 800141c:	0018      	movs	r0, r3
 800141e:	f006 f9df 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	1e03      	subs	r3, r0, #0
 8001424:	d001      	beq.n	800142a <MX_TIM7_Init+0x62>
  {
    Error_Handler();
 8001426:	f000 f99f 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	46bd      	mov	sp, r7
 800142e:	b002      	add	sp, #8
 8001430:	bd80      	pop	{r7, pc}
 8001432:	46c0      	nop			; (mov r8, r8)
 8001434:	20000630 	.word	0x20000630
 8001438:	40001400 	.word	0x40001400
 800143c:	00004e20 	.word	0x00004e20

08001440 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	2308      	movs	r3, #8
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	0018      	movs	r0, r3
 800144c:	2310      	movs	r3, #16
 800144e:	001a      	movs	r2, r3
 8001450:	2100      	movs	r1, #0
 8001452:	f00b fa5f 	bl	800c914 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	003b      	movs	r3, r7
 8001458:	0018      	movs	r0, r3
 800145a:	2308      	movs	r3, #8
 800145c:	001a      	movs	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	f00b fa58 	bl	800c914 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001464:	4b1f      	ldr	r3, [pc, #124]	; (80014e4 <MX_TIM15_Init+0xa4>)
 8001466:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <MX_TIM15_Init+0xa8>)
 8001468:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800146a:	4b1e      	ldr	r3, [pc, #120]	; (80014e4 <MX_TIM15_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001470:	4b1c      	ldr	r3, [pc, #112]	; (80014e4 <MX_TIM15_Init+0xa4>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8001476:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <MX_TIM15_Init+0xa4>)
 8001478:	4a1c      	ldr	r2, [pc, #112]	; (80014ec <MX_TIM15_Init+0xac>)
 800147a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147c:	4b19      	ldr	r3, [pc, #100]	; (80014e4 <MX_TIM15_Init+0xa4>)
 800147e:	2200      	movs	r2, #0
 8001480:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001482:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <MX_TIM15_Init+0xa4>)
 8001484:	2200      	movs	r2, #0
 8001486:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001488:	4b16      	ldr	r3, [pc, #88]	; (80014e4 <MX_TIM15_Init+0xa4>)
 800148a:	2200      	movs	r2, #0
 800148c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <MX_TIM15_Init+0xa4>)
 8001490:	0018      	movs	r0, r3
 8001492:	f004 ffbb 	bl	800640c <HAL_TIM_Base_Init>
 8001496:	1e03      	subs	r3, r0, #0
 8001498:	d001      	beq.n	800149e <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800149a:	f000 f965 	bl	8001768 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800149e:	2108      	movs	r1, #8
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	2280      	movs	r2, #128	; 0x80
 80014a4:	0152      	lsls	r2, r2, #5
 80014a6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80014a8:	187a      	adds	r2, r7, r1
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_TIM15_Init+0xa4>)
 80014ac:	0011      	movs	r1, r2
 80014ae:	0018      	movs	r0, r3
 80014b0:	f005 fbe4 	bl	8006c7c <HAL_TIM_ConfigClockSource>
 80014b4:	1e03      	subs	r3, r0, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 80014b8:	f000 f956 	bl	8001768 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	003b      	movs	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c2:	003b      	movs	r3, r7
 80014c4:	2200      	movs	r2, #0
 80014c6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80014c8:	003a      	movs	r2, r7
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_TIM15_Init+0xa4>)
 80014cc:	0011      	movs	r1, r2
 80014ce:	0018      	movs	r0, r3
 80014d0:	f006 f986 	bl	80077e0 <HAL_TIMEx_MasterConfigSynchronization>
 80014d4:	1e03      	subs	r3, r0, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80014d8:	f000 f946 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80014dc:	46c0      	nop			; (mov r8, r8)
 80014de:	46bd      	mov	sp, r7
 80014e0:	b006      	add	sp, #24
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200006e4 	.word	0x200006e4
 80014e8:	40014000 	.word	0x40014000
 80014ec:	0000ffff 	.word	0x0000ffff

080014f0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80014f4:	4b0f      	ldr	r3, [pc, #60]	; (8001534 <MX_TIM17_Init+0x44>)
 80014f6:	4a10      	ldr	r2, [pc, #64]	; (8001538 <MX_TIM17_Init+0x48>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 48;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <MX_TIM17_Init+0x44>)
 80014fc:	2230      	movs	r2, #48	; 0x30
 80014fe:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <MX_TIM17_Init+0x44>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001506:	4b0b      	ldr	r3, [pc, #44]	; (8001534 <MX_TIM17_Init+0x44>)
 8001508:	4a0c      	ldr	r2, [pc, #48]	; (800153c <MX_TIM17_Init+0x4c>)
 800150a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b09      	ldr	r3, [pc, #36]	; (8001534 <MX_TIM17_Init+0x44>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <MX_TIM17_Init+0x44>)
 8001514:	2200      	movs	r2, #0
 8001516:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001518:	4b06      	ldr	r3, [pc, #24]	; (8001534 <MX_TIM17_Init+0x44>)
 800151a:	2200      	movs	r2, #0
 800151c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <MX_TIM17_Init+0x44>)
 8001520:	0018      	movs	r0, r3
 8001522:	f004 ff73 	bl	800640c <HAL_TIM_Base_Init>
 8001526:	1e03      	subs	r3, r0, #0
 8001528:	d001      	beq.n	800152e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800152a:	f000 f91d 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000798 	.word	0x20000798
 8001538:	40014800 	.word	0x40014800
 800153c:	0000ffff 	.word	0x0000ffff

08001540 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_USART3_UART_Init+0x58>)
 8001546:	4a15      	ldr	r2, [pc, #84]	; (800159c <MX_USART3_UART_Init+0x5c>)
 8001548:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800154a:	4b13      	ldr	r3, [pc, #76]	; (8001598 <MX_USART3_UART_Init+0x58>)
 800154c:	22e1      	movs	r2, #225	; 0xe1
 800154e:	0252      	lsls	r2, r2, #9
 8001550:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USART3_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_USART3_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USART3_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USART3_UART_Init+0x58>)
 8001566:	220c      	movs	r2, #12
 8001568:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USART3_UART_Init+0x58>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USART3_UART_Init+0x58>)
 8001572:	2200      	movs	r2, #0
 8001574:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USART3_UART_Init+0x58>)
 8001578:	2200      	movs	r2, #0
 800157a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USART3_UART_Init+0x58>)
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001582:	4b05      	ldr	r3, [pc, #20]	; (8001598 <MX_USART3_UART_Init+0x58>)
 8001584:	0018      	movs	r0, r3
 8001586:	f006 f9a1 	bl	80078cc <HAL_UART_Init>
 800158a:	1e03      	subs	r3, r0, #0
 800158c:	d001      	beq.n	8001592 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800158e:	f000 f8eb 	bl	8001768 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001592:	46c0      	nop			; (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000084c 	.word	0x2000084c
 800159c:	40004800 	.word	0x40004800

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b590      	push	{r4, r7, lr}
 80015a2:	b08b      	sub	sp, #44	; 0x2c
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	2414      	movs	r4, #20
 80015a8:	193b      	adds	r3, r7, r4
 80015aa:	0018      	movs	r0, r3
 80015ac:	2314      	movs	r3, #20
 80015ae:	001a      	movs	r2, r3
 80015b0:	2100      	movs	r1, #0
 80015b2:	f00b f9af 	bl	800c914 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b6:	4b69      	ldr	r3, [pc, #420]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015b8:	695a      	ldr	r2, [r3, #20]
 80015ba:	4b68      	ldr	r3, [pc, #416]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015bc:	2180      	movs	r1, #128	; 0x80
 80015be:	0309      	lsls	r1, r1, #12
 80015c0:	430a      	orrs	r2, r1
 80015c2:	615a      	str	r2, [r3, #20]
 80015c4:	4b65      	ldr	r3, [pc, #404]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	2380      	movs	r3, #128	; 0x80
 80015ca:	031b      	lsls	r3, r3, #12
 80015cc:	4013      	ands	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80015d2:	4b62      	ldr	r3, [pc, #392]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015d4:	695a      	ldr	r2, [r3, #20]
 80015d6:	4b61      	ldr	r3, [pc, #388]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	03c9      	lsls	r1, r1, #15
 80015dc:	430a      	orrs	r2, r1
 80015de:	615a      	str	r2, [r3, #20]
 80015e0:	4b5e      	ldr	r3, [pc, #376]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015e2:	695a      	ldr	r2, [r3, #20]
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	03db      	lsls	r3, r3, #15
 80015e8:	4013      	ands	r3, r2
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	4b5b      	ldr	r3, [pc, #364]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015f0:	695a      	ldr	r2, [r3, #20]
 80015f2:	4b5a      	ldr	r3, [pc, #360]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015f4:	2180      	movs	r1, #128	; 0x80
 80015f6:	0289      	lsls	r1, r1, #10
 80015f8:	430a      	orrs	r2, r1
 80015fa:	615a      	str	r2, [r3, #20]
 80015fc:	4b57      	ldr	r3, [pc, #348]	; (800175c <MX_GPIO_Init+0x1bc>)
 80015fe:	695a      	ldr	r2, [r3, #20]
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	029b      	lsls	r3, r3, #10
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	4b54      	ldr	r3, [pc, #336]	; (800175c <MX_GPIO_Init+0x1bc>)
 800160c:	695a      	ldr	r2, [r3, #20]
 800160e:	4b53      	ldr	r3, [pc, #332]	; (800175c <MX_GPIO_Init+0x1bc>)
 8001610:	2180      	movs	r1, #128	; 0x80
 8001612:	02c9      	lsls	r1, r1, #11
 8001614:	430a      	orrs	r2, r1
 8001616:	615a      	str	r2, [r3, #20]
 8001618:	4b50      	ldr	r3, [pc, #320]	; (800175c <MX_GPIO_Init+0x1bc>)
 800161a:	695a      	ldr	r2, [r3, #20]
 800161c:	2380      	movs	r3, #128	; 0x80
 800161e:	02db      	lsls	r3, r3, #11
 8001620:	4013      	ands	r3, r2
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 8001626:	494e      	ldr	r1, [pc, #312]	; (8001760 <MX_GPIO_Init+0x1c0>)
 8001628:	2390      	movs	r3, #144	; 0x90
 800162a:	05db      	lsls	r3, r3, #23
 800162c:	2200      	movs	r2, #0
 800162e:	0018      	movs	r0, r3
 8001630:	f001 fb31 	bl	8002c96 <HAL_GPIO_WritePin>
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|COLON_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin, GPIO_PIN_SET);
 8001634:	23f0      	movs	r3, #240	; 0xf0
 8001636:	00d9      	lsls	r1, r3, #3
 8001638:	2390      	movs	r3, #144	; 0x90
 800163a:	05db      	lsls	r3, r3, #23
 800163c:	2201      	movs	r2, #1
 800163e:	0018      	movs	r0, r3
 8001640:	f001 fb29 	bl	8002c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DP_Pin|BUZZER_Pin, GPIO_PIN_RESET);
 8001644:	2388      	movs	r3, #136	; 0x88
 8001646:	019b      	lsls	r3, r3, #6
 8001648:	4846      	ldr	r0, [pc, #280]	; (8001764 <MX_GPIO_Init+0x1c4>)
 800164a:	2200      	movs	r2, #0
 800164c:	0019      	movs	r1, r3
 800164e:	f001 fb22 	bl	8002c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 8001652:	23c0      	movs	r3, #192	; 0xc0
 8001654:	021b      	lsls	r3, r3, #8
 8001656:	4843      	ldr	r0, [pc, #268]	; (8001764 <MX_GPIO_Init+0x1c4>)
 8001658:	2201      	movs	r2, #1
 800165a:	0019      	movs	r1, r3
 800165c:	f001 fb1b 	bl	8002c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SEG_A_Pin SEG_B_Pin SEG_C_Pin SEG_D_Pin
                           SEG_E_Pin SEG_F_Pin SEG_G_Pin COLON_Pin */
  GPIO_InitStruct.Pin = SEG_A_Pin|SEG_B_Pin|SEG_C_Pin|SEG_D_Pin
 8001660:	193b      	adds	r3, r7, r4
 8001662:	4a3f      	ldr	r2, [pc, #252]	; (8001760 <MX_GPIO_Init+0x1c0>)
 8001664:	601a      	str	r2, [r3, #0]
                          |SEG_E_Pin|SEG_F_Pin|SEG_G_Pin|COLON_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001666:	193b      	adds	r3, r7, r4
 8001668:	2201      	movs	r2, #1
 800166a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	193b      	adds	r3, r7, r4
 800166e:	2200      	movs	r2, #0
 8001670:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001672:	193b      	adds	r3, r7, r4
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	193a      	adds	r2, r7, r4
 800167a:	2390      	movs	r3, #144	; 0x90
 800167c:	05db      	lsls	r3, r3, #23
 800167e:	0011      	movs	r1, r2
 8001680:	0018      	movs	r0, r3
 8001682:	f001 f973 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : DIG_1_Pin DIG_2_Pin DIG_3_Pin DIG_4_Pin */
  GPIO_InitStruct.Pin = DIG_1_Pin|DIG_2_Pin|DIG_3_Pin|DIG_4_Pin;
 8001686:	0021      	movs	r1, r4
 8001688:	187b      	adds	r3, r7, r1
 800168a:	22f0      	movs	r2, #240	; 0xf0
 800168c:	00d2      	lsls	r2, r2, #3
 800168e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001690:	000c      	movs	r4, r1
 8001692:	193b      	adds	r3, r7, r4
 8001694:	2211      	movs	r2, #17
 8001696:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001698:	193b      	adds	r3, r7, r4
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800169e:	193b      	adds	r3, r7, r4
 80016a0:	2200      	movs	r2, #0
 80016a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a4:	193a      	adds	r2, r7, r4
 80016a6:	2390      	movs	r3, #144	; 0x90
 80016a8:	05db      	lsls	r3, r3, #23
 80016aa:	0011      	movs	r1, r2
 80016ac:	0018      	movs	r0, r3
 80016ae:	f001 f95d 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : SW1_INT_Pin SW2_INT_Pin SW3_INT_Pin SW4_INT_Pin */
  GPIO_InitStruct.Pin = SW1_INT_Pin|SW2_INT_Pin|SW3_INT_Pin|SW4_INT_Pin;
 80016b2:	0021      	movs	r1, r4
 80016b4:	187b      	adds	r3, r7, r1
 80016b6:	220f      	movs	r2, #15
 80016b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016ba:	187b      	adds	r3, r7, r1
 80016bc:	2284      	movs	r2, #132	; 0x84
 80016be:	0392      	lsls	r2, r2, #14
 80016c0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2201      	movs	r2, #1
 80016c6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	000c      	movs	r4, r1
 80016ca:	187b      	adds	r3, r7, r1
 80016cc:	4a25      	ldr	r2, [pc, #148]	; (8001764 <MX_GPIO_Init+0x1c4>)
 80016ce:	0019      	movs	r1, r3
 80016d0:	0010      	movs	r0, r2
 80016d2:	f001 f94b 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW5_INT_Pin */
  GPIO_InitStruct.Pin = SW5_INT_Pin;
 80016d6:	0021      	movs	r1, r4
 80016d8:	187b      	adds	r3, r7, r1
 80016da:	2280      	movs	r2, #128	; 0x80
 80016dc:	0152      	lsls	r2, r2, #5
 80016de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016e0:	187b      	adds	r3, r7, r1
 80016e2:	22c4      	movs	r2, #196	; 0xc4
 80016e4:	0392      	lsls	r2, r2, #14
 80016e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016e8:	187b      	adds	r3, r7, r1
 80016ea:	2201      	movs	r2, #1
 80016ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(SW5_INT_GPIO_Port, &GPIO_InitStruct);
 80016ee:	000c      	movs	r4, r1
 80016f0:	187b      	adds	r3, r7, r1
 80016f2:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <MX_GPIO_Init+0x1c4>)
 80016f4:	0019      	movs	r1, r3
 80016f6:	0010      	movs	r0, r2
 80016f8:	f001 f938 	bl	800296c <HAL_GPIO_Init>

  /*Configure GPIO pins : DP_Pin LED1_Pin LED2_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = DP_Pin|LED1_Pin|LED2_Pin|BUZZER_Pin;
 80016fc:	0021      	movs	r1, r4
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	22e2      	movs	r2, #226	; 0xe2
 8001702:	0212      	lsls	r2, r2, #8
 8001704:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	187b      	adds	r3, r7, r1
 8001708:	2201      	movs	r2, #1
 800170a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	187b      	adds	r3, r7, r1
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	187b      	adds	r3, r7, r1
 8001714:	2200      	movs	r2, #0
 8001716:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001718:	187b      	adds	r3, r7, r1
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <MX_GPIO_Init+0x1c4>)
 800171c:	0019      	movs	r1, r3
 800171e:	0010      	movs	r0, r2
 8001720:	f001 f924 	bl	800296c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2005      	movs	r0, #5
 800172a:	f001 f8dd 	bl	80028e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 800172e:	2005      	movs	r0, #5
 8001730:	f001 f8ef 	bl	8002912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8001734:	2200      	movs	r2, #0
 8001736:	2100      	movs	r1, #0
 8001738:	2006      	movs	r0, #6
 800173a:	f001 f8d5 	bl	80028e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 800173e:	2006      	movs	r0, #6
 8001740:	f001 f8e7 	bl	8002912 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001744:	2200      	movs	r2, #0
 8001746:	2100      	movs	r1, #0
 8001748:	2007      	movs	r0, #7
 800174a:	f001 f8cd 	bl	80028e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800174e:	2007      	movs	r0, #7
 8001750:	f001 f8df 	bl	8002912 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
//  HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(RTC_IRQn);
/* USER CODE END MX_GPIO_Init_2 */
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b00b      	add	sp, #44	; 0x2c
 800175a:	bd90      	pop	{r4, r7, pc}
 800175c:	40021000 	.word	0x40021000
 8001760:	0000807f 	.word	0x0000807f
 8001764:	48000400 	.word	0x48000400

08001768 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800176c:	b672      	cpsid	i
}
 800176e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	01db      	lsls	r3, r3, #7
 8001774:	4a06      	ldr	r2, [pc, #24]	; (8001790 <Error_Handler+0x28>)
 8001776:	0019      	movs	r1, r3
 8001778:	0010      	movs	r0, r2
 800177a:	f001 faa9 	bl	8002cd0 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800177e:	2380      	movs	r3, #128	; 0x80
 8001780:	021b      	lsls	r3, r3, #8
 8001782:	4a03      	ldr	r2, [pc, #12]	; (8001790 <Error_Handler+0x28>)
 8001784:	0019      	movs	r1, r3
 8001786:	0010      	movs	r0, r2
 8001788:	f001 faa2 	bl	8002cd0 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800178c:	e7f0      	b.n	8001770 <Error_Handler+0x8>
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	48000400 	.word	0x48000400

08001794 <main_task>:
#include "display.h"
#include "console.h"

/** */
void main_task(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	printf(CLS "LED clock built at %s on %s\n\n", __TIME__, __DATE__);
 8001798:	4a05      	ldr	r2, [pc, #20]	; (80017b0 <main_task+0x1c>)
 800179a:	4906      	ldr	r1, [pc, #24]	; (80017b4 <main_task+0x20>)
 800179c:	4b06      	ldr	r3, [pc, #24]	; (80017b8 <main_task+0x24>)
 800179e:	0018      	movs	r0, r3
 80017a0:	f00b fba4 	bl	800ceec <iprintf>

	display_start();
 80017a4:	f7ff faf6 	bl	8000d94 <display_start>

	while(true)
	{
		console_process_key();
 80017a8:	f7ff f8bc 	bl	8000924 <console_process_key>
 80017ac:	e7fc      	b.n	80017a8 <main_task+0x14>
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	0800ebe4 	.word	0x0800ebe4
 80017b4:	0800ebf0 	.word	0x0800ebf0
 80017b8:	0800ebfc 	.word	0x0800ebfc

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_MspInit+0x44>)
 80017c4:	699a      	ldr	r2, [r3, #24]
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <HAL_MspInit+0x44>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	619a      	str	r2, [r3, #24]
 80017ce:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <HAL_MspInit+0x44>)
 80017d0:	699b      	ldr	r3, [r3, #24]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	; (8001800 <HAL_MspInit+0x44>)
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	4b08      	ldr	r3, [pc, #32]	; (8001800 <HAL_MspInit+0x44>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0549      	lsls	r1, r1, #21
 80017e4:	430a      	orrs	r2, r1
 80017e6:	61da      	str	r2, [r3, #28]
 80017e8:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_MspInit+0x44>)
 80017ea:	69da      	ldr	r2, [r3, #28]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	055b      	lsls	r3, r3, #21
 80017f0:	4013      	ands	r3, r2
 80017f2:	603b      	str	r3, [r7, #0]
 80017f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0a      	ldr	r2, [pc, #40]	; (800183c <HAL_RTC_MspInit+0x38>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10e      	bne.n	8001834 <HAL_RTC_MspInit+0x30>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001816:	4b0a      	ldr	r3, [pc, #40]	; (8001840 <HAL_RTC_MspInit+0x3c>)
 8001818:	6a1a      	ldr	r2, [r3, #32]
 800181a:	4b09      	ldr	r3, [pc, #36]	; (8001840 <HAL_RTC_MspInit+0x3c>)
 800181c:	2180      	movs	r1, #128	; 0x80
 800181e:	0209      	lsls	r1, r1, #8
 8001820:	430a      	orrs	r2, r1
 8001822:	621a      	str	r2, [r3, #32]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8001824:	2200      	movs	r2, #0
 8001826:	2100      	movs	r1, #0
 8001828:	2002      	movs	r0, #2
 800182a:	f001 f85d 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800182e:	2002      	movs	r0, #2
 8001830:	f001 f86f 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001834:	46c0      	nop			; (mov r8, r8)
 8001836:	46bd      	mov	sp, r7
 8001838:	b002      	add	sp, #8
 800183a:	bd80      	pop	{r7, pc}
 800183c:	40002800 	.word	0x40002800
 8001840:	40021000 	.word	0x40021000

08001844 <HAL_RTC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspDeInit(RTC_HandleTypeDef* hrtc)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a07      	ldr	r2, [pc, #28]	; (8001870 <HAL_RTC_MspDeInit+0x2c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d108      	bne.n	8001868 <HAL_RTC_MspDeInit+0x24>
  {
  /* USER CODE BEGIN RTC_MspDeInit 0 */

  /* USER CODE END RTC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_RTC_DISABLE();
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_RTC_MspDeInit+0x30>)
 8001858:	6a1a      	ldr	r2, [r3, #32]
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RTC_MspDeInit+0x30>)
 800185c:	4906      	ldr	r1, [pc, #24]	; (8001878 <HAL_RTC_MspDeInit+0x34>)
 800185e:	400a      	ands	r2, r1
 8001860:	621a      	str	r2, [r3, #32]

    /* RTC interrupt DeInit */
    HAL_NVIC_DisableIRQ(RTC_IRQn);
 8001862:	2002      	movs	r0, #2
 8001864:	f001 f865 	bl	8002932 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN RTC_MspDeInit 1 */

  /* USER CODE END RTC_MspDeInit 1 */
  }

}
 8001868:	46c0      	nop			; (mov r8, r8)
 800186a:	46bd      	mov	sp, r7
 800186c:	b002      	add	sp, #8
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40002800 	.word	0x40002800
 8001874:	40021000 	.word	0x40021000
 8001878:	ffff7fff 	.word	0xffff7fff

0800187c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	; 0x80
 800188a:	05db      	lsls	r3, r3, #23
 800188c:	429a      	cmp	r2, r3
 800188e:	d114      	bne.n	80018ba <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001890:	4b4a      	ldr	r3, [pc, #296]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001892:	69da      	ldr	r2, [r3, #28]
 8001894:	4b49      	ldr	r3, [pc, #292]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001896:	2101      	movs	r1, #1
 8001898:	430a      	orrs	r2, r1
 800189a:	61da      	str	r2, [r3, #28]
 800189c:	4b47      	ldr	r3, [pc, #284]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2201      	movs	r2, #1
 80018a2:	4013      	ands	r3, r2
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	69fb      	ldr	r3, [r7, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80018a8:	2200      	movs	r2, #0
 80018aa:	2100      	movs	r1, #0
 80018ac:	200f      	movs	r0, #15
 80018ae:	f001 f81b 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80018b2:	200f      	movs	r0, #15
 80018b4:	f001 f82d 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80018b8:	e07c      	b.n	80019b4 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM3)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a40      	ldr	r2, [pc, #256]	; (80019c0 <HAL_TIM_Base_MspInit+0x144>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d114      	bne.n	80018ee <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c4:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 80018c6:	69da      	ldr	r2, [r3, #28]
 80018c8:	4b3c      	ldr	r3, [pc, #240]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 80018ca:	2102      	movs	r1, #2
 80018cc:	430a      	orrs	r2, r1
 80018ce:	61da      	str	r2, [r3, #28]
 80018d0:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 80018d2:	69db      	ldr	r3, [r3, #28]
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
 80018da:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018dc:	2200      	movs	r2, #0
 80018de:	2100      	movs	r1, #0
 80018e0:	2010      	movs	r0, #16
 80018e2:	f001 f801 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018e6:	2010      	movs	r0, #16
 80018e8:	f001 f813 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 80018ec:	e062      	b.n	80019b4 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM6)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a34      	ldr	r2, [pc, #208]	; (80019c4 <HAL_TIM_Base_MspInit+0x148>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d114      	bne.n	8001922 <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 80018fe:	2110      	movs	r1, #16
 8001900:	430a      	orrs	r2, r1
 8001902:	61da      	str	r2, [r3, #28]
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001906:	69db      	ldr	r3, [r3, #28]
 8001908:	2210      	movs	r2, #16
 800190a:	4013      	ands	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001910:	2200      	movs	r2, #0
 8001912:	2100      	movs	r1, #0
 8001914:	2011      	movs	r0, #17
 8001916:	f000 ffe7 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800191a:	2011      	movs	r0, #17
 800191c:	f000 fff9 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 8001920:	e048      	b.n	80019b4 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM7)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a28      	ldr	r2, [pc, #160]	; (80019c8 <HAL_TIM_Base_MspInit+0x14c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d114      	bne.n	8001956 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800192c:	4b23      	ldr	r3, [pc, #140]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001932:	2120      	movs	r1, #32
 8001934:	430a      	orrs	r2, r1
 8001936:	61da      	str	r2, [r3, #28]
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	2220      	movs	r2, #32
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001944:	2200      	movs	r2, #0
 8001946:	2100      	movs	r1, #0
 8001948:	2012      	movs	r0, #18
 800194a:	f000 ffcd 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800194e:	2012      	movs	r0, #18
 8001950:	f000 ffdf 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 8001954:	e02e      	b.n	80019b4 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM15)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a1c      	ldr	r2, [pc, #112]	; (80019cc <HAL_TIM_Base_MspInit+0x150>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d10e      	bne.n	800197e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001962:	699a      	ldr	r2, [r3, #24]
 8001964:	4b15      	ldr	r3, [pc, #84]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	0249      	lsls	r1, r1, #9
 800196a:	430a      	orrs	r2, r1
 800196c:	619a      	str	r2, [r3, #24]
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001970:	699a      	ldr	r2, [r3, #24]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	4013      	ands	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fb      	ldr	r3, [r7, #12]
}
 800197c:	e01a      	b.n	80019b4 <HAL_TIM_Base_MspInit+0x138>
  else if(htim_base->Instance==TIM17)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_TIM_Base_MspInit+0x154>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d115      	bne.n	80019b4 <HAL_TIM_Base_MspInit+0x138>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001988:	4b0c      	ldr	r3, [pc, #48]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 800198a:	699a      	ldr	r2, [r3, #24]
 800198c:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	02c9      	lsls	r1, r1, #11
 8001992:	430a      	orrs	r2, r1
 8001994:	619a      	str	r2, [r3, #24]
 8001996:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_TIM_Base_MspInit+0x140>)
 8001998:	699a      	ldr	r2, [r3, #24]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	02db      	lsls	r3, r3, #11
 800199e:	4013      	ands	r3, r2
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2016      	movs	r0, #22
 80019aa:	f000 ff9d 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80019ae:	2016      	movs	r0, #22
 80019b0:	f000 ffaf 	bl	8002912 <HAL_NVIC_EnableIRQ>
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	b008      	add	sp, #32
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40021000 	.word	0x40021000
 80019c0:	40000400 	.word	0x40000400
 80019c4:	40001000 	.word	0x40001000
 80019c8:	40001400 	.word	0x40001400
 80019cc:	40014000 	.word	0x40014000
 80019d0:	40014800 	.word	0x40014800

080019d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d4:	b590      	push	{r4, r7, lr}
 80019d6:	b08b      	sub	sp, #44	; 0x2c
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019dc:	2414      	movs	r4, #20
 80019de:	193b      	adds	r3, r7, r4
 80019e0:	0018      	movs	r0, r3
 80019e2:	2314      	movs	r3, #20
 80019e4:	001a      	movs	r2, r3
 80019e6:	2100      	movs	r1, #0
 80019e8:	f00a ff94 	bl	800c914 <memset>
  if(huart->Instance==USART3)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_UART_MspInit+0x90>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d132      	bne.n	8001a5c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019f6:	4b1c      	ldr	r3, [pc, #112]	; (8001a68 <HAL_UART_MspInit+0x94>)
 80019f8:	69da      	ldr	r2, [r3, #28]
 80019fa:	4b1b      	ldr	r3, [pc, #108]	; (8001a68 <HAL_UART_MspInit+0x94>)
 80019fc:	2180      	movs	r1, #128	; 0x80
 80019fe:	02c9      	lsls	r1, r1, #11
 8001a00:	430a      	orrs	r2, r1
 8001a02:	61da      	str	r2, [r3, #28]
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_UART_MspInit+0x94>)
 8001a06:	69da      	ldr	r2, [r3, #28]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	02db      	lsls	r3, r3, #11
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a12:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_UART_MspInit+0x94>)
 8001a14:	695a      	ldr	r2, [r3, #20]
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_UART_MspInit+0x94>)
 8001a18:	2180      	movs	r1, #128	; 0x80
 8001a1a:	02c9      	lsls	r1, r1, #11
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	615a      	str	r2, [r3, #20]
 8001a20:	4b11      	ldr	r3, [pc, #68]	; (8001a68 <HAL_UART_MspInit+0x94>)
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	2380      	movs	r3, #128	; 0x80
 8001a26:	02db      	lsls	r3, r3, #11
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DBG_TX_Pin|DBG_RX_Pin;
 8001a2e:	193b      	adds	r3, r7, r4
 8001a30:	22c0      	movs	r2, #192	; 0xc0
 8001a32:	0112      	lsls	r2, r2, #4
 8001a34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	0021      	movs	r1, r4
 8001a38:	187b      	adds	r3, r7, r1
 8001a3a:	2202      	movs	r2, #2
 8001a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	187b      	adds	r3, r7, r1
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a44:	187b      	adds	r3, r7, r1
 8001a46:	2203      	movs	r2, #3
 8001a48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART3;
 8001a4a:	187b      	adds	r3, r7, r1
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a50:	187b      	adds	r3, r7, r1
 8001a52:	4a06      	ldr	r2, [pc, #24]	; (8001a6c <HAL_UART_MspInit+0x98>)
 8001a54:	0019      	movs	r1, r3
 8001a56:	0010      	movs	r0, r2
 8001a58:	f000 ff88 	bl	800296c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a5c:	46c0      	nop			; (mov r8, r8)
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b00b      	add	sp, #44	; 0x2c
 8001a62:	bd90      	pop	{r4, r7, pc}
 8001a64:	40004800 	.word	0x40004800
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	48000400 	.word	0x48000400

08001a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <NMI_Handler+0x4>

08001a76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a7a:	e7fe      	b.n	8001a7a <HardFault_Handler+0x4>

08001a7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001a80:	46c0      	nop			; (mov r8, r8)
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a94:	f000 fe1a 	bl	80026cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a98:	46c0      	nop			; (mov r8, r8)
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20.
  */
void RTC_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <RTC_IRQHandler+0x14>)
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	f004 fb7c 	bl	80061a4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001aac:	46c0      	nop			; (mov r8, r8)
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	46c0      	nop			; (mov r8, r8)
 8001ab4:	200003d4 	.word	0x200003d4

08001ab8 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW1_INT_Pin);
 8001abc:	2001      	movs	r0, #1
 8001abe:	f001 f923 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW2_INT_Pin);
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f001 f920 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001ac8:	46c0      	nop			; (mov r8, r8)
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}

08001ace <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001ace:	b580      	push	{r7, lr}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW3_INT_Pin);
 8001ad2:	2004      	movs	r0, #4
 8001ad4:	f001 f918 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW4_INT_Pin);
 8001ad8:	2008      	movs	r0, #8
 8001ada:	f001 f915 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001ade:	46c0      	nop			; (mov r8, r8)
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW5_INT_Pin);
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	015b      	lsls	r3, r3, #5
 8001aec:	0018      	movs	r0, r3
 8001aee:	f001 f90b 	bl	8002d08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001afc:	4b03      	ldr	r3, [pc, #12]	; (8001b0c <TIM2_IRQHandler+0x14>)
 8001afe:	0018      	movs	r0, r3
 8001b00:	f004 fec0 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b04:	46c0      	nop			; (mov r8, r8)
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	46c0      	nop			; (mov r8, r8)
 8001b0c:	20000414 	.word	0x20000414

08001b10 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <TIM3_IRQHandler+0x14>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f004 feb4 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	200004c8 	.word	0x200004c8

08001b28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b2c:	4b03      	ldr	r3, [pc, #12]	; (8001b3c <TIM6_DAC_IRQHandler+0x14>)
 8001b2e:	0018      	movs	r0, r3
 8001b30:	f004 fea8 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b34:	46c0      	nop			; (mov r8, r8)
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	46c0      	nop			; (mov r8, r8)
 8001b3c:	2000057c 	.word	0x2000057c

08001b40 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001b44:	4b03      	ldr	r3, [pc, #12]	; (8001b54 <TIM7_IRQHandler+0x14>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f004 fe9c 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001b4c:	46c0      	nop			; (mov r8, r8)
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	46c0      	nop			; (mov r8, r8)
 8001b54:	20000630 	.word	0x20000630

08001b58 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b5c:	4b03      	ldr	r3, [pc, #12]	; (8001b6c <TIM17_IRQHandler+0x14>)
 8001b5e:	0018      	movs	r0, r3
 8001b60:	f004 fe90 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	20000798 	.word	0x20000798

08001b70 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <USB_IRQHandler+0x14>)
 8001b76:	0018      	movs	r0, r3
 8001b78:	f001 fa08 	bl	8002f8c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001b7c:	46c0      	nop			; (mov r8, r8)
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	20000f38 	.word	0x20000f38

08001b88 <repeat_callback>:

static bool alarm_enable_toggle = false;

/** if SW1 or SW2 still down after 500ms, repeat inc/dec action */
static void repeat_callback(TIM_HandleTypeDef *timer)
{
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
	bool switch5_state = HAL_GPIO_ReadPin(SW5_INT_GPIO_Port, SW5_INT_Pin);
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	015b      	lsls	r3, r3, #5
 8001b94:	4a4b      	ldr	r2, [pc, #300]	; (8001cc4 <repeat_callback+0x13c>)
 8001b96:	0019      	movs	r1, r3
 8001b98:	0010      	movs	r0, r2
 8001b9a:	f001 f85f 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001b9e:	0003      	movs	r3, r0
 8001ba0:	001a      	movs	r2, r3
 8001ba2:	240f      	movs	r4, #15
 8001ba4:	193b      	adds	r3, r7, r4
 8001ba6:	1e51      	subs	r1, r2, #1
 8001ba8:	418a      	sbcs	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(SW1_INT_GPIO_Port, SW1_INT_Pin) == 0)
 8001bac:	4b45      	ldr	r3, [pc, #276]	; (8001cc4 <repeat_callback+0x13c>)
 8001bae:	2101      	movs	r1, #1
 8001bb0:	0018      	movs	r0, r3
 8001bb2:	f001 f853 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001bb6:	1e03      	subs	r3, r0, #0
 8001bb8:	d11d      	bne.n	8001bf6 <repeat_callback+0x6e>
	{
		if(switch5_state) // alternate function (alarm, if alarm button is held down)
 8001bba:	193b      	adds	r3, r7, r4
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d006      	beq.n	8001bd0 <repeat_callback+0x48>
		{
			increment_time();
 8001bc2:	f000 fb27 	bl	8002214 <increment_time>
			printf("increment time repeat\n");
 8001bc6:	4b40      	ldr	r3, [pc, #256]	; (8001cc8 <repeat_callback+0x140>)
 8001bc8:	0018      	movs	r0, r3
 8001bca:	f00b fa2f 	bl	800d02c <puts>
 8001bce:	e005      	b.n	8001bdc <repeat_callback+0x54>
		}
		else
		{
			increment_alarm();
 8001bd0:	f000 fc7a 	bl	80024c8 <increment_alarm>
			printf("increment alarm repeat\n");
 8001bd4:	4b3d      	ldr	r3, [pc, #244]	; (8001ccc <repeat_callback+0x144>)
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	f00b fa28 	bl	800d02c <puts>
		}

		display_update();
 8001bdc:	f7ff f908 	bl	8000df0 <display_update>

		// restart the repeat timer
		HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID, repeat_callback);
 8001be0:	4a3b      	ldr	r2, [pc, #236]	; (8001cd0 <repeat_callback+0x148>)
 8001be2:	4b3c      	ldr	r3, [pc, #240]	; (8001cd4 <repeat_callback+0x14c>)
 8001be4:	210e      	movs	r1, #14
 8001be6:	0018      	movs	r0, r3
 8001be8:	f005 f96c 	bl	8006ec4 <HAL_TIM_RegisterCallback>
		HAL_TIM_Base_Start_IT(&htim6);
 8001bec:	4b39      	ldr	r3, [pc, #228]	; (8001cd4 <repeat_callback+0x14c>)
 8001bee:	0018      	movs	r0, r3
 8001bf0:	f004 fc90 	bl	8006514 <HAL_TIM_Base_Start_IT>
		// no button held down, cancel the repeat
		printf("no repeat\n");
		display_alarm_time(false);
		HAL_TIM_Base_Stop(&htim6);
	}
}
 8001bf4:	e061      	b.n	8001cba <repeat_callback+0x132>
	else if(HAL_GPIO_ReadPin(SW2_INT_GPIO_Port, SW2_INT_Pin) == 0)
 8001bf6:	4b33      	ldr	r3, [pc, #204]	; (8001cc4 <repeat_callback+0x13c>)
 8001bf8:	2102      	movs	r1, #2
 8001bfa:	0018      	movs	r0, r3
 8001bfc:	f001 f82e 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001c00:	1e03      	subs	r3, r0, #0
 8001c02:	d122      	bne.n	8001c4a <repeat_callback+0xc2>
		if(switch5_state) // alternate function (alarm, if alarm button is held down)
 8001c04:	230f      	movs	r3, #15
 8001c06:	18fb      	adds	r3, r7, r3
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d006      	beq.n	8001c1c <repeat_callback+0x94>
			decrement_time();
 8001c0e:	f000 fb57 	bl	80022c0 <decrement_time>
			printf("decrement time repeat\n");
 8001c12:	4b31      	ldr	r3, [pc, #196]	; (8001cd8 <repeat_callback+0x150>)
 8001c14:	0018      	movs	r0, r3
 8001c16:	f00b fa09 	bl	800d02c <puts>
 8001c1a:	e005      	b.n	8001c28 <repeat_callback+0xa0>
			decrement_alarm();
 8001c1c:	f000 fc9c 	bl	8002558 <decrement_alarm>
			printf("decrement alarm repeat\n");
 8001c20:	4b2e      	ldr	r3, [pc, #184]	; (8001cdc <repeat_callback+0x154>)
 8001c22:	0018      	movs	r0, r3
 8001c24:	f00b fa02 	bl	800d02c <puts>
		display_update();
 8001c28:	f7ff f8e2 	bl	8000df0 <display_update>
		printf("decrement time repeat\n");
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <repeat_callback+0x150>)
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f00b f9fc 	bl	800d02c <puts>
		HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID, repeat_callback);
 8001c34:	4a26      	ldr	r2, [pc, #152]	; (8001cd0 <repeat_callback+0x148>)
 8001c36:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <repeat_callback+0x14c>)
 8001c38:	210e      	movs	r1, #14
 8001c3a:	0018      	movs	r0, r3
 8001c3c:	f005 f942 	bl	8006ec4 <HAL_TIM_RegisterCallback>
		HAL_TIM_Base_Start_IT(&htim6);
 8001c40:	4b24      	ldr	r3, [pc, #144]	; (8001cd4 <repeat_callback+0x14c>)
 8001c42:	0018      	movs	r0, r3
 8001c44:	f004 fc66 	bl	8006514 <HAL_TIM_Base_Start_IT>
}
 8001c48:	e037      	b.n	8001cba <repeat_callback+0x132>
	else if(HAL_GPIO_ReadPin(SW5_INT_GPIO_Port, SW5_INT_Pin) == 0)
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	015b      	lsls	r3, r3, #5
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <repeat_callback+0x13c>)
 8001c50:	0019      	movs	r1, r3
 8001c52:	0010      	movs	r0, r2
 8001c54:	f001 f802 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001c58:	1e03      	subs	r3, r0, #0
 8001c5a:	d123      	bne.n	8001ca4 <repeat_callback+0x11c>
		if(alarm_enable_toggle)
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <repeat_callback+0x158>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <repeat_callback+0xf8>
			printf("cancel alarm\n");
 8001c64:	4b1f      	ldr	r3, [pc, #124]	; (8001ce4 <repeat_callback+0x15c>)
 8001c66:	0018      	movs	r0, r3
 8001c68:	f00b f9e0 	bl	800d02c <puts>
			enable_alarm(false);
 8001c6c:	2000      	movs	r0, #0
 8001c6e:	f000 fbf5 	bl	800245c <enable_alarm>
			display_alarm_enabled(false);
 8001c72:	2000      	movs	r0, #0
 8001c74:	f7ff f948 	bl	8000f08 <display_alarm_enabled>
			alarm_enable_toggle = false;
 8001c78:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <repeat_callback+0x158>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	701a      	strb	r2, [r3, #0]
 8001c7e:	e00c      	b.n	8001c9a <repeat_callback+0x112>
			printf("enable alarm\n");
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <repeat_callback+0x160>)
 8001c82:	0018      	movs	r0, r3
 8001c84:	f00b f9d2 	bl	800d02c <puts>
			enable_alarm(true);
 8001c88:	2001      	movs	r0, #1
 8001c8a:	f000 fbe7 	bl	800245c <enable_alarm>
			display_alarm_enabled(true);
 8001c8e:	2001      	movs	r0, #1
 8001c90:	f7ff f93a 	bl	8000f08 <display_alarm_enabled>
			alarm_enable_toggle = true;
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <repeat_callback+0x158>)
 8001c96:	2201      	movs	r2, #1
 8001c98:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Stop(&htim6);
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <repeat_callback+0x14c>)
 8001c9c:	0018      	movs	r0, r3
 8001c9e:	f004 fc13 	bl	80064c8 <HAL_TIM_Base_Stop>
}
 8001ca2:	e00a      	b.n	8001cba <repeat_callback+0x132>
		printf("no repeat\n");
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <repeat_callback+0x164>)
 8001ca6:	0018      	movs	r0, r3
 8001ca8:	f00b f9c0 	bl	800d02c <puts>
		display_alarm_time(false);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff f93b 	bl	8000f28 <display_alarm_time>
		HAL_TIM_Base_Stop(&htim6);
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <repeat_callback+0x14c>)
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f004 fc07 	bl	80064c8 <HAL_TIM_Base_Stop>
}
 8001cba:	46c0      	nop			; (mov r8, r8)
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b005      	add	sp, #20
 8001cc0:	bd90      	pop	{r4, r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	48000400 	.word	0x48000400
 8001cc8:	0800ec20 	.word	0x0800ec20
 8001ccc:	0800ec38 	.word	0x0800ec38
 8001cd0:	08001b89 	.word	0x08001b89
 8001cd4:	2000057c 	.word	0x2000057c
 8001cd8:	0800ec50 	.word	0x0800ec50
 8001cdc:	0800ec68 	.word	0x0800ec68
 8001ce0:	200008dc 	.word	0x200008dc
 8001ce4:	0800ec80 	.word	0x0800ec80
 8001ce8:	0800ec90 	.word	0x0800ec90
 8001cec:	0800eca0 	.word	0x0800eca0

08001cf0 <switch_callback>:

/** debounce switches: if state is still same as initial afer 20ms, confim action */
static void switch_callback(TIM_HandleTypeDef *timer)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Stop(&htim7);
 8001cf8:	4b7e      	ldr	r3, [pc, #504]	; (8001ef4 <switch_callback+0x204>)
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	f004 fbe4 	bl	80064c8 <HAL_TIM_Base_Stop>
	bool switch1_state = HAL_GPIO_ReadPin(SW1_INT_GPIO_Port, SW1_INT_Pin);
 8001d00:	4b7d      	ldr	r3, [pc, #500]	; (8001ef8 <switch_callback+0x208>)
 8001d02:	2101      	movs	r1, #1
 8001d04:	0018      	movs	r0, r3
 8001d06:	f000 ffa9 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001d0a:	0003      	movs	r3, r0
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	230f      	movs	r3, #15
 8001d10:	18fb      	adds	r3, r7, r3
 8001d12:	1e51      	subs	r1, r2, #1
 8001d14:	418a      	sbcs	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
	bool switch2_state = HAL_GPIO_ReadPin(SW2_INT_GPIO_Port, SW2_INT_Pin);
 8001d18:	4b77      	ldr	r3, [pc, #476]	; (8001ef8 <switch_callback+0x208>)
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f000 ff9d 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001d22:	0003      	movs	r3, r0
 8001d24:	001a      	movs	r2, r3
 8001d26:	230e      	movs	r3, #14
 8001d28:	18fb      	adds	r3, r7, r3
 8001d2a:	1e51      	subs	r1, r2, #1
 8001d2c:	418a      	sbcs	r2, r1
 8001d2e:	701a      	strb	r2, [r3, #0]
	bool switch3_state = HAL_GPIO_ReadPin(SW3_INT_GPIO_Port, SW3_INT_Pin);
 8001d30:	4b71      	ldr	r3, [pc, #452]	; (8001ef8 <switch_callback+0x208>)
 8001d32:	2104      	movs	r1, #4
 8001d34:	0018      	movs	r0, r3
 8001d36:	f000 ff91 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	001a      	movs	r2, r3
 8001d3e:	230d      	movs	r3, #13
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	1e51      	subs	r1, r2, #1
 8001d44:	418a      	sbcs	r2, r1
 8001d46:	701a      	strb	r2, [r3, #0]
	bool switch4_state = HAL_GPIO_ReadPin(SW4_INT_GPIO_Port, SW4_INT_Pin);
 8001d48:	4b6b      	ldr	r3, [pc, #428]	; (8001ef8 <switch_callback+0x208>)
 8001d4a:	2108      	movs	r1, #8
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 ff85 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001d52:	0003      	movs	r3, r0
 8001d54:	001a      	movs	r2, r3
 8001d56:	230c      	movs	r3, #12
 8001d58:	18fb      	adds	r3, r7, r3
 8001d5a:	1e51      	subs	r1, r2, #1
 8001d5c:	418a      	sbcs	r2, r1
 8001d5e:	701a      	strb	r2, [r3, #0]
	bool switch5_state = HAL_GPIO_ReadPin(SW5_INT_GPIO_Port, SW5_INT_Pin);
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	015b      	lsls	r3, r3, #5
 8001d64:	4a64      	ldr	r2, [pc, #400]	; (8001ef8 <switch_callback+0x208>)
 8001d66:	0019      	movs	r1, r3
 8001d68:	0010      	movs	r0, r2
 8001d6a:	f000 ff77 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001d6e:	0003      	movs	r3, r0
 8001d70:	001a      	movs	r2, r3
 8001d72:	230b      	movs	r3, #11
 8001d74:	18fb      	adds	r3, r7, r3
 8001d76:	1e51      	subs	r1, r2, #1
 8001d78:	418a      	sbcs	r2, r1
 8001d7a:	701a      	strb	r2, [r3, #0]

	switch(active_GPIO_Pin)
 8001d7c:	4b5f      	ldr	r3, [pc, #380]	; (8001efc <switch_callback+0x20c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	0152      	lsls	r2, r2, #5
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d100      	bne.n	8001d8a <switch_callback+0x9a>
 8001d88:	e083      	b.n	8001e92 <switch_callback+0x1a2>
 8001d8a:	2280      	movs	r2, #128	; 0x80
 8001d8c:	0152      	lsls	r2, r2, #5
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d900      	bls.n	8001d94 <switch_callback+0xa4>
 8001d92:	e0a5      	b.n	8001ee0 <switch_callback+0x1f0>
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d100      	bne.n	8001d9a <switch_callback+0xaa>
 8001d98:	e066      	b.n	8001e68 <switch_callback+0x178>
 8001d9a:	d900      	bls.n	8001d9e <switch_callback+0xae>
 8001d9c:	e0a0      	b.n	8001ee0 <switch_callback+0x1f0>
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d04d      	beq.n	8001e3e <switch_callback+0x14e>
 8001da2:	d900      	bls.n	8001da6 <switch_callback+0xb6>
 8001da4:	e09c      	b.n	8001ee0 <switch_callback+0x1f0>
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d002      	beq.n	8001db0 <switch_callback+0xc0>
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d024      	beq.n	8001df8 <switch_callback+0x108>
 8001dae:	e097      	b.n	8001ee0 <switch_callback+0x1f0>
	{
		case SW1_INT_Pin:
		if(switch1_state == last_switch1_state)
 8001db0:	4b53      	ldr	r3, [pc, #332]	; (8001f00 <switch_callback+0x210>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	210f      	movs	r1, #15
 8001db6:	187a      	adds	r2, r7, r1
 8001db8:	7812      	ldrb	r2, [r2, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d11c      	bne.n	8001df8 <switch_callback+0x108>
		{
			if(!switch1_state)
 8001dbe:	187b      	adds	r3, r7, r1
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4053      	eors	r3, r2
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d100      	bne.n	8001dce <switch_callback+0xde>
 8001dcc:	e081      	b.n	8001ed2 <switch_callback+0x1e2>
			{
				if(switch5_state) // alternate function (increment alarm, if alarm button is held down)
 8001dce:	230b      	movs	r3, #11
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <switch_callback+0xf6>
				{
					increment_time();
 8001dd8:	f000 fa1c 	bl	8002214 <increment_time>
					printf("increment time\n");
 8001ddc:	4b49      	ldr	r3, [pc, #292]	; (8001f04 <switch_callback+0x214>)
 8001dde:	0018      	movs	r0, r3
 8001de0:	f00b f924 	bl	800d02c <puts>
 8001de4:	e005      	b.n	8001df2 <switch_callback+0x102>
				}
				else
				{
					increment_alarm();
 8001de6:	f000 fb6f 	bl	80024c8 <increment_alarm>
					printf("increment alarm\n");
 8001dea:	4b47      	ldr	r3, [pc, #284]	; (8001f08 <switch_callback+0x218>)
 8001dec:	0018      	movs	r0, r3
 8001dee:	f00b f91d 	bl	800d02c <puts>
				}

				display_update();
 8001df2:	f7fe fffd 	bl	8000df0 <display_update>
			}

			break;
 8001df6:	e06c      	b.n	8001ed2 <switch_callback+0x1e2>
		}

		case SW2_INT_Pin:
		if(switch2_state == last_switch2_state)
 8001df8:	4b44      	ldr	r3, [pc, #272]	; (8001f0c <switch_callback+0x21c>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	210e      	movs	r1, #14
 8001dfe:	187a      	adds	r2, r7, r1
 8001e00:	7812      	ldrb	r2, [r2, #0]
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d11b      	bne.n	8001e3e <switch_callback+0x14e>
		{
			if(!switch2_state)
 8001e06:	187b      	adds	r3, r7, r1
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	4053      	eors	r3, r2
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d060      	beq.n	8001ed6 <switch_callback+0x1e6>
			{
				if(switch5_state) // alternate function (decrement alarm, if alarm button is held down)
 8001e14:	230b      	movs	r3, #11
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d006      	beq.n	8001e2c <switch_callback+0x13c>
				{
					decrement_time();
 8001e1e:	f000 fa4f 	bl	80022c0 <decrement_time>
					printf("decrement time\n");
 8001e22:	4b3b      	ldr	r3, [pc, #236]	; (8001f10 <switch_callback+0x220>)
 8001e24:	0018      	movs	r0, r3
 8001e26:	f00b f901 	bl	800d02c <puts>
 8001e2a:	e005      	b.n	8001e38 <switch_callback+0x148>
				}
				else
				{
					decrement_alarm();
 8001e2c:	f000 fb94 	bl	8002558 <decrement_alarm>
					printf("decrement alarm\n");
 8001e30:	4b38      	ldr	r3, [pc, #224]	; (8001f14 <switch_callback+0x224>)
 8001e32:	0018      	movs	r0, r3
 8001e34:	f00b f8fa 	bl	800d02c <puts>
				}

				display_update();
 8001e38:	f7fe ffda 	bl	8000df0 <display_update>
			}

			break;
 8001e3c:	e04b      	b.n	8001ed6 <switch_callback+0x1e6>
		}

		case SW3_INT_Pin:
		if(switch3_state == last_switch3_state)
 8001e3e:	4b36      	ldr	r3, [pc, #216]	; (8001f18 <switch_callback+0x228>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	210d      	movs	r1, #13
 8001e44:	187a      	adds	r2, r7, r1
 8001e46:	7812      	ldrb	r2, [r2, #0]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d10d      	bne.n	8001e68 <switch_callback+0x178>
		{
			if(!switch3_state)
 8001e4c:	187b      	adds	r3, r7, r1
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2201      	movs	r2, #1
 8001e52:	4053      	eors	r3, r2
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d03f      	beq.n	8001eda <switch_callback+0x1ea>
			{
				display_increase_brightness();
 8001e5a:	f7ff f823 	bl	8000ea4 <display_increase_brightness>
				printf("display increase brightness\n");
 8001e5e:	4b2f      	ldr	r3, [pc, #188]	; (8001f1c <switch_callback+0x22c>)
 8001e60:	0018      	movs	r0, r3
 8001e62:	f00b f8e3 	bl	800d02c <puts>
			}

			break;
 8001e66:	e038      	b.n	8001eda <switch_callback+0x1ea>
		}

		case SW4_INT_Pin:
		if(switch4_state == last_switch4_state)
 8001e68:	4b2d      	ldr	r3, [pc, #180]	; (8001f20 <switch_callback+0x230>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	210c      	movs	r1, #12
 8001e6e:	187a      	adds	r2, r7, r1
 8001e70:	7812      	ldrb	r2, [r2, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d10d      	bne.n	8001e92 <switch_callback+0x1a2>
		{
			if(!switch4_state)
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4053      	eors	r3, r2
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d02c      	beq.n	8001ede <switch_callback+0x1ee>
			{
				display_decrease_brightness();
 8001e84:	f7ff f828 	bl	8000ed8 <display_decrease_brightness>
				printf("display decrease brightness\n");
 8001e88:	4b26      	ldr	r3, [pc, #152]	; (8001f24 <switch_callback+0x234>)
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f00b f8ce 	bl	800d02c <puts>
			}

			break;
 8001e90:	e025      	b.n	8001ede <switch_callback+0x1ee>
		}

		case SW5_INT_Pin:
		if(switch5_state == last_switch5_state)
 8001e92:	4b25      	ldr	r3, [pc, #148]	; (8001f28 <switch_callback+0x238>)
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	210b      	movs	r1, #11
 8001e98:	187a      	adds	r2, r7, r1
 8001e9a:	7812      	ldrb	r2, [r2, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d11f      	bne.n	8001ee0 <switch_callback+0x1f0>
		{
			if(!switch5_state) // alarm button has action of falling and rising edges
 8001ea0:	187b      	adds	r3, r7, r1
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	4053      	eors	r3, r2
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d007      	beq.n	8001ebe <switch_callback+0x1ce>
			{
				display_alarm_time(true);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff f83a 	bl	8000f28 <display_alarm_time>
				printf("display show alarm\n");
 8001eb4:	4b1d      	ldr	r3, [pc, #116]	; (8001f2c <switch_callback+0x23c>)
 8001eb6:	0018      	movs	r0, r3
 8001eb8:	f00b f8b8 	bl	800d02c <puts>
 8001ebc:	e006      	b.n	8001ecc <switch_callback+0x1dc>
			}
			else
			{
				display_alarm_time(false);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff f832 	bl	8000f28 <display_alarm_time>
				printf("display show time\n");
 8001ec4:	4b1a      	ldr	r3, [pc, #104]	; (8001f30 <switch_callback+0x240>)
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f00b f8b0 	bl	800d02c <puts>
			}
			buzzer_stop();
 8001ecc:	f7fe fa36 	bl	800033c <buzzer_stop>

			break;
 8001ed0:	e006      	b.n	8001ee0 <switch_callback+0x1f0>
			break;
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	e004      	b.n	8001ee0 <switch_callback+0x1f0>
			break;
 8001ed6:	46c0      	nop			; (mov r8, r8)
 8001ed8:	e002      	b.n	8001ee0 <switch_callback+0x1f0>
			break;
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	e000      	b.n	8001ee0 <switch_callback+0x1f0>
			break;
 8001ede:	46c0      	nop			; (mov r8, r8)
		}
	}

	active_GPIO_Pin = 0;
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <switch_callback+0x20c>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
	timer_running = false;
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <switch_callback+0x244>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	701a      	strb	r2, [r3, #0]
}
 8001eec:	46c0      	nop			; (mov r8, r8)
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	b004      	add	sp, #16
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000630 	.word	0x20000630
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	200008d8 	.word	0x200008d8
 8001f00:	20000050 	.word	0x20000050
 8001f04:	0800ecac 	.word	0x0800ecac
 8001f08:	0800ecbc 	.word	0x0800ecbc
 8001f0c:	20000051 	.word	0x20000051
 8001f10:	0800eccc 	.word	0x0800eccc
 8001f14:	0800ecdc 	.word	0x0800ecdc
 8001f18:	20000052 	.word	0x20000052
 8001f1c:	0800ecec 	.word	0x0800ecec
 8001f20:	20000053 	.word	0x20000053
 8001f24:	0800ed08 	.word	0x0800ed08
 8001f28:	20000054 	.word	0x20000054
 8001f2c:	0800ed24 	.word	0x0800ed24
 8001f30:	0800ed38 	.word	0x0800ed38
 8001f34:	200008d4 	.word	0x200008d4

08001f38 <HAL_GPIO_EXTI_Callback>:

/** interrupt callback called when one of the switches is pushed (pin goes low - and also high for switch 5) */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b082      	sub	sp, #8
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	0002      	movs	r2, r0
 8001f40:	1dbb      	adds	r3, r7, #6
 8001f42:	801a      	strh	r2, [r3, #0]
	if(!timer_running)
 8001f44:	4b45      	ldr	r3, [pc, #276]	; (800205c <HAL_GPIO_EXTI_Callback+0x124>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	4053      	eors	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d100      	bne.n	8001f54 <HAL_GPIO_EXTI_Callback+0x1c>
 8001f52:	e07e      	b.n	8002052 <HAL_GPIO_EXTI_Callback+0x11a>
	{
		switch(GPIO_Pin)
 8001f54:	1dbb      	adds	r3, r7, #6
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	0152      	lsls	r2, r2, #5
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d04a      	beq.n	8001ff6 <HAL_GPIO_EXTI_Callback+0xbe>
 8001f60:	2280      	movs	r2, #128	; 0x80
 8001f62:	0152      	lsls	r2, r2, #5
 8001f64:	4293      	cmp	r3, r2
 8001f66:	dc58      	bgt.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
 8001f68:	2b08      	cmp	r3, #8
 8001f6a:	d035      	beq.n	8001fd8 <HAL_GPIO_EXTI_Callback+0xa0>
 8001f6c:	dc55      	bgt.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	d023      	beq.n	8001fba <HAL_GPIO_EXTI_Callback+0x82>
 8001f72:	dc52      	bgt.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d002      	beq.n	8001f7e <HAL_GPIO_EXTI_Callback+0x46>
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d00f      	beq.n	8001f9c <HAL_GPIO_EXTI_Callback+0x64>
 8001f7c:	e04d      	b.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
		{
			case SW1_INT_Pin: last_switch1_state = HAL_GPIO_ReadPin(SW1_INT_GPIO_Port, SW1_INT_Pin); active_GPIO_Pin = SW1_INT_Pin; break;
 8001f7e:	4b38      	ldr	r3, [pc, #224]	; (8002060 <HAL_GPIO_EXTI_Callback+0x128>)
 8001f80:	2101      	movs	r1, #1
 8001f82:	0018      	movs	r0, r3
 8001f84:	f000 fe6a 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001f88:	0003      	movs	r3, r0
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	4193      	sbcs	r3, r2
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001f92:	701a      	strb	r2, [r3, #0]
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_GPIO_EXTI_Callback+0x130>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	601a      	str	r2, [r3, #0]
 8001f9a:	e03e      	b.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
			case SW2_INT_Pin: last_switch2_state = HAL_GPIO_ReadPin(SW2_INT_GPIO_Port, SW2_INT_Pin); active_GPIO_Pin = SW2_INT_Pin; break;
 8001f9c:	4b30      	ldr	r3, [pc, #192]	; (8002060 <HAL_GPIO_EXTI_Callback+0x128>)
 8001f9e:	2102      	movs	r1, #2
 8001fa0:	0018      	movs	r0, r3
 8001fa2:	f000 fe5b 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	1e5a      	subs	r2, r3, #1
 8001faa:	4193      	sbcs	r3, r2
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	4b2f      	ldr	r3, [pc, #188]	; (800206c <HAL_GPIO_EXTI_Callback+0x134>)
 8001fb0:	701a      	strb	r2, [r3, #0]
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_GPIO_EXTI_Callback+0x130>)
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	e02f      	b.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
			case SW3_INT_Pin: last_switch3_state = HAL_GPIO_ReadPin(SW3_INT_GPIO_Port, SW3_INT_Pin); active_GPIO_Pin = SW3_INT_Pin; break;
 8001fba:	4b29      	ldr	r3, [pc, #164]	; (8002060 <HAL_GPIO_EXTI_Callback+0x128>)
 8001fbc:	2104      	movs	r1, #4
 8001fbe:	0018      	movs	r0, r3
 8001fc0:	f000 fe4c 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	1e5a      	subs	r2, r3, #1
 8001fc8:	4193      	sbcs	r3, r2
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b28      	ldr	r3, [pc, #160]	; (8002070 <HAL_GPIO_EXTI_Callback+0x138>)
 8001fce:	701a      	strb	r2, [r3, #0]
 8001fd0:	4b25      	ldr	r3, [pc, #148]	; (8002068 <HAL_GPIO_EXTI_Callback+0x130>)
 8001fd2:	2204      	movs	r2, #4
 8001fd4:	601a      	str	r2, [r3, #0]
 8001fd6:	e020      	b.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
			case SW4_INT_Pin: last_switch4_state = HAL_GPIO_ReadPin(SW4_INT_GPIO_Port, SW4_INT_Pin); active_GPIO_Pin = SW4_INT_Pin; break;
 8001fd8:	4b21      	ldr	r3, [pc, #132]	; (8002060 <HAL_GPIO_EXTI_Callback+0x128>)
 8001fda:	2108      	movs	r1, #8
 8001fdc:	0018      	movs	r0, r3
 8001fde:	f000 fe3d 	bl	8002c5c <HAL_GPIO_ReadPin>
 8001fe2:	0003      	movs	r3, r0
 8001fe4:	1e5a      	subs	r2, r3, #1
 8001fe6:	4193      	sbcs	r3, r2
 8001fe8:	b2da      	uxtb	r2, r3
 8001fea:	4b22      	ldr	r3, [pc, #136]	; (8002074 <HAL_GPIO_EXTI_Callback+0x13c>)
 8001fec:	701a      	strb	r2, [r3, #0]
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_GPIO_EXTI_Callback+0x130>)
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	e011      	b.n	800201a <HAL_GPIO_EXTI_Callback+0xe2>
			case SW5_INT_Pin: last_switch5_state = HAL_GPIO_ReadPin(SW5_INT_GPIO_Port, SW5_INT_Pin); active_GPIO_Pin = SW5_INT_Pin; break;
 8001ff6:	2380      	movs	r3, #128	; 0x80
 8001ff8:	015b      	lsls	r3, r3, #5
 8001ffa:	4a19      	ldr	r2, [pc, #100]	; (8002060 <HAL_GPIO_EXTI_Callback+0x128>)
 8001ffc:	0019      	movs	r1, r3
 8001ffe:	0010      	movs	r0, r2
 8002000:	f000 fe2c 	bl	8002c5c <HAL_GPIO_ReadPin>
 8002004:	0003      	movs	r3, r0
 8002006:	1e5a      	subs	r2, r3, #1
 8002008:	4193      	sbcs	r3, r2
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <HAL_GPIO_EXTI_Callback+0x140>)
 800200e:	701a      	strb	r2, [r3, #0]
 8002010:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_GPIO_EXTI_Callback+0x130>)
 8002012:	2280      	movs	r2, #128	; 0x80
 8002014:	0152      	lsls	r2, r2, #5
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	46c0      	nop			; (mov r8, r8)
		}

		// start a timer to wait for 20ms, then resample in ISR. only act if the two samples match
		timer_running = true;
 800201a:	4b10      	ldr	r3, [pc, #64]	; (800205c <HAL_GPIO_EXTI_Callback+0x124>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
		HAL_TIM_RegisterCallback(&htim7, HAL_TIM_PERIOD_ELAPSED_CB_ID, switch_callback);
 8002020:	4a16      	ldr	r2, [pc, #88]	; (800207c <HAL_GPIO_EXTI_Callback+0x144>)
 8002022:	4b17      	ldr	r3, [pc, #92]	; (8002080 <HAL_GPIO_EXTI_Callback+0x148>)
 8002024:	210e      	movs	r1, #14
 8002026:	0018      	movs	r0, r3
 8002028:	f004 ff4c 	bl	8006ec4 <HAL_TIM_RegisterCallback>
		HAL_TIM_Base_Start_IT(&htim7);
 800202c:	4b14      	ldr	r3, [pc, #80]	; (8002080 <HAL_GPIO_EXTI_Callback+0x148>)
 800202e:	0018      	movs	r0, r3
 8002030:	f004 fa70 	bl	8006514 <HAL_TIM_Base_Start_IT>

		// start a timer to wait 500ms. If a button is still down when this timer files, the action is repeated
		__HAL_TIM_CLEAR_FLAG(&htim6, TIM_SR_UIF);
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2202      	movs	r2, #2
 800203a:	4252      	negs	r2, r2
 800203c:	611a      	str	r2, [r3, #16]
		HAL_TIM_RegisterCallback(&htim6, HAL_TIM_PERIOD_ELAPSED_CB_ID, repeat_callback);
 800203e:	4a12      	ldr	r2, [pc, #72]	; (8002088 <HAL_GPIO_EXTI_Callback+0x150>)
 8002040:	4b10      	ldr	r3, [pc, #64]	; (8002084 <HAL_GPIO_EXTI_Callback+0x14c>)
 8002042:	210e      	movs	r1, #14
 8002044:	0018      	movs	r0, r3
 8002046:	f004 ff3d 	bl	8006ec4 <HAL_TIM_RegisterCallback>
		HAL_TIM_Base_Start_IT(&htim6);
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <HAL_GPIO_EXTI_Callback+0x14c>)
 800204c:	0018      	movs	r0, r3
 800204e:	f004 fa61 	bl	8006514 <HAL_TIM_Base_Start_IT>
	}
}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b002      	add	sp, #8
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	200008d4 	.word	0x200008d4
 8002060:	48000400 	.word	0x48000400
 8002064:	20000050 	.word	0x20000050
 8002068:	200008d8 	.word	0x200008d8
 800206c:	20000051 	.word	0x20000051
 8002070:	20000052 	.word	0x20000052
 8002074:	20000053 	.word	0x20000053
 8002078:	20000054 	.word	0x20000054
 800207c:	08001cf1 	.word	0x08001cf1
 8002080:	20000630 	.word	0x20000630
 8002084:	2000057c 	.word	0x2000057c
 8002088:	08001b89 	.word	0x08001b89

0800208c <_close>:
  }
  return len;
}

int _close(int file)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002094:	2301      	movs	r3, #1
 8002096:	425b      	negs	r3, r3
}
 8002098:	0018      	movs	r0, r3
 800209a:	46bd      	mov	sp, r7
 800209c:	b002      	add	sp, #8
 800209e:	bd80      	pop	{r7, pc}

080020a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	2280      	movs	r2, #128	; 0x80
 80020ae:	0192      	lsls	r2, r2, #6
 80020b0:	605a      	str	r2, [r3, #4]
  return 0;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	0018      	movs	r0, r3
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_isatty>:

int _isatty(int file)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c4:	2301      	movs	r3, #1
}
 80020c6:	0018      	movs	r0, r3
 80020c8:	46bd      	mov	sp, r7
 80020ca:	b002      	add	sp, #8
 80020cc:	bd80      	pop	{r7, pc}

080020ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b084      	sub	sp, #16
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	60f8      	str	r0, [r7, #12]
 80020d6:	60b9      	str	r1, [r7, #8]
 80020d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	0018      	movs	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	b004      	add	sp, #16
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	18d3      	adds	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f00a fbb2 	bl	800c87c <__errno>
 8002118:	0003      	movs	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	2301      	movs	r3, #1
 8002120:	425b      	negs	r3, r3
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	18d2      	adds	r2, r2, r3
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <_sbrk+0x64>)
 8002134:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	0018      	movs	r0, r3
 800213a:	46bd      	mov	sp, r7
 800213c:	b006      	add	sp, #24
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20004000 	.word	0x20004000
 8002144:	00000400 	.word	0x00000400
 8002148:	200008e0 	.word	0x200008e0
 800214c:	20001460 	.word	0x20001460

08002150 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8002154:	46c0      	nop			; (mov r8, r8)
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
	...

0800215c <set_time>:

// n.b. time and date must be set together

/** */
void set_time(uint8_t hours, uint8_t minutes)
{
 800215c:	b590      	push	{r4, r7, lr}
 800215e:	b089      	sub	sp, #36	; 0x24
 8002160:	af00      	add	r7, sp, #0
 8002162:	0002      	movs	r2, r0
 8002164:	1dfb      	adds	r3, r7, #7
 8002166:	701a      	strb	r2, [r3, #0]
 8002168:	1dbb      	adds	r3, r7, #6
 800216a:	1c0a      	adds	r2, r1, #0
 800216c:	701a      	strb	r2, [r3, #0]
    RTC_TimeTypeDef sTime = {.Hours = hours, .Minutes = minutes};
 800216e:	240c      	movs	r4, #12
 8002170:	193b      	adds	r3, r7, r4
 8002172:	0018      	movs	r0, r3
 8002174:	2314      	movs	r3, #20
 8002176:	001a      	movs	r2, r3
 8002178:	2100      	movs	r1, #0
 800217a:	f00a fbcb 	bl	800c914 <memset>
 800217e:	0021      	movs	r1, r4
 8002180:	187b      	adds	r3, r7, r1
 8002182:	1dfa      	adds	r2, r7, #7
 8002184:	7812      	ldrb	r2, [r2, #0]
 8002186:	701a      	strb	r2, [r3, #0]
 8002188:	187b      	adds	r3, r7, r1
 800218a:	1dba      	adds	r2, r7, #6
 800218c:	7812      	ldrb	r2, [r2, #0]
 800218e:	705a      	strb	r2, [r3, #1]
    RTC_DateTypeDef sDate = {0};
 8002190:	2408      	movs	r4, #8
 8002192:	193b      	adds	r3, r7, r4
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002198:	1879      	adds	r1, r7, r1
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <set_time+0x5c>)
 800219c:	2200      	movs	r2, #0
 800219e:	0018      	movs	r0, r3
 80021a0:	f003 fb60 	bl	8005864 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80021a4:	1939      	adds	r1, r7, r4
 80021a6:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <set_time+0x5c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	0018      	movs	r0, r3
 80021ac:	f003 fc5e 	bl	8005a6c <HAL_RTC_SetDate>
}
 80021b0:	46c0      	nop			; (mov r8, r8)
 80021b2:	46bd      	mov	sp, r7
 80021b4:	b009      	add	sp, #36	; 0x24
 80021b6:	bd90      	pop	{r4, r7, pc}
 80021b8:	200003d4 	.word	0x200003d4

080021bc <get_time>:

/** */
void get_time(uint8_t *hours, uint8_t *minutes)
{
 80021bc:	b5b0      	push	{r4, r5, r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    RTC_TimeTypeDef sTime = {0};
 80021c6:	240c      	movs	r4, #12
 80021c8:	193b      	adds	r3, r7, r4
 80021ca:	0018      	movs	r0, r3
 80021cc:	2314      	movs	r3, #20
 80021ce:	001a      	movs	r2, r3
 80021d0:	2100      	movs	r1, #0
 80021d2:	f00a fb9f 	bl	800c914 <memset>
    RTC_DateTypeDef sDate = {0};
 80021d6:	2508      	movs	r5, #8
 80021d8:	197b      	adds	r3, r7, r5
 80021da:	2200      	movs	r2, #0
 80021dc:	601a      	str	r2, [r3, #0]
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80021de:	1939      	adds	r1, r7, r4
 80021e0:	4b0b      	ldr	r3, [pc, #44]	; (8002210 <get_time+0x54>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	0018      	movs	r0, r3
 80021e6:	f003 fbe3 	bl	80059b0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80021ea:	1979      	adds	r1, r7, r5
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <get_time+0x54>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	0018      	movs	r0, r3
 80021f2:	f003 fccb 	bl	8005b8c <HAL_RTC_GetDate>
    *hours = sTime.Hours;
 80021f6:	193b      	adds	r3, r7, r4
 80021f8:	781a      	ldrb	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	701a      	strb	r2, [r3, #0]
    *minutes = sTime.Minutes;
 80021fe:	193b      	adds	r3, r7, r4
 8002200:	785a      	ldrb	r2, [r3, #1]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	701a      	strb	r2, [r3, #0]
}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	46bd      	mov	sp, r7
 800220a:	b008      	add	sp, #32
 800220c:	bdb0      	pop	{r4, r5, r7, pc}
 800220e:	46c0      	nop			; (mov r8, r8)
 8002210:	200003d4 	.word	0x200003d4

08002214 <increment_time>:

/** */
void increment_time(void)
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b089      	sub	sp, #36	; 0x24
 8002218:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 800221a:	2408      	movs	r4, #8
 800221c:	193b      	adds	r3, r7, r4
 800221e:	0018      	movs	r0, r3
 8002220:	2314      	movs	r3, #20
 8002222:	001a      	movs	r2, r3
 8002224:	2100      	movs	r1, #0
 8002226:	f00a fb75 	bl	800c914 <memset>
    RTC_DateTypeDef sDate = {0};
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002230:	1939      	adds	r1, r7, r4
 8002232:	4b22      	ldr	r3, [pc, #136]	; (80022bc <increment_time+0xa8>)
 8002234:	2200      	movs	r2, #0
 8002236:	0018      	movs	r0, r3
 8002238:	f003 fbba 	bl	80059b0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800223c:	1d39      	adds	r1, r7, #4
 800223e:	4b1f      	ldr	r3, [pc, #124]	; (80022bc <increment_time+0xa8>)
 8002240:	2200      	movs	r2, #0
 8002242:	0018      	movs	r0, r3
 8002244:	f003 fca2 	bl	8005b8c <HAL_RTC_GetDate>
    uint8_t hours = sTime.Hours;
 8002248:	231f      	movs	r3, #31
 800224a:	18fb      	adds	r3, r7, r3
 800224c:	0021      	movs	r1, r4
 800224e:	187a      	adds	r2, r7, r1
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	701a      	strb	r2, [r3, #0]
    uint8_t minutes = sTime.Minutes;
 8002254:	201e      	movs	r0, #30
 8002256:	183b      	adds	r3, r7, r0
 8002258:	187a      	adds	r2, r7, r1
 800225a:	7852      	ldrb	r2, [r2, #1]
 800225c:	701a      	strb	r2, [r3, #0]

    if(minutes<59)
 800225e:	183b      	adds	r3, r7, r0
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b3a      	cmp	r3, #58	; 0x3a
 8002264:	d805      	bhi.n	8002272 <increment_time+0x5e>
    {
    	minutes++;
 8002266:	183b      	adds	r3, r7, r0
 8002268:	781a      	ldrb	r2, [r3, #0]
 800226a:	183b      	adds	r3, r7, r0
 800226c:	3201      	adds	r2, #1
 800226e:	701a      	strb	r2, [r3, #0]
 8002270:	e009      	b.n	8002286 <increment_time+0x72>
    }
    else
    {
        hours++;
 8002272:	211f      	movs	r1, #31
 8002274:	187b      	adds	r3, r7, r1
 8002276:	781a      	ldrb	r2, [r3, #0]
 8002278:	187b      	adds	r3, r7, r1
 800227a:	3201      	adds	r2, #1
 800227c:	701a      	strb	r2, [r3, #0]
        minutes = 0;
 800227e:	231e      	movs	r3, #30
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
    }

    sTime.Hours = hours;
 8002286:	2108      	movs	r1, #8
 8002288:	187b      	adds	r3, r7, r1
 800228a:	221f      	movs	r2, #31
 800228c:	18ba      	adds	r2, r7, r2
 800228e:	7812      	ldrb	r2, [r2, #0]
 8002290:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 8002292:	187b      	adds	r3, r7, r1
 8002294:	221e      	movs	r2, #30
 8002296:	18ba      	adds	r2, r7, r2
 8002298:	7812      	ldrb	r2, [r2, #0]
 800229a:	705a      	strb	r2, [r3, #1]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800229c:	1879      	adds	r1, r7, r1
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <increment_time+0xa8>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	0018      	movs	r0, r3
 80022a4:	f003 fade 	bl	8005864 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022a8:	1d39      	adds	r1, r7, #4
 80022aa:	4b04      	ldr	r3, [pc, #16]	; (80022bc <increment_time+0xa8>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	0018      	movs	r0, r3
 80022b0:	f003 fbdc 	bl	8005a6c <HAL_RTC_SetDate>
}
 80022b4:	46c0      	nop			; (mov r8, r8)
 80022b6:	46bd      	mov	sp, r7
 80022b8:	b009      	add	sp, #36	; 0x24
 80022ba:	bd90      	pop	{r4, r7, pc}
 80022bc:	200003d4 	.word	0x200003d4

080022c0 <decrement_time>:

/** */
void decrement_time(void)
{
 80022c0:	b590      	push	{r4, r7, lr}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
    RTC_TimeTypeDef sTime = {0};
 80022c6:	2408      	movs	r4, #8
 80022c8:	193b      	adds	r3, r7, r4
 80022ca:	0018      	movs	r0, r3
 80022cc:	2314      	movs	r3, #20
 80022ce:	001a      	movs	r2, r3
 80022d0:	2100      	movs	r1, #0
 80022d2:	f00a fb1f 	bl	800c914 <memset>
    RTC_DateTypeDef sDate = {0};
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]
    HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80022dc:	1939      	adds	r1, r7, r4
 80022de:	4b22      	ldr	r3, [pc, #136]	; (8002368 <decrement_time+0xa8>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	0018      	movs	r0, r3
 80022e4:	f003 fb64 	bl	80059b0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80022e8:	1d39      	adds	r1, r7, #4
 80022ea:	4b1f      	ldr	r3, [pc, #124]	; (8002368 <decrement_time+0xa8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	0018      	movs	r0, r3
 80022f0:	f003 fc4c 	bl	8005b8c <HAL_RTC_GetDate>
    uint8_t hours = sTime.Hours;
 80022f4:	231f      	movs	r3, #31
 80022f6:	18fb      	adds	r3, r7, r3
 80022f8:	0021      	movs	r1, r4
 80022fa:	187a      	adds	r2, r7, r1
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	701a      	strb	r2, [r3, #0]
    uint8_t minutes = sTime.Minutes;
 8002300:	201e      	movs	r0, #30
 8002302:	183b      	adds	r3, r7, r0
 8002304:	187a      	adds	r2, r7, r1
 8002306:	7852      	ldrb	r2, [r2, #1]
 8002308:	701a      	strb	r2, [r3, #0]

    if(minutes>0)
 800230a:	183b      	adds	r3, r7, r0
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d005      	beq.n	800231e <decrement_time+0x5e>
    {
    	minutes--;
 8002312:	183b      	adds	r3, r7, r0
 8002314:	781a      	ldrb	r2, [r3, #0]
 8002316:	183b      	adds	r3, r7, r0
 8002318:	3a01      	subs	r2, #1
 800231a:	701a      	strb	r2, [r3, #0]
 800231c:	e009      	b.n	8002332 <decrement_time+0x72>
    }
    else
    {
        hours--;
 800231e:	211f      	movs	r1, #31
 8002320:	187b      	adds	r3, r7, r1
 8002322:	781a      	ldrb	r2, [r3, #0]
 8002324:	187b      	adds	r3, r7, r1
 8002326:	3a01      	subs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
        minutes = 59;
 800232a:	231e      	movs	r3, #30
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	223b      	movs	r2, #59	; 0x3b
 8002330:	701a      	strb	r2, [r3, #0]
    }

    sTime.Hours = hours;
 8002332:	2108      	movs	r1, #8
 8002334:	187b      	adds	r3, r7, r1
 8002336:	221f      	movs	r2, #31
 8002338:	18ba      	adds	r2, r7, r2
 800233a:	7812      	ldrb	r2, [r2, #0]
 800233c:	701a      	strb	r2, [r3, #0]
    sTime.Minutes = minutes;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	221e      	movs	r2, #30
 8002342:	18ba      	adds	r2, r7, r2
 8002344:	7812      	ldrb	r2, [r2, #0]
 8002346:	705a      	strb	r2, [r3, #1]
    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002348:	1879      	adds	r1, r7, r1
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <decrement_time+0xa8>)
 800234c:	2200      	movs	r2, #0
 800234e:	0018      	movs	r0, r3
 8002350:	f003 fa88 	bl	8005864 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002354:	1d39      	adds	r1, r7, #4
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <decrement_time+0xa8>)
 8002358:	2200      	movs	r2, #0
 800235a:	0018      	movs	r0, r3
 800235c:	f003 fb86 	bl	8005a6c <HAL_RTC_SetDate>
}
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b009      	add	sp, #36	; 0x24
 8002366:	bd90      	pop	{r4, r7, pc}
 8002368:	200003d4 	.word	0x200003d4

0800236c <alarm_event_callback>:

/** */
void alarm_event_callback(RTC_HandleTypeDef *hrtc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
	printf("Alarm time reached\n");
 8002374:	4b04      	ldr	r3, [pc, #16]	; (8002388 <alarm_event_callback+0x1c>)
 8002376:	0018      	movs	r0, r3
 8002378:	f00a fe58 	bl	800d02c <puts>
	buzzer_start();
 800237c:	f7fd ffac 	bl	80002d8 <buzzer_start>
}
 8002380:	46c0      	nop			; (mov r8, r8)
 8002382:	46bd      	mov	sp, r7
 8002384:	b002      	add	sp, #8
 8002386:	bd80      	pop	{r7, pc}
 8002388:	0800ed4c 	.word	0x0800ed4c

0800238c <set_alarm>:

/** */
void set_alarm(uint8_t hours, uint8_t minutes)
{
 800238c:	b590      	push	{r4, r7, lr}
 800238e:	b08d      	sub	sp, #52	; 0x34
 8002390:	af00      	add	r7, sp, #0
 8002392:	0002      	movs	r2, r0
 8002394:	1dfb      	adds	r3, r7, #7
 8002396:	701a      	strb	r2, [r3, #0]
 8002398:	1dbb      	adds	r3, r7, #6
 800239a:	1c0a      	adds	r2, r1, #0
 800239c:	701a      	strb	r2, [r3, #0]
	RTC_AlarmTypeDef sAlarm = {0};
 800239e:	2408      	movs	r4, #8
 80023a0:	193b      	adds	r3, r7, r4
 80023a2:	0018      	movs	r0, r3
 80023a4:	2328      	movs	r3, #40	; 0x28
 80023a6:	001a      	movs	r2, r3
 80023a8:	2100      	movs	r1, #0
 80023aa:	f00a fab3 	bl	800c914 <memset>

	sAlarm.AlarmTime.Hours = hours;
 80023ae:	0020      	movs	r0, r4
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	1dfa      	adds	r2, r7, #7
 80023b4:	7812      	ldrb	r2, [r2, #0]
 80023b6:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 80023b8:	183b      	adds	r3, r7, r0
 80023ba:	1dba      	adds	r2, r7, #6
 80023bc:	7812      	ldrb	r2, [r2, #0]
 80023be:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 80023c0:	183b      	adds	r3, r7, r0
 80023c2:	2200      	movs	r2, #0
 80023c4:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80023c6:	183b      	adds	r3, r7, r0
 80023c8:	2200      	movs	r2, #0
 80023ca:	605a      	str	r2, [r3, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80023cc:	183b      	adds	r3, r7, r0
 80023ce:	2200      	movs	r2, #0
 80023d0:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_SET;
 80023d2:	183b      	adds	r3, r7, r0
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	02d2      	lsls	r2, r2, #11
 80023d8:	611a      	str	r2, [r3, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 80023da:	183b      	adds	r3, r7, r0
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0612      	lsls	r2, r2, #24
 80023e0:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	2200      	movs	r2, #0
 80023e6:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80023e8:	183b      	adds	r3, r7, r0
 80023ea:	2200      	movs	r2, #0
 80023ec:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 0;
 80023ee:	183b      	adds	r3, r7, r0
 80023f0:	2220      	movs	r2, #32
 80023f2:	2100      	movs	r1, #0
 80023f4:	5499      	strb	r1, [r3, r2]
	sAlarm.Alarm = RTC_ALARM_A;
 80023f6:	0001      	movs	r1, r0
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2280      	movs	r2, #128	; 0x80
 80023fc:	0052      	lsls	r2, r2, #1
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 8002400:	1879      	adds	r1, r7, r1
 8002402:	4b04      	ldr	r3, [pc, #16]	; (8002414 <set_alarm+0x88>)
 8002404:	2200      	movs	r2, #0
 8002406:	0018      	movs	r0, r3
 8002408:	f003 fc10 	bl	8005c2c <HAL_RTC_SetAlarm>
}
 800240c:	46c0      	nop			; (mov r8, r8)
 800240e:	46bd      	mov	sp, r7
 8002410:	b00d      	add	sp, #52	; 0x34
 8002412:	bd90      	pop	{r4, r7, pc}
 8002414:	200003d4 	.word	0x200003d4

08002418 <get_alarm>:

/** */
void get_alarm(uint8_t *hours, uint8_t *minutes)
{
 8002418:	b590      	push	{r4, r7, lr}
 800241a:	b08d      	sub	sp, #52	; 0x34
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
	RTC_AlarmTypeDef sAlarm = {0};
 8002422:	2408      	movs	r4, #8
 8002424:	193b      	adds	r3, r7, r4
 8002426:	0018      	movs	r0, r3
 8002428:	2328      	movs	r3, #40	; 0x28
 800242a:	001a      	movs	r2, r3
 800242c:	2100      	movs	r1, #0
 800242e:	f00a fa71 	bl	800c914 <memset>

	HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8002432:	2380      	movs	r3, #128	; 0x80
 8002434:	005a      	lsls	r2, r3, #1
 8002436:	1939      	adds	r1, r7, r4
 8002438:	4807      	ldr	r0, [pc, #28]	; (8002458 <get_alarm+0x40>)
 800243a:	2300      	movs	r3, #0
 800243c:	f003 fe32 	bl	80060a4 <HAL_RTC_GetAlarm>
	*hours = sAlarm.AlarmTime.Hours;
 8002440:	193b      	adds	r3, r7, r4
 8002442:	781a      	ldrb	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	701a      	strb	r2, [r3, #0]
	*minutes = sAlarm.AlarmTime.Minutes;
 8002448:	193b      	adds	r3, r7, r4
 800244a:	785a      	ldrb	r2, [r3, #1]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	701a      	strb	r2, [r3, #0]
}
 8002450:	46c0      	nop			; (mov r8, r8)
 8002452:	46bd      	mov	sp, r7
 8002454:	b00d      	add	sp, #52	; 0x34
 8002456:	bd90      	pop	{r4, r7, pc}
 8002458:	200003d4 	.word	0x200003d4

0800245c <enable_alarm>:

/** */
void enable_alarm(bool enable)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b08d      	sub	sp, #52	; 0x34
 8002460:	af00      	add	r7, sp, #0
 8002462:	0002      	movs	r2, r0
 8002464:	1dfb      	adds	r3, r7, #7
 8002466:	701a      	strb	r2, [r3, #0]
	RTC_AlarmTypeDef sAlarm = {0};
 8002468:	2408      	movs	r4, #8
 800246a:	193b      	adds	r3, r7, r4
 800246c:	0018      	movs	r0, r3
 800246e:	2328      	movs	r3, #40	; 0x28
 8002470:	001a      	movs	r2, r3
 8002472:	2100      	movs	r1, #0
 8002474:	f00a fa4e 	bl	800c914 <memset>

	if(enable)
 8002478:	1dfb      	adds	r3, r7, #7
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d013      	beq.n	80024a8 <enable_alarm+0x4c>
	{
		HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	005a      	lsls	r2, r3, #1
 8002484:	1939      	adds	r1, r7, r4
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <enable_alarm+0x64>)
 8002488:	2300      	movs	r3, #0
 800248a:	f003 fe0b 	bl	80060a4 <HAL_RTC_GetAlarm>
		HAL_RTC_RegisterCallback(&hrtc, HAL_RTC_ALARM_A_EVENT_CB_ID, alarm_event_callback);
 800248e:	4a0d      	ldr	r2, [pc, #52]	; (80024c4 <enable_alarm+0x68>)
 8002490:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <enable_alarm+0x64>)
 8002492:	2100      	movs	r1, #0
 8002494:	0018      	movs	r0, r3
 8002496:	f003 f96b 	bl	8005770 <HAL_RTC_RegisterCallback>
		HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 800249a:	1939      	adds	r1, r7, r4
 800249c:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <enable_alarm+0x64>)
 800249e:	2200      	movs	r2, #0
 80024a0:	0018      	movs	r0, r3
 80024a2:	f003 fca7 	bl	8005df4 <HAL_RTC_SetAlarm_IT>
	}
	else
	{
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
	}
}
 80024a6:	e006      	b.n	80024b6 <enable_alarm+0x5a>
		HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80024a8:	2380      	movs	r3, #128	; 0x80
 80024aa:	005a      	lsls	r2, r3, #1
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <enable_alarm+0x64>)
 80024ae:	0011      	movs	r1, r2
 80024b0:	0018      	movs	r0, r3
 80024b2:	f003 fd99 	bl	8005fe8 <HAL_RTC_DeactivateAlarm>
}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	46bd      	mov	sp, r7
 80024ba:	b00d      	add	sp, #52	; 0x34
 80024bc:	bd90      	pop	{r4, r7, pc}
 80024be:	46c0      	nop			; (mov r8, r8)
 80024c0:	200003d4 	.word	0x200003d4
 80024c4:	0800236d 	.word	0x0800236d

080024c8 <increment_alarm>:

/** */
void increment_alarm(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	; 0x30
 80024cc:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	0018      	movs	r0, r3
 80024d2:	2328      	movs	r3, #40	; 0x28
 80024d4:	001a      	movs	r2, r3
 80024d6:	2100      	movs	r1, #0
 80024d8:	f00a fa1c 	bl	800c914 <memset>

	HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 80024dc:	2380      	movs	r3, #128	; 0x80
 80024de:	005a      	lsls	r2, r3, #1
 80024e0:	1d39      	adds	r1, r7, #4
 80024e2:	481c      	ldr	r0, [pc, #112]	; (8002554 <increment_alarm+0x8c>)
 80024e4:	2300      	movs	r3, #0
 80024e6:	f003 fddd 	bl	80060a4 <HAL_RTC_GetAlarm>
    uint8_t hours = sAlarm.AlarmTime.Hours;
 80024ea:	232f      	movs	r3, #47	; 0x2f
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	1d3a      	adds	r2, r7, #4
 80024f0:	7812      	ldrb	r2, [r2, #0]
 80024f2:	701a      	strb	r2, [r3, #0]
    uint8_t minutes = sAlarm.AlarmTime.Minutes;
 80024f4:	212e      	movs	r1, #46	; 0x2e
 80024f6:	187b      	adds	r3, r7, r1
 80024f8:	1d3a      	adds	r2, r7, #4
 80024fa:	7852      	ldrb	r2, [r2, #1]
 80024fc:	701a      	strb	r2, [r3, #0]

    if(minutes<59)
 80024fe:	000a      	movs	r2, r1
 8002500:	18bb      	adds	r3, r7, r2
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	2b3a      	cmp	r3, #58	; 0x3a
 8002506:	d806      	bhi.n	8002516 <increment_alarm+0x4e>
    {
    	minutes++;
 8002508:	0011      	movs	r1, r2
 800250a:	18bb      	adds	r3, r7, r2
 800250c:	781a      	ldrb	r2, [r3, #0]
 800250e:	187b      	adds	r3, r7, r1
 8002510:	3201      	adds	r2, #1
 8002512:	701a      	strb	r2, [r3, #0]
 8002514:	e009      	b.n	800252a <increment_alarm+0x62>
    }
    else
    {
        hours++;
 8002516:	212f      	movs	r1, #47	; 0x2f
 8002518:	187b      	adds	r3, r7, r1
 800251a:	781a      	ldrb	r2, [r3, #0]
 800251c:	187b      	adds	r3, r7, r1
 800251e:	3201      	adds	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
        minutes = 0;
 8002522:	232e      	movs	r3, #46	; 0x2e
 8002524:	18fb      	adds	r3, r7, r3
 8002526:	2200      	movs	r2, #0
 8002528:	701a      	strb	r2, [r3, #0]
    }

	sAlarm.AlarmTime.Hours = hours;
 800252a:	1d3b      	adds	r3, r7, #4
 800252c:	222f      	movs	r2, #47	; 0x2f
 800252e:	18ba      	adds	r2, r7, r2
 8002530:	7812      	ldrb	r2, [r2, #0]
 8002532:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8002534:	1d3b      	adds	r3, r7, #4
 8002536:	222e      	movs	r2, #46	; 0x2e
 8002538:	18ba      	adds	r2, r7, r2
 800253a:	7812      	ldrb	r2, [r2, #0]
 800253c:	705a      	strb	r2, [r3, #1]

	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 800253e:	1d39      	adds	r1, r7, #4
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <increment_alarm+0x8c>)
 8002542:	2200      	movs	r2, #0
 8002544:	0018      	movs	r0, r3
 8002546:	f003 fc55 	bl	8005df4 <HAL_RTC_SetAlarm_IT>
}
 800254a:	46c0      	nop			; (mov r8, r8)
 800254c:	46bd      	mov	sp, r7
 800254e:	b00c      	add	sp, #48	; 0x30
 8002550:	bd80      	pop	{r7, pc}
 8002552:	46c0      	nop			; (mov r8, r8)
 8002554:	200003d4 	.word	0x200003d4

08002558 <decrement_alarm>:

/** */
void decrement_alarm(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af00      	add	r7, sp, #0
	RTC_AlarmTypeDef sAlarm = {0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	0018      	movs	r0, r3
 8002562:	2328      	movs	r3, #40	; 0x28
 8002564:	001a      	movs	r2, r3
 8002566:	2100      	movs	r1, #0
 8002568:	f00a f9d4 	bl	800c914 <memset>

	HAL_RTC_GetAlarm(&hrtc, &sAlarm, RTC_ALARM_A, RTC_FORMAT_BIN);
 800256c:	2380      	movs	r3, #128	; 0x80
 800256e:	005a      	lsls	r2, r3, #1
 8002570:	1d39      	adds	r1, r7, #4
 8002572:	481c      	ldr	r0, [pc, #112]	; (80025e4 <decrement_alarm+0x8c>)
 8002574:	2300      	movs	r3, #0
 8002576:	f003 fd95 	bl	80060a4 <HAL_RTC_GetAlarm>
    uint8_t hours = sAlarm.AlarmTime.Hours;
 800257a:	232f      	movs	r3, #47	; 0x2f
 800257c:	18fb      	adds	r3, r7, r3
 800257e:	1d3a      	adds	r2, r7, #4
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	701a      	strb	r2, [r3, #0]
    uint8_t minutes = sAlarm.AlarmTime.Minutes;
 8002584:	212e      	movs	r1, #46	; 0x2e
 8002586:	187b      	adds	r3, r7, r1
 8002588:	1d3a      	adds	r2, r7, #4
 800258a:	7852      	ldrb	r2, [r2, #1]
 800258c:	701a      	strb	r2, [r3, #0]

    if(minutes>0)
 800258e:	000a      	movs	r2, r1
 8002590:	18bb      	adds	r3, r7, r2
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <decrement_alarm+0x4e>
    {
    	minutes--;
 8002598:	0011      	movs	r1, r2
 800259a:	18bb      	adds	r3, r7, r2
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	187b      	adds	r3, r7, r1
 80025a0:	3a01      	subs	r2, #1
 80025a2:	701a      	strb	r2, [r3, #0]
 80025a4:	e009      	b.n	80025ba <decrement_alarm+0x62>
    }
    else
    {
        hours--;
 80025a6:	212f      	movs	r1, #47	; 0x2f
 80025a8:	187b      	adds	r3, r7, r1
 80025aa:	781a      	ldrb	r2, [r3, #0]
 80025ac:	187b      	adds	r3, r7, r1
 80025ae:	3a01      	subs	r2, #1
 80025b0:	701a      	strb	r2, [r3, #0]
        minutes = 59;
 80025b2:	232e      	movs	r3, #46	; 0x2e
 80025b4:	18fb      	adds	r3, r7, r3
 80025b6:	223b      	movs	r2, #59	; 0x3b
 80025b8:	701a      	strb	r2, [r3, #0]
    }

	sAlarm.AlarmTime.Hours = hours;
 80025ba:	1d3b      	adds	r3, r7, #4
 80025bc:	222f      	movs	r2, #47	; 0x2f
 80025be:	18ba      	adds	r2, r7, r2
 80025c0:	7812      	ldrb	r2, [r2, #0]
 80025c2:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 80025c4:	1d3b      	adds	r3, r7, #4
 80025c6:	222e      	movs	r2, #46	; 0x2e
 80025c8:	18ba      	adds	r2, r7, r2
 80025ca:	7812      	ldrb	r2, [r2, #0]
 80025cc:	705a      	strb	r2, [r3, #1]
	HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN);
 80025ce:	1d39      	adds	r1, r7, #4
 80025d0:	4b04      	ldr	r3, [pc, #16]	; (80025e4 <decrement_alarm+0x8c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	0018      	movs	r0, r3
 80025d6:	f003 fc0d 	bl	8005df4 <HAL_RTC_SetAlarm_IT>
}
 80025da:	46c0      	nop			; (mov r8, r8)
 80025dc:	46bd      	mov	sp, r7
 80025de:	b00c      	add	sp, #48	; 0x30
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	46c0      	nop			; (mov r8, r8)
 80025e4:	200003d4 	.word	0x200003d4

080025e8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e8:	480d      	ldr	r0, [pc, #52]	; (8002620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ea:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025ec:	f7ff fdb0 	bl	8002150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480c      	ldr	r0, [pc, #48]	; (8002624 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f2:	490d      	ldr	r1, [pc, #52]	; (8002628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f4:	4a0d      	ldr	r2, [pc, #52]	; (800262c <LoopForever+0xe>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0a      	ldr	r2, [pc, #40]	; (8002630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002608:	4c0a      	ldr	r4, [pc, #40]	; (8002634 <LoopForever+0x16>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002616:	f00a f959 	bl	800c8cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800261a:	f7fe fcc5 	bl	8000fa8 <main>

0800261e <LoopForever>:

LoopForever:
    b LoopForever
 800261e:	e7fe      	b.n	800261e <LoopForever>
  ldr   r0, =_estack
 8002620:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 800262c:	0800f160 	.word	0x0800f160
  ldr r2, =_sbss
 8002630:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002634:	2000145c 	.word	0x2000145c

08002638 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC1_COMP_IRQHandler>
	...

0800263c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002640:	4b07      	ldr	r3, [pc, #28]	; (8002660 <HAL_Init+0x24>)
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_Init+0x24>)
 8002646:	2110      	movs	r1, #16
 8002648:	430a      	orrs	r2, r1
 800264a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800264c:	2003      	movs	r0, #3
 800264e:	f000 f809 	bl	8002664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002652:	f7ff f8b3 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002656:	2300      	movs	r3, #0
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	40022000 	.word	0x40022000

08002664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <HAL_InitTick+0x5c>)
 800266e:	681c      	ldr	r4, [r3, #0]
 8002670:	4b14      	ldr	r3, [pc, #80]	; (80026c4 <HAL_InitTick+0x60>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	0019      	movs	r1, r3
 8002676:	23fa      	movs	r3, #250	; 0xfa
 8002678:	0098      	lsls	r0, r3, #2
 800267a:	f7fd fd61 	bl	8000140 <__udivsi3>
 800267e:	0003      	movs	r3, r0
 8002680:	0019      	movs	r1, r3
 8002682:	0020      	movs	r0, r4
 8002684:	f7fd fd5c 	bl	8000140 <__udivsi3>
 8002688:	0003      	movs	r3, r0
 800268a:	0018      	movs	r0, r3
 800268c:	f000 f961 	bl	8002952 <HAL_SYSTICK_Config>
 8002690:	1e03      	subs	r3, r0, #0
 8002692:	d001      	beq.n	8002698 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e00f      	b.n	80026b8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b03      	cmp	r3, #3
 800269c:	d80b      	bhi.n	80026b6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800269e:	6879      	ldr	r1, [r7, #4]
 80026a0:	2301      	movs	r3, #1
 80026a2:	425b      	negs	r3, r3
 80026a4:	2200      	movs	r2, #0
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f91e 	bl	80028e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026ac:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_InitTick+0x64>)
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
 80026b4:	e000      	b.n	80026b8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
}
 80026b8:	0018      	movs	r0, r3
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b003      	add	sp, #12
 80026be:	bd90      	pop	{r4, r7, pc}
 80026c0:	20000058 	.word	0x20000058
 80026c4:	20000060 	.word	0x20000060
 80026c8:	2000005c 	.word	0x2000005c

080026cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <HAL_IncTick+0x1c>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	001a      	movs	r2, r3
 80026d6:	4b05      	ldr	r3, [pc, #20]	; (80026ec <HAL_IncTick+0x20>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	18d2      	adds	r2, r2, r3
 80026dc:	4b03      	ldr	r3, [pc, #12]	; (80026ec <HAL_IncTick+0x20>)
 80026de:	601a      	str	r2, [r3, #0]
}
 80026e0:	46c0      	nop			; (mov r8, r8)
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	46c0      	nop			; (mov r8, r8)
 80026e8:	20000060 	.word	0x20000060
 80026ec:	200008e4 	.word	0x200008e4

080026f0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	af00      	add	r7, sp, #0
  return uwTick;
 80026f4:	4b02      	ldr	r3, [pc, #8]	; (8002700 <HAL_GetTick+0x10>)
 80026f6:	681b      	ldr	r3, [r3, #0]
}
 80026f8:	0018      	movs	r0, r3
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	200008e4 	.word	0x200008e4

08002704 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800270c:	f7ff fff0 	bl	80026f0 <HAL_GetTick>
 8002710:	0003      	movs	r3, r0
 8002712:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	3301      	adds	r3, #1
 800271c:	d005      	beq.n	800272a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <HAL_Delay+0x44>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	001a      	movs	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	189b      	adds	r3, r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	f7ff ffe0 	bl	80026f0 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	429a      	cmp	r2, r3
 800273a:	d8f7      	bhi.n	800272c <HAL_Delay+0x28>
  {
  }
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46c0      	nop			; (mov r8, r8)
 8002740:	46bd      	mov	sp, r7
 8002742:	b004      	add	sp, #16
 8002744:	bd80      	pop	{r7, pc}
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20000060 	.word	0x20000060

0800274c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	0002      	movs	r2, r0
 8002754:	1dfb      	adds	r3, r7, #7
 8002756:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002758:	1dfb      	adds	r3, r7, #7
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b7f      	cmp	r3, #127	; 0x7f
 800275e:	d809      	bhi.n	8002774 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002760:	1dfb      	adds	r3, r7, #7
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	001a      	movs	r2, r3
 8002766:	231f      	movs	r3, #31
 8002768:	401a      	ands	r2, r3
 800276a:	4b04      	ldr	r3, [pc, #16]	; (800277c <__NVIC_EnableIRQ+0x30>)
 800276c:	2101      	movs	r1, #1
 800276e:	4091      	lsls	r1, r2
 8002770:	000a      	movs	r2, r1
 8002772:	601a      	str	r2, [r3, #0]
  }
}
 8002774:	46c0      	nop			; (mov r8, r8)
 8002776:	46bd      	mov	sp, r7
 8002778:	b002      	add	sp, #8
 800277a:	bd80      	pop	{r7, pc}
 800277c:	e000e100 	.word	0xe000e100

08002780 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	0002      	movs	r2, r0
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b7f      	cmp	r3, #127	; 0x7f
 8002792:	d810      	bhi.n	80027b6 <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	001a      	movs	r2, r3
 800279a:	231f      	movs	r3, #31
 800279c:	4013      	ands	r3, r2
 800279e:	4908      	ldr	r1, [pc, #32]	; (80027c0 <__NVIC_DisableIRQ+0x40>)
 80027a0:	2201      	movs	r2, #1
 80027a2:	409a      	lsls	r2, r3
 80027a4:	0013      	movs	r3, r2
 80027a6:	2280      	movs	r2, #128	; 0x80
 80027a8:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80027aa:	f3bf 8f4f 	dsb	sy
}
 80027ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80027b0:	f3bf 8f6f 	isb	sy
}
 80027b4:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 80027b6:	46c0      	nop			; (mov r8, r8)
 80027b8:	46bd      	mov	sp, r7
 80027ba:	b002      	add	sp, #8
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	46c0      	nop			; (mov r8, r8)
 80027c0:	e000e100 	.word	0xe000e100

080027c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027c4:	b590      	push	{r4, r7, lr}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	0002      	movs	r2, r0
 80027cc:	6039      	str	r1, [r7, #0]
 80027ce:	1dfb      	adds	r3, r7, #7
 80027d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027d2:	1dfb      	adds	r3, r7, #7
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b7f      	cmp	r3, #127	; 0x7f
 80027d8:	d828      	bhi.n	800282c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027da:	4a2f      	ldr	r2, [pc, #188]	; (8002898 <__NVIC_SetPriority+0xd4>)
 80027dc:	1dfb      	adds	r3, r7, #7
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	089b      	lsrs	r3, r3, #2
 80027e4:	33c0      	adds	r3, #192	; 0xc0
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	589b      	ldr	r3, [r3, r2]
 80027ea:	1dfa      	adds	r2, r7, #7
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	0011      	movs	r1, r2
 80027f0:	2203      	movs	r2, #3
 80027f2:	400a      	ands	r2, r1
 80027f4:	00d2      	lsls	r2, r2, #3
 80027f6:	21ff      	movs	r1, #255	; 0xff
 80027f8:	4091      	lsls	r1, r2
 80027fa:	000a      	movs	r2, r1
 80027fc:	43d2      	mvns	r2, r2
 80027fe:	401a      	ands	r2, r3
 8002800:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	019b      	lsls	r3, r3, #6
 8002806:	22ff      	movs	r2, #255	; 0xff
 8002808:	401a      	ands	r2, r3
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	0018      	movs	r0, r3
 8002810:	2303      	movs	r3, #3
 8002812:	4003      	ands	r3, r0
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002818:	481f      	ldr	r0, [pc, #124]	; (8002898 <__NVIC_SetPriority+0xd4>)
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b25b      	sxtb	r3, r3
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	430a      	orrs	r2, r1
 8002824:	33c0      	adds	r3, #192	; 0xc0
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800282a:	e031      	b.n	8002890 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <__NVIC_SetPriority+0xd8>)
 800282e:	1dfb      	adds	r3, r7, #7
 8002830:	781b      	ldrb	r3, [r3, #0]
 8002832:	0019      	movs	r1, r3
 8002834:	230f      	movs	r3, #15
 8002836:	400b      	ands	r3, r1
 8002838:	3b08      	subs	r3, #8
 800283a:	089b      	lsrs	r3, r3, #2
 800283c:	3306      	adds	r3, #6
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	18d3      	adds	r3, r2, r3
 8002842:	3304      	adds	r3, #4
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1dfa      	adds	r2, r7, #7
 8002848:	7812      	ldrb	r2, [r2, #0]
 800284a:	0011      	movs	r1, r2
 800284c:	2203      	movs	r2, #3
 800284e:	400a      	ands	r2, r1
 8002850:	00d2      	lsls	r2, r2, #3
 8002852:	21ff      	movs	r1, #255	; 0xff
 8002854:	4091      	lsls	r1, r2
 8002856:	000a      	movs	r2, r1
 8002858:	43d2      	mvns	r2, r2
 800285a:	401a      	ands	r2, r3
 800285c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	22ff      	movs	r2, #255	; 0xff
 8002864:	401a      	ands	r2, r3
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	0018      	movs	r0, r3
 800286c:	2303      	movs	r3, #3
 800286e:	4003      	ands	r3, r0
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002874:	4809      	ldr	r0, [pc, #36]	; (800289c <__NVIC_SetPriority+0xd8>)
 8002876:	1dfb      	adds	r3, r7, #7
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	001c      	movs	r4, r3
 800287c:	230f      	movs	r3, #15
 800287e:	4023      	ands	r3, r4
 8002880:	3b08      	subs	r3, #8
 8002882:	089b      	lsrs	r3, r3, #2
 8002884:	430a      	orrs	r2, r1
 8002886:	3306      	adds	r3, #6
 8002888:	009b      	lsls	r3, r3, #2
 800288a:	18c3      	adds	r3, r0, r3
 800288c:	3304      	adds	r3, #4
 800288e:	601a      	str	r2, [r3, #0]
}
 8002890:	46c0      	nop			; (mov r8, r8)
 8002892:	46bd      	mov	sp, r7
 8002894:	b003      	add	sp, #12
 8002896:	bd90      	pop	{r4, r7, pc}
 8002898:	e000e100 	.word	0xe000e100
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	1e5a      	subs	r2, r3, #1
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	045b      	lsls	r3, r3, #17
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d301      	bcc.n	80028b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b4:	2301      	movs	r3, #1
 80028b6:	e010      	b.n	80028da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b8:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <SysTick_Config+0x44>)
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	3a01      	subs	r2, #1
 80028be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c0:	2301      	movs	r3, #1
 80028c2:	425b      	negs	r3, r3
 80028c4:	2103      	movs	r1, #3
 80028c6:	0018      	movs	r0, r3
 80028c8:	f7ff ff7c 	bl	80027c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <SysTick_Config+0x44>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d2:	4b04      	ldr	r3, [pc, #16]	; (80028e4 <SysTick_Config+0x44>)
 80028d4:	2207      	movs	r2, #7
 80028d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d8:	2300      	movs	r3, #0
}
 80028da:	0018      	movs	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	b002      	add	sp, #8
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	46c0      	nop			; (mov r8, r8)
 80028e4:	e000e010 	.word	0xe000e010

080028e8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60b9      	str	r1, [r7, #8]
 80028f0:	607a      	str	r2, [r7, #4]
 80028f2:	210f      	movs	r1, #15
 80028f4:	187b      	adds	r3, r7, r1
 80028f6:	1c02      	adds	r2, r0, #0
 80028f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80028fa:	68ba      	ldr	r2, [r7, #8]
 80028fc:	187b      	adds	r3, r7, r1
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	b25b      	sxtb	r3, r3
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff ff5d 	bl	80027c4 <__NVIC_SetPriority>
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b004      	add	sp, #16
 8002910:	bd80      	pop	{r7, pc}

08002912 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b082      	sub	sp, #8
 8002916:	af00      	add	r7, sp, #0
 8002918:	0002      	movs	r2, r0
 800291a:	1dfb      	adds	r3, r7, #7
 800291c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800291e:	1dfb      	adds	r3, r7, #7
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b25b      	sxtb	r3, r3
 8002924:	0018      	movs	r0, r3
 8002926:	f7ff ff11 	bl	800274c <__NVIC_EnableIRQ>
}
 800292a:	46c0      	nop			; (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	0002      	movs	r2, r0
 800293a:	1dfb      	adds	r3, r7, #7
 800293c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800293e:	1dfb      	adds	r3, r7, #7
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	b25b      	sxtb	r3, r3
 8002944:	0018      	movs	r0, r3
 8002946:	f7ff ff1b 	bl	8002780 <__NVIC_DisableIRQ>
}
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	46bd      	mov	sp, r7
 800294e:	b002      	add	sp, #8
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b082      	sub	sp, #8
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	0018      	movs	r0, r3
 800295e:	f7ff ff9f 	bl	80028a0 <SysTick_Config>
 8002962:	0003      	movs	r3, r0
}
 8002964:	0018      	movs	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	b002      	add	sp, #8
 800296a:	bd80      	pop	{r7, pc}

0800296c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800297a:	e155      	b.n	8002c28 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2101      	movs	r1, #1
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	4091      	lsls	r1, r2
 8002986:	000a      	movs	r2, r1
 8002988:	4013      	ands	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d100      	bne.n	8002994 <HAL_GPIO_Init+0x28>
 8002992:	e146      	b.n	8002c22 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2203      	movs	r2, #3
 800299a:	4013      	ands	r3, r2
 800299c:	2b01      	cmp	r3, #1
 800299e:	d005      	beq.n	80029ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2203      	movs	r2, #3
 80029a6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d130      	bne.n	8002a0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	2203      	movs	r2, #3
 80029b8:	409a      	lsls	r2, r3
 80029ba:	0013      	movs	r3, r2
 80029bc:	43da      	mvns	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4013      	ands	r3, r2
 80029c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	005b      	lsls	r3, r3, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	0013      	movs	r3, r2
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029e2:	2201      	movs	r2, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	409a      	lsls	r2, r3
 80029e8:	0013      	movs	r3, r2
 80029ea:	43da      	mvns	r2, r3
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4013      	ands	r3, r2
 80029f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	2201      	movs	r2, #1
 80029fa:	401a      	ands	r2, r3
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	409a      	lsls	r2, r3
 8002a00:	0013      	movs	r3, r2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	2203      	movs	r2, #3
 8002a14:	4013      	ands	r3, r2
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d017      	beq.n	8002a4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	2203      	movs	r2, #3
 8002a26:	409a      	lsls	r2, r3
 8002a28:	0013      	movs	r3, r2
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	0013      	movs	r3, r2
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d123      	bne.n	8002a9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	08da      	lsrs	r2, r3, #3
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	3208      	adds	r2, #8
 8002a5e:	0092      	lsls	r2, r2, #2
 8002a60:	58d3      	ldr	r3, [r2, r3]
 8002a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	2207      	movs	r2, #7
 8002a68:	4013      	ands	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	220f      	movs	r2, #15
 8002a6e:	409a      	lsls	r2, r3
 8002a70:	0013      	movs	r3, r2
 8002a72:	43da      	mvns	r2, r3
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4013      	ands	r3, r2
 8002a78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	691a      	ldr	r2, [r3, #16]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2107      	movs	r1, #7
 8002a82:	400b      	ands	r3, r1
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	409a      	lsls	r2, r3
 8002a88:	0013      	movs	r3, r2
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	08da      	lsrs	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3208      	adds	r2, #8
 8002a98:	0092      	lsls	r2, r2, #2
 8002a9a:	6939      	ldr	r1, [r7, #16]
 8002a9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	409a      	lsls	r2, r3
 8002aac:	0013      	movs	r3, r2
 8002aae:	43da      	mvns	r2, r3
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2203      	movs	r2, #3
 8002abc:	401a      	ands	r2, r3
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	409a      	lsls	r2, r3
 8002ac4:	0013      	movs	r3, r2
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	693a      	ldr	r2, [r7, #16]
 8002ad0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	23c0      	movs	r3, #192	; 0xc0
 8002ad8:	029b      	lsls	r3, r3, #10
 8002ada:	4013      	ands	r3, r2
 8002adc:	d100      	bne.n	8002ae0 <HAL_GPIO_Init+0x174>
 8002ade:	e0a0      	b.n	8002c22 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ae0:	4b57      	ldr	r3, [pc, #348]	; (8002c40 <HAL_GPIO_Init+0x2d4>)
 8002ae2:	699a      	ldr	r2, [r3, #24]
 8002ae4:	4b56      	ldr	r3, [pc, #344]	; (8002c40 <HAL_GPIO_Init+0x2d4>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	4b54      	ldr	r3, [pc, #336]	; (8002c40 <HAL_GPIO_Init+0x2d4>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	2201      	movs	r2, #1
 8002af2:	4013      	ands	r3, r2
 8002af4:	60bb      	str	r3, [r7, #8]
 8002af6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002af8:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_GPIO_Init+0x2d8>)
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	3302      	adds	r3, #2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	589b      	ldr	r3, [r3, r2]
 8002b04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2203      	movs	r2, #3
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	220f      	movs	r2, #15
 8002b10:	409a      	lsls	r2, r3
 8002b12:	0013      	movs	r3, r2
 8002b14:	43da      	mvns	r2, r3
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	2390      	movs	r3, #144	; 0x90
 8002b20:	05db      	lsls	r3, r3, #23
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d019      	beq.n	8002b5a <HAL_GPIO_Init+0x1ee>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a47      	ldr	r2, [pc, #284]	; (8002c48 <HAL_GPIO_Init+0x2dc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d013      	beq.n	8002b56 <HAL_GPIO_Init+0x1ea>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a46      	ldr	r2, [pc, #280]	; (8002c4c <HAL_GPIO_Init+0x2e0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d00d      	beq.n	8002b52 <HAL_GPIO_Init+0x1e6>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a45      	ldr	r2, [pc, #276]	; (8002c50 <HAL_GPIO_Init+0x2e4>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d007      	beq.n	8002b4e <HAL_GPIO_Init+0x1e2>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a44      	ldr	r2, [pc, #272]	; (8002c54 <HAL_GPIO_Init+0x2e8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d101      	bne.n	8002b4a <HAL_GPIO_Init+0x1de>
 8002b46:	2304      	movs	r3, #4
 8002b48:	e008      	b.n	8002b5c <HAL_GPIO_Init+0x1f0>
 8002b4a:	2305      	movs	r3, #5
 8002b4c:	e006      	b.n	8002b5c <HAL_GPIO_Init+0x1f0>
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e004      	b.n	8002b5c <HAL_GPIO_Init+0x1f0>
 8002b52:	2302      	movs	r3, #2
 8002b54:	e002      	b.n	8002b5c <HAL_GPIO_Init+0x1f0>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <HAL_GPIO_Init+0x1f0>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	2103      	movs	r1, #3
 8002b60:	400a      	ands	r2, r1
 8002b62:	0092      	lsls	r2, r2, #2
 8002b64:	4093      	lsls	r3, r2
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b6c:	4935      	ldr	r1, [pc, #212]	; (8002c44 <HAL_GPIO_Init+0x2d8>)
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	089b      	lsrs	r3, r3, #2
 8002b72:	3302      	adds	r3, #2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b7a:	4b37      	ldr	r3, [pc, #220]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	43da      	mvns	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	4013      	ands	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685a      	ldr	r2, [r3, #4]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	035b      	lsls	r3, r3, #13
 8002b92:	4013      	ands	r3, r2
 8002b94:	d003      	beq.n	8002b9e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002b9e:	4b2e      	ldr	r3, [pc, #184]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002ba0:	693a      	ldr	r2, [r7, #16]
 8002ba2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002ba4:	4b2c      	ldr	r3, [pc, #176]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	43da      	mvns	r2, r3
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	2380      	movs	r3, #128	; 0x80
 8002bba:	039b      	lsls	r3, r3, #14
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	d003      	beq.n	8002bc8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002bce:	4b22      	ldr	r3, [pc, #136]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	2380      	movs	r3, #128	; 0x80
 8002be4:	029b      	lsls	r3, r3, #10
 8002be6:	4013      	ands	r3, r2
 8002be8:	d003      	beq.n	8002bf2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002bf2:	4b19      	ldr	r3, [pc, #100]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002bf4:	693a      	ldr	r2, [r7, #16]
 8002bf6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002bf8:	4b17      	ldr	r3, [pc, #92]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	43da      	mvns	r2, r3
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685a      	ldr	r2, [r3, #4]
 8002c0c:	2380      	movs	r3, #128	; 0x80
 8002c0e:	025b      	lsls	r3, r3, #9
 8002c10:	4013      	ands	r3, r2
 8002c12:	d003      	beq.n	8002c1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	; (8002c58 <HAL_GPIO_Init+0x2ec>)
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	3301      	adds	r3, #1
 8002c26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	40da      	lsrs	r2, r3
 8002c30:	1e13      	subs	r3, r2, #0
 8002c32:	d000      	beq.n	8002c36 <HAL_GPIO_Init+0x2ca>
 8002c34:	e6a2      	b.n	800297c <HAL_GPIO_Init+0x10>
  } 
}
 8002c36:	46c0      	nop			; (mov r8, r8)
 8002c38:	46c0      	nop			; (mov r8, r8)
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b006      	add	sp, #24
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000
 8002c44:	40010000 	.word	0x40010000
 8002c48:	48000400 	.word	0x48000400
 8002c4c:	48000800 	.word	0x48000800
 8002c50:	48000c00 	.word	0x48000c00
 8002c54:	48001000 	.word	0x48001000
 8002c58:	40010400 	.word	0x40010400

08002c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	000a      	movs	r2, r1
 8002c66:	1cbb      	adds	r3, r7, #2
 8002c68:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	1cba      	adds	r2, r7, #2
 8002c70:	8812      	ldrh	r2, [r2, #0]
 8002c72:	4013      	ands	r3, r2
 8002c74:	d004      	beq.n	8002c80 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002c76:	230f      	movs	r3, #15
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e003      	b.n	8002c88 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c80:	230f      	movs	r3, #15
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2200      	movs	r2, #0
 8002c86:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002c88:	230f      	movs	r3, #15
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	781b      	ldrb	r3, [r3, #0]
  }
 8002c8e:	0018      	movs	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	b004      	add	sp, #16
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	0008      	movs	r0, r1
 8002ca0:	0011      	movs	r1, r2
 8002ca2:	1cbb      	adds	r3, r7, #2
 8002ca4:	1c02      	adds	r2, r0, #0
 8002ca6:	801a      	strh	r2, [r3, #0]
 8002ca8:	1c7b      	adds	r3, r7, #1
 8002caa:	1c0a      	adds	r2, r1, #0
 8002cac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cae:	1c7b      	adds	r3, r7, #1
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d004      	beq.n	8002cc0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cb6:	1cbb      	adds	r3, r7, #2
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cbe:	e003      	b.n	8002cc8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc0:	1cbb      	adds	r3, r7, #2
 8002cc2:	881a      	ldrh	r2, [r3, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cc8:	46c0      	nop			; (mov r8, r8)
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	b002      	add	sp, #8
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	000a      	movs	r2, r1
 8002cda:	1cbb      	adds	r3, r7, #2
 8002cdc:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ce4:	1cbb      	adds	r3, r7, #2
 8002ce6:	881b      	ldrh	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4013      	ands	r3, r2
 8002cec:	041a      	lsls	r2, r3, #16
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	1cb9      	adds	r1, r7, #2
 8002cf4:	8809      	ldrh	r1, [r1, #0]
 8002cf6:	400b      	ands	r3, r1
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b004      	add	sp, #16
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	0002      	movs	r2, r0
 8002d10:	1dbb      	adds	r3, r7, #6
 8002d12:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	1dba      	adds	r2, r7, #6
 8002d1a:	8812      	ldrh	r2, [r2, #0]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d008      	beq.n	8002d32 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_GPIO_EXTI_IRQHandler+0x34>)
 8002d22:	1dba      	adds	r2, r7, #6
 8002d24:	8812      	ldrh	r2, [r2, #0]
 8002d26:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d28:	1dbb      	adds	r3, r7, #6
 8002d2a:	881b      	ldrh	r3, [r3, #0]
 8002d2c:	0018      	movs	r0, r3
 8002d2e:	f7ff f903 	bl	8001f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	46bd      	mov	sp, r7
 8002d36:	b002      	add	sp, #8
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	46c0      	nop			; (mov r8, r8)
 8002d3c:	40010400 	.word	0x40010400

08002d40 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d42:	b08b      	sub	sp, #44	; 0x2c
 8002d44:	af06      	add	r7, sp, #24
 8002d46:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e0f0      	b.n	8002f34 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	4a79      	ldr	r2, [pc, #484]	; (8002f3c <HAL_PCD_Init+0x1fc>)
 8002d56:	5c9b      	ldrb	r3, [r3, r2]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d108      	bne.n	8002d70 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	23aa      	movs	r3, #170	; 0xaa
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	2100      	movs	r1, #0
 8002d66:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f009 fa28 	bl	800c1c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a72      	ldr	r2, [pc, #456]	; (8002f3c <HAL_PCD_Init+0x1fc>)
 8002d74:	2103      	movs	r1, #3
 8002d76:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f005 f9c1 	bl	8008104 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d82:	230f      	movs	r3, #15
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2200      	movs	r2, #0
 8002d88:	701a      	strb	r2, [r3, #0]
 8002d8a:	e049      	b.n	8002e20 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d8c:	200f      	movs	r0, #15
 8002d8e:	183b      	adds	r3, r7, r0
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	1c5a      	adds	r2, r3, #1
 8002d96:	0013      	movs	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	189b      	adds	r3, r3, r2
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	18cb      	adds	r3, r1, r3
 8002da0:	3301      	adds	r3, #1
 8002da2:	2201      	movs	r2, #1
 8002da4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002da6:	183b      	adds	r3, r7, r0
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	1c5a      	adds	r2, r3, #1
 8002dae:	0013      	movs	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	189b      	adds	r3, r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	183a      	adds	r2, r7, r0
 8002db8:	7812      	ldrb	r2, [r2, #0]
 8002dba:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002dbc:	183b      	adds	r3, r7, r0
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	1c5a      	adds	r2, r3, #1
 8002dc4:	0013      	movs	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	189b      	adds	r3, r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	18cb      	adds	r3, r1, r3
 8002dce:	3303      	adds	r3, #3
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002dd4:	183b      	adds	r3, r7, r0
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	0013      	movs	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	18cb      	adds	r3, r1, r3
 8002de4:	3338      	adds	r3, #56	; 0x38
 8002de6:	2200      	movs	r2, #0
 8002de8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002dea:	183b      	adds	r3, r7, r0
 8002dec:	781a      	ldrb	r2, [r3, #0]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	0013      	movs	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	189b      	adds	r3, r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	18cb      	adds	r3, r1, r3
 8002dfa:	333c      	adds	r3, #60	; 0x3c
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002e00:	183b      	adds	r3, r7, r0
 8002e02:	781a      	ldrb	r2, [r3, #0]
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	0013      	movs	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	189b      	adds	r3, r3, r2
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	18cb      	adds	r3, r1, r3
 8002e10:	3340      	adds	r3, #64	; 0x40
 8002e12:	2200      	movs	r2, #0
 8002e14:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e16:	183b      	adds	r3, r7, r0
 8002e18:	781a      	ldrb	r2, [r3, #0]
 8002e1a:	183b      	adds	r3, r7, r0
 8002e1c:	3201      	adds	r2, #1
 8002e1e:	701a      	strb	r2, [r3, #0]
 8002e20:	210f      	movs	r1, #15
 8002e22:	187b      	adds	r3, r7, r1
 8002e24:	781a      	ldrb	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d3ae      	bcc.n	8002d8c <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e2e:	187b      	adds	r3, r7, r1
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
 8002e34:	e056      	b.n	8002ee4 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002e36:	240f      	movs	r4, #15
 8002e38:	193b      	adds	r3, r7, r4
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	236a      	movs	r3, #106	; 0x6a
 8002e40:	33ff      	adds	r3, #255	; 0xff
 8002e42:	0019      	movs	r1, r3
 8002e44:	0013      	movs	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	189b      	adds	r3, r3, r2
 8002e4a:	00db      	lsls	r3, r3, #3
 8002e4c:	18c3      	adds	r3, r0, r3
 8002e4e:	185b      	adds	r3, r3, r1
 8002e50:	2200      	movs	r2, #0
 8002e52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002e54:	193b      	adds	r3, r7, r4
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	23b4      	movs	r3, #180	; 0xb4
 8002e5c:	0059      	lsls	r1, r3, #1
 8002e5e:	0013      	movs	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	189b      	adds	r3, r3, r2
 8002e64:	00db      	lsls	r3, r3, #3
 8002e66:	18c3      	adds	r3, r0, r3
 8002e68:	185b      	adds	r3, r3, r1
 8002e6a:	193a      	adds	r2, r7, r4
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002e70:	193b      	adds	r3, r7, r4
 8002e72:	781a      	ldrb	r2, [r3, #0]
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	236c      	movs	r3, #108	; 0x6c
 8002e78:	33ff      	adds	r3, #255	; 0xff
 8002e7a:	0019      	movs	r1, r3
 8002e7c:	0013      	movs	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	189b      	adds	r3, r3, r2
 8002e82:	00db      	lsls	r3, r3, #3
 8002e84:	18c3      	adds	r3, r0, r3
 8002e86:	185b      	adds	r3, r3, r1
 8002e88:	2200      	movs	r2, #0
 8002e8a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002e8c:	193b      	adds	r3, r7, r4
 8002e8e:	781a      	ldrb	r2, [r3, #0]
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	23bc      	movs	r3, #188	; 0xbc
 8002e94:	0059      	lsls	r1, r3, #1
 8002e96:	0013      	movs	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	189b      	adds	r3, r3, r2
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	18c3      	adds	r3, r0, r3
 8002ea0:	185b      	adds	r3, r3, r1
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002ea6:	193b      	adds	r3, r7, r4
 8002ea8:	781a      	ldrb	r2, [r3, #0]
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	23be      	movs	r3, #190	; 0xbe
 8002eae:	0059      	lsls	r1, r3, #1
 8002eb0:	0013      	movs	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	189b      	adds	r3, r3, r2
 8002eb6:	00db      	lsls	r3, r3, #3
 8002eb8:	18c3      	adds	r3, r0, r3
 8002eba:	185b      	adds	r3, r3, r1
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ec0:	193b      	adds	r3, r7, r4
 8002ec2:	781a      	ldrb	r2, [r3, #0]
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	23c0      	movs	r3, #192	; 0xc0
 8002ec8:	0059      	lsls	r1, r3, #1
 8002eca:	0013      	movs	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	18c3      	adds	r3, r0, r3
 8002ed4:	185b      	adds	r3, r3, r1
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eda:	193b      	adds	r3, r7, r4
 8002edc:	781a      	ldrb	r2, [r3, #0]
 8002ede:	193b      	adds	r3, r7, r4
 8002ee0:	3201      	adds	r2, #1
 8002ee2:	701a      	strb	r2, [r3, #0]
 8002ee4:	230f      	movs	r3, #15
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3a1      	bcc.n	8002e36 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6818      	ldr	r0, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	466a      	mov	r2, sp
 8002efa:	0011      	movs	r1, r2
 8002efc:	001a      	movs	r2, r3
 8002efe:	3210      	adds	r2, #16
 8002f00:	ca70      	ldmia	r2!, {r4, r5, r6}
 8002f02:	c170      	stmia	r1!, {r4, r5, r6}
 8002f04:	ca30      	ldmia	r2!, {r4, r5}
 8002f06:	c130      	stmia	r1!, {r4, r5}
 8002f08:	6859      	ldr	r1, [r3, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	f005 f913 	bl	8008138 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2224      	movs	r2, #36	; 0x24
 8002f16:	2100      	movs	r1, #0
 8002f18:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a07      	ldr	r2, [pc, #28]	; (8002f3c <HAL_PCD_Init+0x1fc>)
 8002f1e:	2101      	movs	r1, #1
 8002f20:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d103      	bne.n	8002f32 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	f001 fd23 	bl	8004978 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	0018      	movs	r0, r3
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b005      	add	sp, #20
 8002f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3c:	000002a9 	.word	0x000002a9

08002f40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	23aa      	movs	r3, #170	; 0xaa
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_PCD_Start+0x18>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e014      	b.n	8002f82 <HAL_PCD_Start+0x42>
 8002f58:	687a      	ldr	r2, [r7, #4]
 8002f5a:	23aa      	movs	r3, #170	; 0xaa
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	2101      	movs	r1, #1
 8002f60:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f005 f8b6 	bl	80080d8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f007 f8b9 	bl	800a0e8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	23aa      	movs	r3, #170	; 0xaa
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8002f80:	2300      	movs	r3, #0
}
 8002f82:	0018      	movs	r0, r3
 8002f84:	46bd      	mov	sp, r7
 8002f86:	b002      	add	sp, #8
 8002f88:	bd80      	pop	{r7, pc}
	...

08002f8c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0018      	movs	r0, r3
 8002f9a:	f007 f8bb 	bl	800a114 <USB_ReadInterrupts>
 8002f9e:	0003      	movs	r3, r0
 8002fa0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	021b      	lsls	r3, r3, #8
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d004      	beq.n	8002fb6 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fb62 	bl	8003678 <PCD_EP_ISR_Handler>

    return;
 8002fb4:	e11d      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	2380      	movs	r3, #128	; 0x80
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	d015      	beq.n	8002fec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2244      	movs	r2, #68	; 0x44
 8002fc6:	5a9b      	ldrh	r3, [r3, r2]
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	498a      	ldr	r1, [pc, #552]	; (80031f8 <HAL_PCD_IRQHandler+0x26c>)
 8002fd0:	400a      	ands	r2, r1
 8002fd2:	b291      	uxth	r1, r2
 8002fd4:	2244      	movs	r2, #68	; 0x44
 8002fd6:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f009 f97b 	bl	800c2d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 f915 	bl	8003214 <HAL_PCD_SetAddress>

    return;
 8002fea:	e102      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	2380      	movs	r3, #128	; 0x80
 8002ff0:	01db      	lsls	r3, r3, #7
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d00c      	beq.n	8003010 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2244      	movs	r2, #68	; 0x44
 8002ffc:	5a9b      	ldrh	r3, [r3, r2]
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	497d      	ldr	r1, [pc, #500]	; (80031fc <HAL_PCD_IRQHandler+0x270>)
 8003006:	400a      	ands	r2, r1
 8003008:	b291      	uxth	r1, r2
 800300a:	2244      	movs	r2, #68	; 0x44
 800300c:	5299      	strh	r1, [r3, r2]

    return;
 800300e:	e0f0      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	019b      	lsls	r3, r3, #6
 8003016:	4013      	ands	r3, r2
 8003018:	d00c      	beq.n	8003034 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2244      	movs	r2, #68	; 0x44
 8003020:	5a9b      	ldrh	r3, [r3, r2]
 8003022:	b29a      	uxth	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4975      	ldr	r1, [pc, #468]	; (8003200 <HAL_PCD_IRQHandler+0x274>)
 800302a:	400a      	ands	r2, r1
 800302c:	b291      	uxth	r1, r2
 800302e:	2244      	movs	r2, #68	; 0x44
 8003030:	5299      	strh	r1, [r3, r2]

    return;
 8003032:	e0de      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8003034:	68fa      	ldr	r2, [r7, #12]
 8003036:	2380      	movs	r3, #128	; 0x80
 8003038:	015b      	lsls	r3, r3, #5
 800303a:	4013      	ands	r3, r2
 800303c:	d038      	beq.n	80030b0 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2240      	movs	r2, #64	; 0x40
 8003044:	5a9b      	ldrh	r3, [r3, r2]
 8003046:	b29a      	uxth	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2104      	movs	r1, #4
 800304e:	438a      	bics	r2, r1
 8003050:	b291      	uxth	r1, r2
 8003052:	2240      	movs	r2, #64	; 0x40
 8003054:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2240      	movs	r2, #64	; 0x40
 800305c:	5a9b      	ldrh	r3, [r3, r2]
 800305e:	b29a      	uxth	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2108      	movs	r1, #8
 8003066:	438a      	bics	r2, r1
 8003068:	b291      	uxth	r1, r2
 800306a:	2240      	movs	r2, #64	; 0x40
 800306c:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	23b8      	movs	r3, #184	; 0xb8
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	5cd3      	ldrb	r3, [r2, r3]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d109      	bne.n	800308e <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	23b8      	movs	r3, #184	; 0xb8
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	2100      	movs	r1, #0
 8003082:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2100      	movs	r1, #0
 8003088:	0018      	movs	r0, r3
 800308a:	f001 fc9f 	bl	80049cc <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	0018      	movs	r0, r3
 8003092:	f009 f961 	bl	800c358 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2244      	movs	r2, #68	; 0x44
 800309c:	5a9b      	ldrh	r3, [r3, r2]
 800309e:	b29a      	uxth	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4957      	ldr	r1, [pc, #348]	; (8003204 <HAL_PCD_IRQHandler+0x278>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	b291      	uxth	r1, r2
 80030aa:	2244      	movs	r2, #68	; 0x44
 80030ac:	5299      	strh	r1, [r3, r2]

    return;
 80030ae:	e0a0      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	4013      	ands	r3, r2
 80030b8:	d028      	beq.n	800310c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2240      	movs	r2, #64	; 0x40
 80030c0:	5a9b      	ldrh	r3, [r3, r2]
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2108      	movs	r1, #8
 80030ca:	430a      	orrs	r2, r1
 80030cc:	b291      	uxth	r1, r2
 80030ce:	2240      	movs	r2, #64	; 0x40
 80030d0:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2244      	movs	r2, #68	; 0x44
 80030d8:	5a9b      	ldrh	r3, [r3, r2]
 80030da:	b29a      	uxth	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4949      	ldr	r1, [pc, #292]	; (8003208 <HAL_PCD_IRQHandler+0x27c>)
 80030e2:	400a      	ands	r2, r1
 80030e4:	b291      	uxth	r1, r2
 80030e6:	2244      	movs	r2, #68	; 0x44
 80030e8:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	5a9b      	ldrh	r3, [r3, r2]
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2104      	movs	r1, #4
 80030fa:	430a      	orrs	r2, r1
 80030fc:	b291      	uxth	r1, r2
 80030fe:	2240      	movs	r2, #64	; 0x40
 8003100:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	0018      	movs	r0, r3
 8003106:	f009 f90b 	bl	800c320 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800310a:	e072      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2280      	movs	r2, #128	; 0x80
 8003110:	4013      	ands	r3, r2
 8003112:	d046      	beq.n	80031a2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2244      	movs	r2, #68	; 0x44
 800311a:	5a9b      	ldrh	r3, [r3, r2]
 800311c:	b29a      	uxth	r2, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2180      	movs	r1, #128	; 0x80
 8003124:	438a      	bics	r2, r1
 8003126:	b291      	uxth	r1, r2
 8003128:	2244      	movs	r2, #68	; 0x44
 800312a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	23b8      	movs	r3, #184	; 0xb8
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d12f      	bne.n	8003198 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2240      	movs	r2, #64	; 0x40
 800313e:	5a9b      	ldrh	r3, [r3, r2]
 8003140:	b29a      	uxth	r2, r3
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2104      	movs	r1, #4
 8003148:	430a      	orrs	r2, r1
 800314a:	b291      	uxth	r1, r2
 800314c:	2240      	movs	r2, #64	; 0x40
 800314e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2240      	movs	r2, #64	; 0x40
 8003156:	5a9b      	ldrh	r3, [r3, r2]
 8003158:	b29a      	uxth	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	2108      	movs	r1, #8
 8003160:	430a      	orrs	r2, r1
 8003162:	b291      	uxth	r1, r2
 8003164:	2240      	movs	r2, #64	; 0x40
 8003166:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	23b8      	movs	r3, #184	; 0xb8
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	2101      	movs	r1, #1
 8003170:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2254      	movs	r2, #84	; 0x54
 8003178:	5a9b      	ldrh	r3, [r3, r2]
 800317a:	b29b      	uxth	r3, r3
 800317c:	089b      	lsrs	r3, r3, #2
 800317e:	223c      	movs	r2, #60	; 0x3c
 8003180:	4013      	ands	r3, r2
 8003182:	0019      	movs	r1, r3
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	23b9      	movs	r3, #185	; 0xb9
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2101      	movs	r1, #1
 8003190:	0018      	movs	r0, r3
 8003192:	f001 fc1b 	bl	80049cc <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003196:	e02c      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	0018      	movs	r0, r3
 800319c:	f009 f8c0 	bl	800c320 <HAL_PCD_SuspendCallback>
    return;
 80031a0:	e027      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	2380      	movs	r3, #128	; 0x80
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4013      	ands	r3, r2
 80031aa:	d010      	beq.n	80031ce <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2244      	movs	r2, #68	; 0x44
 80031b2:	5a9b      	ldrh	r3, [r3, r2]
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4914      	ldr	r1, [pc, #80]	; (800320c <HAL_PCD_IRQHandler+0x280>)
 80031bc:	400a      	ands	r2, r1
 80031be:	b291      	uxth	r1, r2
 80031c0:	2244      	movs	r2, #68	; 0x44
 80031c2:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	0018      	movs	r0, r3
 80031c8:	f009 f876 	bl	800c2b8 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80031cc:	e011      	b.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	2380      	movs	r3, #128	; 0x80
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	4013      	ands	r3, r2
 80031d6:	d00c      	beq.n	80031f2 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2244      	movs	r2, #68	; 0x44
 80031de:	5a9b      	ldrh	r3, [r3, r2]
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	490a      	ldr	r1, [pc, #40]	; (8003210 <HAL_PCD_IRQHandler+0x284>)
 80031e8:	400a      	ands	r2, r1
 80031ea:	b291      	uxth	r1, r2
 80031ec:	2244      	movs	r2, #68	; 0x44
 80031ee:	5299      	strh	r1, [r3, r2]

    return;
 80031f0:	46c0      	nop			; (mov r8, r8)
  }
}
 80031f2:	46bd      	mov	sp, r7
 80031f4:	b004      	add	sp, #16
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	fffffbff 	.word	0xfffffbff
 80031fc:	ffffbfff 	.word	0xffffbfff
 8003200:	ffffdfff 	.word	0xffffdfff
 8003204:	ffffefff 	.word	0xffffefff
 8003208:	fffff7ff 	.word	0xfffff7ff
 800320c:	fffffdff 	.word	0xfffffdff
 8003210:	fffffeff 	.word	0xfffffeff

08003214 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
 800321c:	000a      	movs	r2, r1
 800321e:	1cfb      	adds	r3, r7, #3
 8003220:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8003222:	687a      	ldr	r2, [r7, #4]
 8003224:	23aa      	movs	r3, #170	; 0xaa
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	5cd3      	ldrb	r3, [r2, r3]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_PCD_SetAddress+0x1e>
 800322e:	2302      	movs	r3, #2
 8003230:	e017      	b.n	8003262 <HAL_PCD_SetAddress+0x4e>
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	23aa      	movs	r3, #170	; 0xaa
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	2101      	movs	r1, #1
 800323a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	1cfa      	adds	r2, r7, #3
 8003240:	2124      	movs	r1, #36	; 0x24
 8003242:	7812      	ldrb	r2, [r2, #0]
 8003244:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	1cfb      	adds	r3, r7, #3
 800324c:	781b      	ldrb	r3, [r3, #0]
 800324e:	0019      	movs	r1, r3
 8003250:	0010      	movs	r0, r2
 8003252:	f006 ff35 	bl	800a0c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	23aa      	movs	r3, #170	; 0xaa
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	2100      	movs	r1, #0
 800325e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	0018      	movs	r0, r3
 8003264:	46bd      	mov	sp, r7
 8003266:	b002      	add	sp, #8
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800326a:	b590      	push	{r4, r7, lr}
 800326c:	b085      	sub	sp, #20
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
 8003272:	000c      	movs	r4, r1
 8003274:	0010      	movs	r0, r2
 8003276:	0019      	movs	r1, r3
 8003278:	1cfb      	adds	r3, r7, #3
 800327a:	1c22      	adds	r2, r4, #0
 800327c:	701a      	strb	r2, [r3, #0]
 800327e:	003b      	movs	r3, r7
 8003280:	1c02      	adds	r2, r0, #0
 8003282:	801a      	strh	r2, [r3, #0]
 8003284:	1cbb      	adds	r3, r7, #2
 8003286:	1c0a      	adds	r2, r1, #0
 8003288:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800328a:	230b      	movs	r3, #11
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	2200      	movs	r2, #0
 8003290:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003292:	1cfb      	adds	r3, r7, #3
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	b25b      	sxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	da0f      	bge.n	80032bc <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800329c:	1cfb      	adds	r3, r7, #3
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2207      	movs	r2, #7
 80032a2:	4013      	ands	r3, r2
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	0013      	movs	r3, r2
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	189b      	adds	r3, r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	18d3      	adds	r3, r2, r3
 80032b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	705a      	strb	r2, [r3, #1]
 80032ba:	e00f      	b.n	80032dc <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032bc:	1cfb      	adds	r3, r7, #3
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2207      	movs	r2, #7
 80032c2:	401a      	ands	r2, r3
 80032c4:	0013      	movs	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	189b      	adds	r3, r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	3369      	adds	r3, #105	; 0x69
 80032ce:	33ff      	adds	r3, #255	; 0xff
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	18d3      	adds	r3, r2, r3
 80032d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2200      	movs	r2, #0
 80032da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032dc:	1cfb      	adds	r3, r7, #3
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2207      	movs	r2, #7
 80032e2:	4013      	ands	r3, r2
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032ea:	003b      	movs	r3, r7
 80032ec:	881a      	ldrh	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	1cba      	adds	r2, r7, #2
 80032f6:	7812      	ldrb	r2, [r2, #0]
 80032f8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032fa:	1cbb      	adds	r3, r7, #2
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d102      	bne.n	8003308 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	23aa      	movs	r3, #170	; 0xaa
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	5cd3      	ldrb	r3, [r2, r3]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d101      	bne.n	8003318 <HAL_PCD_EP_Open+0xae>
 8003314:	2302      	movs	r3, #2
 8003316:	e013      	b.n	8003340 <HAL_PCD_EP_Open+0xd6>
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	23aa      	movs	r3, #170	; 0xaa
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	2101      	movs	r1, #1
 8003320:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	0011      	movs	r1, r2
 800332a:	0018      	movs	r0, r3
 800332c:	f004 ff2c 	bl	8008188 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003330:	687a      	ldr	r2, [r7, #4]
 8003332:	23aa      	movs	r3, #170	; 0xaa
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	2100      	movs	r1, #0
 8003338:	54d1      	strb	r1, [r2, r3]

  return ret;
 800333a:	230b      	movs	r3, #11
 800333c:	18fb      	adds	r3, r7, r3
 800333e:	781b      	ldrb	r3, [r3, #0]
}
 8003340:	0018      	movs	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	b005      	add	sp, #20
 8003346:	bd90      	pop	{r4, r7, pc}

08003348 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	000a      	movs	r2, r1
 8003352:	1cfb      	adds	r3, r7, #3
 8003354:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003356:	1cfb      	adds	r3, r7, #3
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b25b      	sxtb	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	da0f      	bge.n	8003380 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003360:	1cfb      	adds	r3, r7, #3
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	2207      	movs	r2, #7
 8003366:	4013      	ands	r3, r2
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	0013      	movs	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	189b      	adds	r3, r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	18d3      	adds	r3, r2, r3
 8003376:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2201      	movs	r2, #1
 800337c:	705a      	strb	r2, [r3, #1]
 800337e:	e00f      	b.n	80033a0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003380:	1cfb      	adds	r3, r7, #3
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2207      	movs	r2, #7
 8003386:	401a      	ands	r2, r3
 8003388:	0013      	movs	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	189b      	adds	r3, r3, r2
 800338e:	00db      	lsls	r3, r3, #3
 8003390:	3369      	adds	r3, #105	; 0x69
 8003392:	33ff      	adds	r3, #255	; 0xff
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	18d3      	adds	r3, r2, r3
 8003398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80033a0:	1cfb      	adds	r3, r7, #3
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2207      	movs	r2, #7
 80033a6:	4013      	ands	r3, r2
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	23aa      	movs	r3, #170	; 0xaa
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	5cd3      	ldrb	r3, [r2, r3]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d101      	bne.n	80033be <HAL_PCD_EP_Close+0x76>
 80033ba:	2302      	movs	r3, #2
 80033bc:	e011      	b.n	80033e2 <HAL_PCD_EP_Close+0x9a>
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	23aa      	movs	r3, #170	; 0xaa
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	2101      	movs	r1, #1
 80033c6:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	0011      	movs	r1, r2
 80033d0:	0018      	movs	r0, r3
 80033d2:	f005 fa7b 	bl	80088cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	23aa      	movs	r3, #170	; 0xaa
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	2100      	movs	r1, #0
 80033de:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	0018      	movs	r0, r3
 80033e4:	46bd      	mov	sp, r7
 80033e6:	b004      	add	sp, #16
 80033e8:	bd80      	pop	{r7, pc}

080033ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b086      	sub	sp, #24
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	607a      	str	r2, [r7, #4]
 80033f4:	603b      	str	r3, [r7, #0]
 80033f6:	200b      	movs	r0, #11
 80033f8:	183b      	adds	r3, r7, r0
 80033fa:	1c0a      	adds	r2, r1, #0
 80033fc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033fe:	0001      	movs	r1, r0
 8003400:	187b      	adds	r3, r7, r1
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	2207      	movs	r2, #7
 8003406:	401a      	ands	r2, r3
 8003408:	0013      	movs	r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	189b      	adds	r3, r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	3369      	adds	r3, #105	; 0x69
 8003412:	33ff      	adds	r3, #255	; 0xff
 8003414:	68fa      	ldr	r2, [r7, #12]
 8003416:	18d3      	adds	r3, r2, r3
 8003418:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	2200      	movs	r2, #0
 800342a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2200      	movs	r2, #0
 8003430:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003432:	187b      	adds	r3, r7, r1
 8003434:	781b      	ldrb	r3, [r3, #0]
 8003436:	2207      	movs	r2, #7
 8003438:	4013      	ands	r3, r2
 800343a:	b2da      	uxtb	r2, r3
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	697a      	ldr	r2, [r7, #20]
 8003446:	0011      	movs	r1, r2
 8003448:	0018      	movs	r0, r3
 800344a:	f005 fbff 	bl	8008c4c <USB_EPStartXfer>

  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	0018      	movs	r0, r3
 8003452:	46bd      	mov	sp, r7
 8003454:	b006      	add	sp, #24
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	000a      	movs	r2, r1
 8003462:	1cfb      	adds	r3, r7, #3
 8003464:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003466:	1cfb      	adds	r3, r7, #3
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	2207      	movs	r2, #7
 800346c:	401a      	ands	r2, r3
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	23c2      	movs	r3, #194	; 0xc2
 8003472:	0059      	lsls	r1, r3, #1
 8003474:	0013      	movs	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	189b      	adds	r3, r3, r2
 800347a:	00db      	lsls	r3, r3, #3
 800347c:	18c3      	adds	r3, r0, r3
 800347e:	185b      	adds	r3, r3, r1
 8003480:	681b      	ldr	r3, [r3, #0]
}
 8003482:	0018      	movs	r0, r3
 8003484:	46bd      	mov	sp, r7
 8003486:	b002      	add	sp, #8
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b086      	sub	sp, #24
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	200b      	movs	r0, #11
 8003498:	183b      	adds	r3, r7, r0
 800349a:	1c0a      	adds	r2, r1, #0
 800349c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	183b      	adds	r3, r7, r0
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2207      	movs	r2, #7
 80034a4:	4013      	ands	r3, r2
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	0013      	movs	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	189b      	adds	r3, r3, r2
 80034ae:	00db      	lsls	r3, r3, #3
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	18d3      	adds	r3, r2, r3
 80034b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2224      	movs	r2, #36	; 0x24
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	2200      	movs	r2, #0
 80034d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	2201      	movs	r2, #1
 80034da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034dc:	183b      	adds	r3, r7, r0
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2207      	movs	r2, #7
 80034e2:	4013      	ands	r3, r2
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	0011      	movs	r1, r2
 80034f2:	0018      	movs	r0, r3
 80034f4:	f005 fbaa 	bl	8008c4c <USB_EPStartXfer>

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b006      	add	sp, #24
 8003500:	bd80      	pop	{r7, pc}

08003502 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
 800350a:	000a      	movs	r2, r1
 800350c:	1cfb      	adds	r3, r7, #3
 800350e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003510:	1cfb      	adds	r3, r7, #3
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	2207      	movs	r2, #7
 8003516:	401a      	ands	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	429a      	cmp	r2, r3
 800351e:	d901      	bls.n	8003524 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e046      	b.n	80035b2 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003524:	1cfb      	adds	r3, r7, #3
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	b25b      	sxtb	r3, r3
 800352a:	2b00      	cmp	r3, #0
 800352c:	da0f      	bge.n	800354e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800352e:	1cfb      	adds	r3, r7, #3
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2207      	movs	r2, #7
 8003534:	4013      	ands	r3, r2
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	0013      	movs	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	189b      	adds	r3, r3, r2
 800353e:	00db      	lsls	r3, r3, #3
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	18d3      	adds	r3, r2, r3
 8003544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2201      	movs	r2, #1
 800354a:	705a      	strb	r2, [r3, #1]
 800354c:	e00d      	b.n	800356a <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800354e:	1cfb      	adds	r3, r7, #3
 8003550:	781a      	ldrb	r2, [r3, #0]
 8003552:	0013      	movs	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	189b      	adds	r3, r3, r2
 8003558:	00db      	lsls	r3, r3, #3
 800355a:	3369      	adds	r3, #105	; 0x69
 800355c:	33ff      	adds	r3, #255	; 0xff
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	18d3      	adds	r3, r2, r3
 8003562:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2201      	movs	r2, #1
 800356e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003570:	1cfb      	adds	r3, r7, #3
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2207      	movs	r2, #7
 8003576:	4013      	ands	r3, r2
 8003578:	b2da      	uxtb	r2, r3
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	23aa      	movs	r3, #170	; 0xaa
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_PCD_EP_SetStall+0x8c>
 800358a:	2302      	movs	r3, #2
 800358c:	e011      	b.n	80035b2 <HAL_PCD_EP_SetStall+0xb0>
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	23aa      	movs	r3, #170	; 0xaa
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	2101      	movs	r1, #1
 8003596:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	0011      	movs	r1, r2
 80035a0:	0018      	movs	r0, r3
 80035a2:	f006 fc8b 	bl	8009ebc <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	23aa      	movs	r3, #170	; 0xaa
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	2100      	movs	r1, #0
 80035ae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	0018      	movs	r0, r3
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b004      	add	sp, #16
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	000a      	movs	r2, r1
 80035c4:	1cfb      	adds	r3, r7, #3
 80035c6:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035c8:	1cfb      	adds	r3, r7, #3
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	220f      	movs	r2, #15
 80035ce:	401a      	ands	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d901      	bls.n	80035dc <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e048      	b.n	800366e <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80035dc:	1cfb      	adds	r3, r7, #3
 80035de:	781b      	ldrb	r3, [r3, #0]
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	da0f      	bge.n	8003606 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035e6:	1cfb      	adds	r3, r7, #3
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2207      	movs	r2, #7
 80035ec:	4013      	ands	r3, r2
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	0013      	movs	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	189b      	adds	r3, r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	18d3      	adds	r3, r2, r3
 80035fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2201      	movs	r2, #1
 8003602:	705a      	strb	r2, [r3, #1]
 8003604:	e00f      	b.n	8003626 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003606:	1cfb      	adds	r3, r7, #3
 8003608:	781b      	ldrb	r3, [r3, #0]
 800360a:	2207      	movs	r2, #7
 800360c:	401a      	ands	r2, r3
 800360e:	0013      	movs	r3, r2
 8003610:	009b      	lsls	r3, r3, #2
 8003612:	189b      	adds	r3, r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	3369      	adds	r3, #105	; 0x69
 8003618:	33ff      	adds	r3, #255	; 0xff
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	18d3      	adds	r3, r2, r3
 800361e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800362c:	1cfb      	adds	r3, r7, #3
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2207      	movs	r2, #7
 8003632:	4013      	ands	r3, r2
 8003634:	b2da      	uxtb	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	23aa      	movs	r3, #170	; 0xaa
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	5cd3      	ldrb	r3, [r2, r3]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d101      	bne.n	800364a <HAL_PCD_EP_ClrStall+0x90>
 8003646:	2302      	movs	r3, #2
 8003648:	e011      	b.n	800366e <HAL_PCD_EP_ClrStall+0xb4>
 800364a:	687a      	ldr	r2, [r7, #4]
 800364c:	23aa      	movs	r3, #170	; 0xaa
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	2101      	movs	r1, #1
 8003652:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	0011      	movs	r1, r2
 800365c:	0018      	movs	r0, r3
 800365e:	f006 fc7d 	bl	8009f5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	23aa      	movs	r3, #170	; 0xaa
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	2100      	movs	r1, #0
 800366a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}
	...

08003678 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003678:	b5b0      	push	{r4, r5, r7, lr}
 800367a:	b096      	sub	sp, #88	; 0x58
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003680:	f000 fbec 	bl	8003e5c <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	204e      	movs	r0, #78	; 0x4e
 800368a:	183b      	adds	r3, r7, r0
 800368c:	2144      	movs	r1, #68	; 0x44
 800368e:	5a52      	ldrh	r2, [r2, r1]
 8003690:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003692:	183b      	adds	r3, r7, r0
 8003694:	881b      	ldrh	r3, [r3, #0]
 8003696:	b2da      	uxtb	r2, r3
 8003698:	244d      	movs	r4, #77	; 0x4d
 800369a:	193b      	adds	r3, r7, r4
 800369c:	210f      	movs	r1, #15
 800369e:	400a      	ands	r2, r1
 80036a0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d000      	beq.n	80036ac <PCD_EP_ISR_Handler+0x34>
 80036aa:	e18f      	b.n	80039cc <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80036ac:	183b      	adds	r3, r7, r0
 80036ae:	881b      	ldrh	r3, [r3, #0]
 80036b0:	2210      	movs	r2, #16
 80036b2:	4013      	ands	r3, r2
 80036b4:	d155      	bne.n	8003762 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29a      	uxth	r2, r3
 80036be:	200e      	movs	r0, #14
 80036c0:	183b      	adds	r3, r7, r0
 80036c2:	49bb      	ldr	r1, [pc, #748]	; (80039b0 <PCD_EP_ISR_Handler+0x338>)
 80036c4:	400a      	ands	r2, r1
 80036c6:	801a      	strh	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	183a      	adds	r2, r7, r0
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	49b8      	ldr	r1, [pc, #736]	; (80039b4 <PCD_EP_ISR_Handler+0x33c>)
 80036d2:	430a      	orrs	r2, r1
 80036d4:	b292      	uxth	r2, r2
 80036d6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	3328      	adds	r3, #40	; 0x28
 80036dc:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2250      	movs	r2, #80	; 0x50
 80036e4:	5a9b      	ldrh	r3, [r3, r2]
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	001a      	movs	r2, r3
 80036ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	00db      	lsls	r3, r3, #3
 80036f0:	18d2      	adds	r2, r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	18d3      	adds	r3, r2, r3
 80036f8:	4aaf      	ldr	r2, [pc, #700]	; (80039b8 <PCD_EP_ISR_Handler+0x340>)
 80036fa:	4694      	mov	ip, r2
 80036fc:	4463      	add	r3, ip
 80036fe:	881b      	ldrh	r3, [r3, #0]
 8003700:	059b      	lsls	r3, r3, #22
 8003702:	0d9a      	lsrs	r2, r3, #22
 8003704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003706:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003708:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370a:	695a      	ldr	r2, [r3, #20]
 800370c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	18d2      	adds	r2, r2, r3
 8003712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003714:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2100      	movs	r1, #0
 800371a:	0018      	movs	r0, r3
 800371c:	f008 fdae 	bl	800c27c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	; 0x24
 8003724:	5c9b      	ldrb	r3, [r3, r2]
 8003726:	b2db      	uxtb	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <PCD_EP_ISR_Handler+0xb8>
 800372c:	f000 fb96 	bl	8003e5c <PCD_EP_ISR_Handler+0x7e4>
 8003730:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <PCD_EP_ISR_Handler+0xc4>
 8003738:	f000 fb90 	bl	8003e5c <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2224      	movs	r2, #36	; 0x24
 8003740:	5c9b      	ldrb	r3, [r3, r2]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2280      	movs	r2, #128	; 0x80
 8003746:	4252      	negs	r2, r2
 8003748:	4313      	orrs	r3, r2
 800374a:	b2da      	uxtb	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	b291      	uxth	r1, r2
 8003752:	224c      	movs	r2, #76	; 0x4c
 8003754:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2224      	movs	r2, #36	; 0x24
 800375a:	2100      	movs	r1, #0
 800375c:	5499      	strb	r1, [r3, r2]
 800375e:	f000 fb7d 	bl	8003e5c <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3369      	adds	r3, #105	; 0x69
 8003766:	33ff      	adds	r3, #255	; 0xff
 8003768:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	214a      	movs	r1, #74	; 0x4a
 8003770:	187b      	adds	r3, r7, r1
 8003772:	8812      	ldrh	r2, [r2, #0]
 8003774:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003776:	187b      	adds	r3, r7, r1
 8003778:	881a      	ldrh	r2, [r3, #0]
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4013      	ands	r3, r2
 8003780:	d037      	beq.n	80037f2 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2250      	movs	r2, #80	; 0x50
 8003788:	5a9b      	ldrh	r3, [r3, r2]
 800378a:	b29b      	uxth	r3, r3
 800378c:	001a      	movs	r2, r3
 800378e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	18d2      	adds	r2, r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	18d3      	adds	r3, r2, r3
 800379c:	4a87      	ldr	r2, [pc, #540]	; (80039bc <PCD_EP_ISR_Handler+0x344>)
 800379e:	4694      	mov	ip, r2
 80037a0:	4463      	add	r3, ip
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	059b      	lsls	r3, r3, #22
 80037a6:	0d9a      	lsrs	r2, r3, #22
 80037a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037aa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	22ac      	movs	r2, #172	; 0xac
 80037b4:	0092      	lsls	r2, r2, #2
 80037b6:	1899      	adds	r1, r3, r2
 80037b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80037bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	f006 fcfe 	bl	800a1c2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	2010      	movs	r0, #16
 80037d0:	183b      	adds	r3, r7, r0
 80037d2:	497b      	ldr	r1, [pc, #492]	; (80039c0 <PCD_EP_ISR_Handler+0x348>)
 80037d4:	400a      	ands	r2, r1
 80037d6:	801a      	strh	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	183a      	adds	r2, r7, r0
 80037de:	8812      	ldrh	r2, [r2, #0]
 80037e0:	2180      	movs	r1, #128	; 0x80
 80037e2:	430a      	orrs	r2, r1
 80037e4:	b292      	uxth	r2, r2
 80037e6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f008 fd10 	bl	800c210 <HAL_PCD_SetupStageCallback>
 80037f0:	e334      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80037f2:	234a      	movs	r3, #74	; 0x4a
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2200      	movs	r2, #0
 80037f8:	5e9b      	ldrsh	r3, [r3, r2]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	db00      	blt.n	8003800 <PCD_EP_ISR_Handler+0x188>
 80037fe:	e32d      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	881b      	ldrh	r3, [r3, #0]
 8003806:	b29a      	uxth	r2, r3
 8003808:	201e      	movs	r0, #30
 800380a:	183b      	adds	r3, r7, r0
 800380c:	496c      	ldr	r1, [pc, #432]	; (80039c0 <PCD_EP_ISR_Handler+0x348>)
 800380e:	400a      	ands	r2, r1
 8003810:	801a      	strh	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	183a      	adds	r2, r7, r0
 8003818:	8812      	ldrh	r2, [r2, #0]
 800381a:	2180      	movs	r1, #128	; 0x80
 800381c:	430a      	orrs	r2, r1
 800381e:	b292      	uxth	r2, r2
 8003820:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	2250      	movs	r2, #80	; 0x50
 8003828:	5a9b      	ldrh	r3, [r3, r2]
 800382a:	b29b      	uxth	r3, r3
 800382c:	001a      	movs	r2, r3
 800382e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003830:	781b      	ldrb	r3, [r3, #0]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	18d2      	adds	r2, r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	18d3      	adds	r3, r2, r3
 800383c:	4a5f      	ldr	r2, [pc, #380]	; (80039bc <PCD_EP_ISR_Handler+0x344>)
 800383e:	4694      	mov	ip, r2
 8003840:	4463      	add	r3, ip
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	059b      	lsls	r3, r3, #22
 8003846:	0d9a      	lsrs	r2, r3, #22
 8003848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800384c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d01a      	beq.n	800388a <PCD_EP_ISR_Handler+0x212>
 8003854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d016      	beq.n	800388a <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6818      	ldr	r0, [r3, #0]
 8003860:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003862:	6959      	ldr	r1, [r3, #20]
 8003864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003866:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003868:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800386a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800386c:	b29b      	uxth	r3, r3
 800386e:	f006 fca8 	bl	800a1c2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003874:	695a      	ldr	r2, [r3, #20]
 8003876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003878:	69db      	ldr	r3, [r3, #28]
 800387a:	18d2      	adds	r2, r2, r3
 800387c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800387e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2100      	movs	r1, #0
 8003884:	0018      	movs	r0, r3
 8003886:	f008 fcd8 	bl	800c23a <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	214a      	movs	r1, #74	; 0x4a
 8003890:	187b      	adds	r3, r7, r1
 8003892:	8812      	ldrh	r2, [r2, #0]
 8003894:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003896:	187b      	adds	r3, r7, r1
 8003898:	881a      	ldrh	r2, [r3, #0]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	4013      	ands	r3, r2
 80038a0:	d000      	beq.n	80038a4 <PCD_EP_ISR_Handler+0x22c>
 80038a2:	e2db      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	881a      	ldrh	r2, [r3, #0]
 80038a8:	23c0      	movs	r3, #192	; 0xc0
 80038aa:	019b      	lsls	r3, r3, #6
 80038ac:	401a      	ands	r2, r3
 80038ae:	23c0      	movs	r3, #192	; 0xc0
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d100      	bne.n	80038b8 <PCD_EP_ISR_Handler+0x240>
 80038b6:	e2d1      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	61bb      	str	r3, [r7, #24]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2250      	movs	r2, #80	; 0x50
 80038c4:	5a9b      	ldrh	r3, [r3, r2]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	001a      	movs	r2, r3
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	189b      	adds	r3, r3, r2
 80038ce:	61bb      	str	r3, [r7, #24]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	4a3a      	ldr	r2, [pc, #232]	; (80039bc <PCD_EP_ISR_Handler+0x344>)
 80038d4:	4694      	mov	ip, r2
 80038d6:	4463      	add	r3, ip
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	881b      	ldrh	r3, [r3, #0]
 80038de:	b29b      	uxth	r3, r3
 80038e0:	059b      	lsls	r3, r3, #22
 80038e2:	0d9b      	lsrs	r3, r3, #22
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	801a      	strh	r2, [r3, #0]
 80038ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b3e      	cmp	r3, #62	; 0x3e
 80038f0:	d91a      	bls.n	8003928 <PCD_EP_ISR_Handler+0x2b0>
 80038f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	095b      	lsrs	r3, r3, #5
 80038f8:	647b      	str	r3, [r7, #68]	; 0x44
 80038fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	221f      	movs	r2, #31
 8003900:	4013      	ands	r3, r2
 8003902:	d102      	bne.n	800390a <PCD_EP_ISR_Handler+0x292>
 8003904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003906:	3b01      	subs	r3, #1
 8003908:	647b      	str	r3, [r7, #68]	; 0x44
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	881b      	ldrh	r3, [r3, #0]
 800390e:	b29a      	uxth	r2, r3
 8003910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003912:	b29b      	uxth	r3, r3
 8003914:	029b      	lsls	r3, r3, #10
 8003916:	b29b      	uxth	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b29b      	uxth	r3, r3
 800391c:	4a25      	ldr	r2, [pc, #148]	; (80039b4 <PCD_EP_ISR_Handler+0x33c>)
 800391e:	4313      	orrs	r3, r2
 8003920:	b29a      	uxth	r2, r3
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	801a      	strh	r2, [r3, #0]
 8003926:	e023      	b.n	8003970 <PCD_EP_ISR_Handler+0x2f8>
 8003928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d108      	bne.n	8003942 <PCD_EP_ISR_Handler+0x2ca>
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	881b      	ldrh	r3, [r3, #0]
 8003934:	b29b      	uxth	r3, r3
 8003936:	4a1f      	ldr	r2, [pc, #124]	; (80039b4 <PCD_EP_ISR_Handler+0x33c>)
 8003938:	4313      	orrs	r3, r2
 800393a:	b29a      	uxth	r2, r3
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	801a      	strh	r2, [r3, #0]
 8003940:	e016      	b.n	8003970 <PCD_EP_ISR_Handler+0x2f8>
 8003942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
 800394a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	2201      	movs	r2, #1
 8003950:	4013      	ands	r3, r2
 8003952:	d002      	beq.n	800395a <PCD_EP_ISR_Handler+0x2e2>
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	3301      	adds	r3, #1
 8003958:	647b      	str	r3, [r7, #68]	; 0x44
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29a      	uxth	r2, r3
 8003960:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003962:	b29b      	uxth	r3, r3
 8003964:	029b      	lsls	r3, r3, #10
 8003966:	b29b      	uxth	r3, r3
 8003968:	4313      	orrs	r3, r2
 800396a:	b29a      	uxth	r2, r3
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	b29a      	uxth	r2, r3
 8003978:	2012      	movs	r0, #18
 800397a:	183b      	adds	r3, r7, r0
 800397c:	4911      	ldr	r1, [pc, #68]	; (80039c4 <PCD_EP_ISR_Handler+0x34c>)
 800397e:	400a      	ands	r2, r1
 8003980:	801a      	strh	r2, [r3, #0]
 8003982:	183b      	adds	r3, r7, r0
 8003984:	183a      	adds	r2, r7, r0
 8003986:	8812      	ldrh	r2, [r2, #0]
 8003988:	2180      	movs	r1, #128	; 0x80
 800398a:	0149      	lsls	r1, r1, #5
 800398c:	404a      	eors	r2, r1
 800398e:	801a      	strh	r2, [r3, #0]
 8003990:	183b      	adds	r3, r7, r0
 8003992:	183a      	adds	r2, r7, r0
 8003994:	8812      	ldrh	r2, [r2, #0]
 8003996:	2180      	movs	r1, #128	; 0x80
 8003998:	0189      	lsls	r1, r1, #6
 800399a:	404a      	eors	r2, r1
 800399c:	801a      	strh	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	183a      	adds	r2, r7, r0
 80039a4:	8812      	ldrh	r2, [r2, #0]
 80039a6:	4908      	ldr	r1, [pc, #32]	; (80039c8 <PCD_EP_ISR_Handler+0x350>)
 80039a8:	430a      	orrs	r2, r1
 80039aa:	b292      	uxth	r2, r2
 80039ac:	801a      	strh	r2, [r3, #0]
 80039ae:	e255      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
 80039b0:	ffff8f0f 	.word	0xffff8f0f
 80039b4:	ffff8000 	.word	0xffff8000
 80039b8:	00000402 	.word	0x00000402
 80039bc:	00000406 	.word	0x00000406
 80039c0:	00000f8f 	.word	0x00000f8f
 80039c4:	ffffbf8f 	.word	0xffffbf8f
 80039c8:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	001a      	movs	r2, r3
 80039d2:	204d      	movs	r0, #77	; 0x4d
 80039d4:	183b      	adds	r3, r7, r0
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	18d2      	adds	r2, r2, r3
 80039dc:	214a      	movs	r1, #74	; 0x4a
 80039de:	187b      	adds	r3, r7, r1
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	2200      	movs	r2, #0
 80039e8:	5e9b      	ldrsh	r3, [r3, r2]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	db00      	blt.n	80039f0 <PCD_EP_ISR_Handler+0x378>
 80039ee:	e0fa      	b.n	8003be6 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	001a      	movs	r2, r3
 80039f6:	183b      	adds	r3, r7, r0
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	2448      	movs	r4, #72	; 0x48
 8003a04:	193b      	adds	r3, r7, r4
 8003a06:	49d1      	ldr	r1, [pc, #836]	; (8003d4c <PCD_EP_ISR_Handler+0x6d4>)
 8003a08:	400a      	ands	r2, r1
 8003a0a:	801a      	strh	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	001a      	movs	r2, r3
 8003a12:	183b      	adds	r3, r7, r0
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	18d3      	adds	r3, r2, r3
 8003a1a:	193a      	adds	r2, r7, r4
 8003a1c:	8812      	ldrh	r2, [r2, #0]
 8003a1e:	2180      	movs	r1, #128	; 0x80
 8003a20:	430a      	orrs	r2, r1
 8003a22:	b292      	uxth	r2, r2
 8003a24:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003a26:	183b      	adds	r3, r7, r0
 8003a28:	781a      	ldrb	r2, [r3, #0]
 8003a2a:	0013      	movs	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	3369      	adds	r3, #105	; 0x69
 8003a34:	33ff      	adds	r3, #255	; 0xff
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	18d3      	adds	r3, r2, r3
 8003a3a:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3e:	7b1b      	ldrb	r3, [r3, #12]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d125      	bne.n	8003a90 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2250      	movs	r2, #80	; 0x50
 8003a4a:	5a9b      	ldrh	r3, [r3, r2]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	001a      	movs	r2, r3
 8003a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	18d2      	adds	r2, r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	18d3      	adds	r3, r2, r3
 8003a5e:	4abc      	ldr	r2, [pc, #752]	; (8003d50 <PCD_EP_ISR_Handler+0x6d8>)
 8003a60:	4694      	mov	ip, r2
 8003a62:	4463      	add	r3, ip
 8003a64:	881a      	ldrh	r2, [r3, #0]
 8003a66:	2450      	movs	r4, #80	; 0x50
 8003a68:	193b      	adds	r3, r7, r4
 8003a6a:	0592      	lsls	r2, r2, #22
 8003a6c:	0d92      	lsrs	r2, r2, #22
 8003a6e:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8003a70:	193b      	adds	r3, r7, r4
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d100      	bne.n	8003a7a <PCD_EP_ISR_Handler+0x402>
 8003a78:	e08d      	b.n	8003b96 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6818      	ldr	r0, [r3, #0]
 8003a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a80:	6959      	ldr	r1, [r3, #20]
 8003a82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a84:	88da      	ldrh	r2, [r3, #6]
 8003a86:	193b      	adds	r3, r7, r4
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	f006 fb9a 	bl	800a1c2 <USB_ReadPMA>
 8003a8e:	e082      	b.n	8003b96 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003a90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a92:	78db      	ldrb	r3, [r3, #3]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d10c      	bne.n	8003ab2 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003a98:	2350      	movs	r3, #80	; 0x50
 8003a9a:	18fc      	adds	r4, r7, r3
 8003a9c:	234a      	movs	r3, #74	; 0x4a
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	881a      	ldrh	r2, [r3, #0]
 8003aa2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f000 f9ec 	bl	8003e84 <HAL_PCD_EP_DB_Receive>
 8003aac:	0003      	movs	r3, r0
 8003aae:	8023      	strh	r3, [r4, #0]
 8003ab0:	e071      	b.n	8003b96 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	001a      	movs	r2, r3
 8003ab8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	18d3      	adds	r3, r2, r3
 8003ac0:	881b      	ldrh	r3, [r3, #0]
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	2052      	movs	r0, #82	; 0x52
 8003ac6:	183b      	adds	r3, r7, r0
 8003ac8:	49a2      	ldr	r1, [pc, #648]	; (8003d54 <PCD_EP_ISR_Handler+0x6dc>)
 8003aca:	400a      	ands	r2, r1
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	001a      	movs	r2, r3
 8003ad4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	18d3      	adds	r3, r2, r3
 8003adc:	183a      	adds	r2, r7, r0
 8003ade:	8812      	ldrh	r2, [r2, #0]
 8003ae0:	499d      	ldr	r1, [pc, #628]	; (8003d58 <PCD_EP_ISR_Handler+0x6e0>)
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	001a      	movs	r2, r3
 8003aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	18d3      	adds	r3, r2, r3
 8003af6:	881b      	ldrh	r3, [r3, #0]
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	001a      	movs	r2, r3
 8003afc:	2380      	movs	r3, #128	; 0x80
 8003afe:	01db      	lsls	r3, r3, #7
 8003b00:	4013      	ands	r3, r2
 8003b02:	d024      	beq.n	8003b4e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2250      	movs	r2, #80	; 0x50
 8003b0a:	5a9b      	ldrh	r3, [r3, r2]
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	001a      	movs	r2, r3
 8003b10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	18d2      	adds	r2, r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	18d3      	adds	r3, r2, r3
 8003b1e:	4a8f      	ldr	r2, [pc, #572]	; (8003d5c <PCD_EP_ISR_Handler+0x6e4>)
 8003b20:	4694      	mov	ip, r2
 8003b22:	4463      	add	r3, ip
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	2450      	movs	r4, #80	; 0x50
 8003b28:	193b      	adds	r3, r7, r4
 8003b2a:	0592      	lsls	r2, r2, #22
 8003b2c:	0d92      	lsrs	r2, r2, #22
 8003b2e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003b30:	193b      	adds	r3, r7, r4
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d02e      	beq.n	8003b96 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6818      	ldr	r0, [r3, #0]
 8003b3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3e:	6959      	ldr	r1, [r3, #20]
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b42:	891a      	ldrh	r2, [r3, #8]
 8003b44:	193b      	adds	r3, r7, r4
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	f006 fb3b 	bl	800a1c2 <USB_ReadPMA>
 8003b4c:	e023      	b.n	8003b96 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2250      	movs	r2, #80	; 0x50
 8003b54:	5a9b      	ldrh	r3, [r3, r2]
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	001a      	movs	r2, r3
 8003b5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	18d2      	adds	r2, r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	18d3      	adds	r3, r2, r3
 8003b68:	4a79      	ldr	r2, [pc, #484]	; (8003d50 <PCD_EP_ISR_Handler+0x6d8>)
 8003b6a:	4694      	mov	ip, r2
 8003b6c:	4463      	add	r3, ip
 8003b6e:	881a      	ldrh	r2, [r3, #0]
 8003b70:	2450      	movs	r4, #80	; 0x50
 8003b72:	193b      	adds	r3, r7, r4
 8003b74:	0592      	lsls	r2, r2, #22
 8003b76:	0d92      	lsrs	r2, r2, #22
 8003b78:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8003b7a:	193b      	adds	r3, r7, r4
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d009      	beq.n	8003b96 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6818      	ldr	r0, [r3, #0]
 8003b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b88:	6959      	ldr	r1, [r3, #20]
 8003b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b8c:	895a      	ldrh	r2, [r3, #10]
 8003b8e:	193b      	adds	r3, r7, r4
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	f006 fb16 	bl	800a1c2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b98:	69da      	ldr	r2, [r3, #28]
 8003b9a:	2150      	movs	r1, #80	; 0x50
 8003b9c:	187b      	adds	r3, r7, r1
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	18d2      	adds	r2, r2, r3
 8003ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba8:	695a      	ldr	r2, [r3, #20]
 8003baa:	187b      	adds	r3, r7, r1
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	18d2      	adds	r2, r2, r3
 8003bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d005      	beq.n	8003bc8 <PCD_EP_ISR_Handler+0x550>
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	881a      	ldrh	r2, [r3, #0]
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc2:	691b      	ldr	r3, [r3, #16]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d207      	bcs.n	8003bd8 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bca:	781a      	ldrb	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	0011      	movs	r1, r2
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f008 fb32 	bl	800c23a <HAL_PCD_DataOutStageCallback>
 8003bd6:	e006      	b.n	8003be6 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003bde:	0011      	movs	r1, r2
 8003be0:	0018      	movs	r0, r3
 8003be2:	f005 f833 	bl	8008c4c <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003be6:	244a      	movs	r4, #74	; 0x4a
 8003be8:	193b      	adds	r3, r7, r4
 8003bea:	881b      	ldrh	r3, [r3, #0]
 8003bec:	2280      	movs	r2, #128	; 0x80
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d100      	bne.n	8003bf4 <PCD_EP_ISR_Handler+0x57c>
 8003bf2:	e133      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8003bf4:	204d      	movs	r0, #77	; 0x4d
 8003bf6:	183b      	adds	r3, r7, r0
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	1c5a      	adds	r2, r3, #1
 8003bfc:	0013      	movs	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	189b      	adds	r3, r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	18d3      	adds	r3, r2, r3
 8003c08:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	001a      	movs	r2, r3
 8003c10:	183b      	adds	r3, r7, r0
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	18d3      	adds	r3, r2, r3
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	2542      	movs	r5, #66	; 0x42
 8003c1e:	197b      	adds	r3, r7, r5
 8003c20:	494f      	ldr	r1, [pc, #316]	; (8003d60 <PCD_EP_ISR_Handler+0x6e8>)
 8003c22:	400a      	ands	r2, r1
 8003c24:	801a      	strh	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	001a      	movs	r2, r3
 8003c2c:	183b      	adds	r3, r7, r0
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	18d3      	adds	r3, r2, r3
 8003c34:	197a      	adds	r2, r7, r5
 8003c36:	8812      	ldrh	r2, [r2, #0]
 8003c38:	494a      	ldr	r1, [pc, #296]	; (8003d64 <PCD_EP_ISR_Handler+0x6ec>)
 8003c3a:	430a      	orrs	r2, r1
 8003c3c:	b292      	uxth	r2, r2
 8003c3e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8003c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c42:	78db      	ldrb	r3, [r3, #3]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d000      	beq.n	8003c4a <PCD_EP_ISR_Handler+0x5d2>
 8003c48:	e0af      	b.n	8003daa <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 8003c4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8003c50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c52:	7b1b      	ldrb	r3, [r3, #12]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d100      	bne.n	8003c5a <PCD_EP_ISR_Handler+0x5e2>
 8003c58:	e09f      	b.n	8003d9a <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c5a:	193b      	adds	r3, r7, r4
 8003c5c:	881b      	ldrh	r3, [r3, #0]
 8003c5e:	2240      	movs	r2, #64	; 0x40
 8003c60:	4013      	ands	r3, r2
 8003c62:	d046      	beq.n	8003cf2 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c66:	785b      	ldrb	r3, [r3, #1]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d125      	bne.n	8003cb8 <PCD_EP_ISR_Handler+0x640>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	627b      	str	r3, [r7, #36]	; 0x24
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2250      	movs	r2, #80	; 0x50
 8003c78:	5a9b      	ldrh	r3, [r3, r2]
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	001a      	movs	r2, r3
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	189b      	adds	r3, r3, r2
 8003c82:	627b      	str	r3, [r7, #36]	; 0x24
 8003c84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	00da      	lsls	r2, r3, #3
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	18d3      	adds	r3, r2, r3
 8003c8e:	4a33      	ldr	r2, [pc, #204]	; (8003d5c <PCD_EP_ISR_Handler+0x6e4>)
 8003c90:	4694      	mov	ip, r2
 8003c92:	4463      	add	r3, ip
 8003c94:	623b      	str	r3, [r7, #32]
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	881b      	ldrh	r3, [r3, #0]
 8003c9a:	b29b      	uxth	r3, r3
 8003c9c:	059b      	lsls	r3, r3, #22
 8003c9e:	0d9b      	lsrs	r3, r3, #22
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	6a3b      	ldr	r3, [r7, #32]
 8003ca4:	801a      	strh	r2, [r3, #0]
 8003ca6:	6a3b      	ldr	r3, [r7, #32]
 8003ca8:	881b      	ldrh	r3, [r3, #0]
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <PCD_EP_ISR_Handler+0x6ec>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	b29a      	uxth	r2, r3
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	801a      	strh	r2, [r3, #0]
 8003cb6:	e070      	b.n	8003d9a <PCD_EP_ISR_Handler+0x722>
 8003cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cba:	785b      	ldrb	r3, [r3, #1]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d16c      	bne.n	8003d9a <PCD_EP_ISR_Handler+0x722>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2250      	movs	r2, #80	; 0x50
 8003ccc:	5a9b      	ldrh	r3, [r3, r2]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	001a      	movs	r2, r3
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	189b      	adds	r3, r3, r2
 8003cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	00da      	lsls	r2, r3, #3
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	18d3      	adds	r3, r2, r3
 8003ce2:	4a1e      	ldr	r2, [pc, #120]	; (8003d5c <PCD_EP_ISR_Handler+0x6e4>)
 8003ce4:	4694      	mov	ip, r2
 8003ce6:	4463      	add	r3, ip
 8003ce8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	2200      	movs	r2, #0
 8003cee:	801a      	strh	r2, [r3, #0]
 8003cf0:	e053      	b.n	8003d9a <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cfa:	785b      	ldrb	r3, [r3, #1]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d133      	bne.n	8003d68 <PCD_EP_ISR_Handler+0x6f0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2250      	movs	r2, #80	; 0x50
 8003d0c:	5a9b      	ldrh	r3, [r3, r2]
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	001a      	movs	r2, r3
 8003d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d14:	189b      	adds	r3, r3, r2
 8003d16:	637b      	str	r3, [r7, #52]	; 0x34
 8003d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	00da      	lsls	r2, r3, #3
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	18d3      	adds	r3, r2, r3
 8003d22:	4a0b      	ldr	r2, [pc, #44]	; (8003d50 <PCD_EP_ISR_Handler+0x6d8>)
 8003d24:	4694      	mov	ip, r2
 8003d26:	4463      	add	r3, ip
 8003d28:	633b      	str	r3, [r7, #48]	; 0x30
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	059b      	lsls	r3, r3, #22
 8003d32:	0d9b      	lsrs	r3, r3, #22
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d38:	801a      	strh	r2, [r3, #0]
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	881b      	ldrh	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <PCD_EP_ISR_Handler+0x6ec>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	801a      	strh	r2, [r3, #0]
 8003d4a:	e026      	b.n	8003d9a <PCD_EP_ISR_Handler+0x722>
 8003d4c:	00000f8f 	.word	0x00000f8f
 8003d50:	00000406 	.word	0x00000406
 8003d54:	ffff8f8f 	.word	0xffff8f8f
 8003d58:	ffff80c0 	.word	0xffff80c0
 8003d5c:	00000402 	.word	0x00000402
 8003d60:	ffff8f0f 	.word	0xffff8f0f
 8003d64:	ffff8000 	.word	0xffff8000
 8003d68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d6a:	785b      	ldrb	r3, [r3, #1]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d114      	bne.n	8003d9a <PCD_EP_ISR_Handler+0x722>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2250      	movs	r2, #80	; 0x50
 8003d76:	5a9b      	ldrh	r3, [r3, r2]
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7e:	189b      	adds	r3, r3, r2
 8003d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	00da      	lsls	r2, r3, #3
 8003d88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d8a:	18d3      	adds	r3, r2, r3
 8003d8c:	4a3b      	ldr	r2, [pc, #236]	; (8003e7c <PCD_EP_ISR_Handler+0x804>)
 8003d8e:	4694      	mov	ip, r2
 8003d90:	4463      	add	r3, ip
 8003d92:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	2200      	movs	r2, #0
 8003d98:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d9c:	781a      	ldrb	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0011      	movs	r1, r2
 8003da2:	0018      	movs	r0, r3
 8003da4:	f008 fa6a 	bl	800c27c <HAL_PCD_DataInStageCallback>
 8003da8:	e058      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003daa:	234a      	movs	r3, #74	; 0x4a
 8003dac:	18fb      	adds	r3, r7, r3
 8003dae:	881a      	ldrh	r2, [r3, #0]
 8003db0:	2380      	movs	r3, #128	; 0x80
 8003db2:	005b      	lsls	r3, r3, #1
 8003db4:	4013      	ands	r3, r2
 8003db6:	d149      	bne.n	8003e4c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2250      	movs	r2, #80	; 0x50
 8003dbe:	5a9b      	ldrh	r3, [r3, r2]
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	001a      	movs	r2, r3
 8003dc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	00db      	lsls	r3, r3, #3
 8003dca:	18d2      	adds	r2, r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	18d3      	adds	r3, r2, r3
 8003dd2:	4a2b      	ldr	r2, [pc, #172]	; (8003e80 <PCD_EP_ISR_Handler+0x808>)
 8003dd4:	4694      	mov	ip, r2
 8003dd6:	4463      	add	r3, ip
 8003dd8:	881a      	ldrh	r2, [r3, #0]
 8003dda:	2140      	movs	r1, #64	; 0x40
 8003ddc:	187b      	adds	r3, r7, r1
 8003dde:	0592      	lsls	r2, r2, #22
 8003de0:	0d92      	lsrs	r2, r2, #22
 8003de2:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8003de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de6:	699a      	ldr	r2, [r3, #24]
 8003de8:	187b      	adds	r3, r7, r1
 8003dea:	881b      	ldrh	r3, [r3, #0]
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d907      	bls.n	8003e00 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8003df0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003df2:	699a      	ldr	r2, [r3, #24]
 8003df4:	187b      	adds	r3, r7, r1
 8003df6:	881b      	ldrh	r3, [r3, #0]
 8003df8:	1ad2      	subs	r2, r2, r3
 8003dfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dfc:	619a      	str	r2, [r3, #24]
 8003dfe:	e002      	b.n	8003e06 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8003e00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e02:	2200      	movs	r2, #0
 8003e04:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e10:	781a      	ldrb	r2, [r3, #0]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	0011      	movs	r1, r2
 8003e16:	0018      	movs	r0, r3
 8003e18:	f008 fa30 	bl	800c27c <HAL_PCD_DataInStageCallback>
 8003e1c:	e01e      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003e1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e20:	695a      	ldr	r2, [r3, #20]
 8003e22:	2140      	movs	r1, #64	; 0x40
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	881b      	ldrh	r3, [r3, #0]
 8003e28:	18d2      	adds	r2, r2, r3
 8003e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e2c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003e2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e30:	69da      	ldr	r2, [r3, #28]
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	18d2      	adds	r2, r2, r3
 8003e38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e3a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003e42:	0011      	movs	r1, r2
 8003e44:	0018      	movs	r0, r3
 8003e46:	f004 ff01 	bl	8008c4c <USB_EPStartXfer>
 8003e4a:	e007      	b.n	8003e5c <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003e4c:	234a      	movs	r3, #74	; 0x4a
 8003e4e:	18fb      	adds	r3, r7, r3
 8003e50:	881a      	ldrh	r2, [r3, #0]
 8003e52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	0018      	movs	r0, r3
 8003e58:	f000 f930 	bl	80040bc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2244      	movs	r2, #68	; 0x44
 8003e62:	5a9b      	ldrh	r3, [r3, r2]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	b21b      	sxth	r3, r3
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	da01      	bge.n	8003e70 <PCD_EP_ISR_Handler+0x7f8>
 8003e6c:	f7ff fc0a 	bl	8003684 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	0018      	movs	r0, r3
 8003e74:	46bd      	mov	sp, r7
 8003e76:	b016      	add	sp, #88	; 0x58
 8003e78:	bdb0      	pop	{r4, r5, r7, pc}
 8003e7a:	46c0      	nop			; (mov r8, r8)
 8003e7c:	00000406 	.word	0x00000406
 8003e80:	00000402 	.word	0x00000402

08003e84 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b089      	sub	sp, #36	; 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	1dbb      	adds	r3, r7, #6
 8003e90:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003e92:	1dbb      	adds	r3, r7, #6
 8003e94:	881a      	ldrh	r2, [r3, #0]
 8003e96:	2380      	movs	r3, #128	; 0x80
 8003e98:	01db      	lsls	r3, r3, #7
 8003e9a:	4013      	ands	r3, r2
 8003e9c:	d100      	bne.n	8003ea0 <HAL_PCD_EP_DB_Receive+0x1c>
 8003e9e:	e07d      	b.n	8003f9c <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2250      	movs	r2, #80	; 0x50
 8003ea6:	5a9b      	ldrh	r3, [r3, r2]
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	001a      	movs	r2, r3
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	781b      	ldrb	r3, [r3, #0]
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	18d2      	adds	r2, r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	18d3      	adds	r3, r2, r3
 8003eba:	4a7a      	ldr	r2, [pc, #488]	; (80040a4 <HAL_PCD_EP_DB_Receive+0x220>)
 8003ebc:	4694      	mov	ip, r2
 8003ebe:	4463      	add	r3, ip
 8003ec0:	881a      	ldrh	r2, [r3, #0]
 8003ec2:	211a      	movs	r1, #26
 8003ec4:	187b      	adds	r3, r7, r1
 8003ec6:	0592      	lsls	r2, r2, #22
 8003ec8:	0d92      	lsrs	r2, r2, #22
 8003eca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	699a      	ldr	r2, [r3, #24]
 8003ed0:	187b      	adds	r3, r7, r1
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d307      	bcc.n	8003ee8 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	699a      	ldr	r2, [r3, #24]
 8003edc:	187b      	adds	r3, r7, r1
 8003ede:	881b      	ldrh	r3, [r3, #0]
 8003ee0:	1ad2      	subs	r2, r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	619a      	str	r2, [r3, #24]
 8003ee6:	e002      	b.n	8003eee <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2200      	movs	r2, #0
 8003eec:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d121      	bne.n	8003f3a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	001a      	movs	r2, r3
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	18d3      	adds	r3, r2, r3
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	2018      	movs	r0, #24
 8003f0a:	183b      	adds	r3, r7, r0
 8003f0c:	4966      	ldr	r1, [pc, #408]	; (80040a8 <HAL_PCD_EP_DB_Receive+0x224>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	801a      	strh	r2, [r3, #0]
 8003f12:	183b      	adds	r3, r7, r0
 8003f14:	183a      	adds	r2, r7, r0
 8003f16:	8812      	ldrh	r2, [r2, #0]
 8003f18:	2180      	movs	r1, #128	; 0x80
 8003f1a:	0189      	lsls	r1, r1, #6
 8003f1c:	404a      	eors	r2, r1
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	001a      	movs	r2, r3
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	18d3      	adds	r3, r2, r3
 8003f2e:	183a      	adds	r2, r7, r0
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	495e      	ldr	r1, [pc, #376]	; (80040ac <HAL_PCD_EP_DB_Receive+0x228>)
 8003f34:	430a      	orrs	r2, r1
 8003f36:	b292      	uxth	r2, r2
 8003f38:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003f3a:	1dbb      	adds	r3, r7, #6
 8003f3c:	881b      	ldrh	r3, [r3, #0]
 8003f3e:	2240      	movs	r2, #64	; 0x40
 8003f40:	4013      	ands	r3, r2
 8003f42:	d01a      	beq.n	8003f7a <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	001a      	movs	r2, r3
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	18d3      	adds	r3, r2, r3
 8003f52:	881b      	ldrh	r3, [r3, #0]
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	2016      	movs	r0, #22
 8003f58:	183b      	adds	r3, r7, r0
 8003f5a:	4955      	ldr	r1, [pc, #340]	; (80040b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8003f5c:	400a      	ands	r2, r1
 8003f5e:	801a      	strh	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	001a      	movs	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	18d3      	adds	r3, r2, r3
 8003f6e:	183a      	adds	r2, r7, r0
 8003f70:	8812      	ldrh	r2, [r2, #0]
 8003f72:	4950      	ldr	r1, [pc, #320]	; (80040b4 <HAL_PCD_EP_DB_Receive+0x230>)
 8003f74:	430a      	orrs	r2, r1
 8003f76:	b292      	uxth	r2, r2
 8003f78:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8003f7a:	241a      	movs	r4, #26
 8003f7c:	193b      	adds	r3, r7, r4
 8003f7e:	881b      	ldrh	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d100      	bne.n	8003f86 <HAL_PCD_EP_DB_Receive+0x102>
 8003f84:	e086      	b.n	8004094 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6818      	ldr	r0, [r3, #0]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6959      	ldr	r1, [r3, #20]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	891a      	ldrh	r2, [r3, #8]
 8003f92:	193b      	adds	r3, r7, r4
 8003f94:	881b      	ldrh	r3, [r3, #0]
 8003f96:	f006 f914 	bl	800a1c2 <USB_ReadPMA>
 8003f9a:	e07b      	b.n	8004094 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2250      	movs	r2, #80	; 0x50
 8003fa2:	5a9b      	ldrh	r3, [r3, r2]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	001a      	movs	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	00db      	lsls	r3, r3, #3
 8003fae:	18d2      	adds	r2, r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	18d3      	adds	r3, r2, r3
 8003fb6:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <HAL_PCD_EP_DB_Receive+0x234>)
 8003fb8:	4694      	mov	ip, r2
 8003fba:	4463      	add	r3, ip
 8003fbc:	881a      	ldrh	r2, [r3, #0]
 8003fbe:	211a      	movs	r1, #26
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	0592      	lsls	r2, r2, #22
 8003fc4:	0d92      	lsrs	r2, r2, #22
 8003fc6:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	187b      	adds	r3, r7, r1
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d307      	bcc.n	8003fe4 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	699a      	ldr	r2, [r3, #24]
 8003fd8:	187b      	adds	r3, r7, r1
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	1ad2      	subs	r2, r2, r3
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	619a      	str	r2, [r3, #24]
 8003fe2:	e002      	b.n	8003fea <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d121      	bne.n	8004036 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	001a      	movs	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	18d3      	adds	r3, r2, r3
 8004000:	881b      	ldrh	r3, [r3, #0]
 8004002:	b29a      	uxth	r2, r3
 8004004:	201e      	movs	r0, #30
 8004006:	183b      	adds	r3, r7, r0
 8004008:	4927      	ldr	r1, [pc, #156]	; (80040a8 <HAL_PCD_EP_DB_Receive+0x224>)
 800400a:	400a      	ands	r2, r1
 800400c:	801a      	strh	r2, [r3, #0]
 800400e:	183b      	adds	r3, r7, r0
 8004010:	183a      	adds	r2, r7, r0
 8004012:	8812      	ldrh	r2, [r2, #0]
 8004014:	2180      	movs	r1, #128	; 0x80
 8004016:	0189      	lsls	r1, r1, #6
 8004018:	404a      	eors	r2, r1
 800401a:	801a      	strh	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	001a      	movs	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	18d3      	adds	r3, r2, r3
 800402a:	183a      	adds	r2, r7, r0
 800402c:	8812      	ldrh	r2, [r2, #0]
 800402e:	491f      	ldr	r1, [pc, #124]	; (80040ac <HAL_PCD_EP_DB_Receive+0x228>)
 8004030:	430a      	orrs	r2, r1
 8004032:	b292      	uxth	r2, r2
 8004034:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004036:	1dbb      	adds	r3, r7, #6
 8004038:	881b      	ldrh	r3, [r3, #0]
 800403a:	2240      	movs	r2, #64	; 0x40
 800403c:	4013      	ands	r3, r2
 800403e:	d11a      	bne.n	8004076 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	001a      	movs	r2, r3
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	18d3      	adds	r3, r2, r3
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	b29a      	uxth	r2, r3
 8004052:	201c      	movs	r0, #28
 8004054:	183b      	adds	r3, r7, r0
 8004056:	4916      	ldr	r1, [pc, #88]	; (80040b0 <HAL_PCD_EP_DB_Receive+0x22c>)
 8004058:	400a      	ands	r2, r1
 800405a:	801a      	strh	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	001a      	movs	r2, r3
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	18d3      	adds	r3, r2, r3
 800406a:	183a      	adds	r2, r7, r0
 800406c:	8812      	ldrh	r2, [r2, #0]
 800406e:	4911      	ldr	r1, [pc, #68]	; (80040b4 <HAL_PCD_EP_DB_Receive+0x230>)
 8004070:	430a      	orrs	r2, r1
 8004072:	b292      	uxth	r2, r2
 8004074:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8004076:	241a      	movs	r4, #26
 8004078:	193b      	adds	r3, r7, r4
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d009      	beq.n	8004094 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6818      	ldr	r0, [r3, #0]
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	6959      	ldr	r1, [r3, #20]
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	895a      	ldrh	r2, [r3, #10]
 800408c:	193b      	adds	r3, r7, r4
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	f006 f897 	bl	800a1c2 <USB_ReadPMA>
    }
  }

  return count;
 8004094:	231a      	movs	r3, #26
 8004096:	18fb      	adds	r3, r7, r3
 8004098:	881b      	ldrh	r3, [r3, #0]
}
 800409a:	0018      	movs	r0, r3
 800409c:	46bd      	mov	sp, r7
 800409e:	b009      	add	sp, #36	; 0x24
 80040a0:	bd90      	pop	{r4, r7, pc}
 80040a2:	46c0      	nop			; (mov r8, r8)
 80040a4:	00000402 	.word	0x00000402
 80040a8:	ffffbf8f 	.word	0xffffbf8f
 80040ac:	ffff8080 	.word	0xffff8080
 80040b0:	ffff8f8f 	.word	0xffff8f8f
 80040b4:	ffff80c0 	.word	0xffff80c0
 80040b8:	00000406 	.word	0x00000406

080040bc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b0a4      	sub	sp, #144	; 0x90
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	1dbb      	adds	r3, r7, #6
 80040c8:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80040ca:	1dbb      	adds	r3, r7, #6
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	2240      	movs	r2, #64	; 0x40
 80040d0:	4013      	ands	r3, r2
 80040d2:	d100      	bne.n	80040d6 <HAL_PCD_EP_DB_Transmit+0x1a>
 80040d4:	e1e4      	b.n	80044a0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2250      	movs	r2, #80	; 0x50
 80040dc:	5a9b      	ldrh	r3, [r3, r2]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	001a      	movs	r2, r3
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	18d2      	adds	r2, r2, r3
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	18d3      	adds	r3, r2, r3
 80040f0:	4ad0      	ldr	r2, [pc, #832]	; (8004434 <HAL_PCD_EP_DB_Transmit+0x378>)
 80040f2:	4694      	mov	ip, r2
 80040f4:	4463      	add	r3, ip
 80040f6:	881a      	ldrh	r2, [r3, #0]
 80040f8:	2186      	movs	r1, #134	; 0x86
 80040fa:	187b      	adds	r3, r7, r1
 80040fc:	0592      	lsls	r2, r2, #22
 80040fe:	0d92      	lsrs	r2, r2, #22
 8004100:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	699a      	ldr	r2, [r3, #24]
 8004106:	187b      	adds	r3, r7, r1
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d907      	bls.n	800411e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	699a      	ldr	r2, [r3, #24]
 8004112:	187b      	adds	r3, r7, r1
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	1ad2      	subs	r2, r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	619a      	str	r2, [r3, #24]
 800411c:	e002      	b.n	8004124 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	2200      	movs	r2, #0
 8004122:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d000      	beq.n	800412e <HAL_PCD_EP_DB_Transmit+0x72>
 800412c:	e0b5      	b.n	800429a <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	785b      	ldrb	r3, [r3, #1]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d125      	bne.n	8004182 <HAL_PCD_EP_DB_Transmit+0xc6>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2250      	movs	r2, #80	; 0x50
 8004142:	5a9b      	ldrh	r3, [r3, r2]
 8004144:	b29b      	uxth	r3, r3
 8004146:	001a      	movs	r2, r3
 8004148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414a:	189b      	adds	r3, r3, r2
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	00da      	lsls	r2, r3, #3
 8004154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004156:	18d3      	adds	r3, r2, r3
 8004158:	4ab6      	ldr	r2, [pc, #728]	; (8004434 <HAL_PCD_EP_DB_Transmit+0x378>)
 800415a:	4694      	mov	ip, r2
 800415c:	4463      	add	r3, ip
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	881b      	ldrh	r3, [r3, #0]
 8004164:	b29b      	uxth	r3, r3
 8004166:	059b      	lsls	r3, r3, #22
 8004168:	0d9b      	lsrs	r3, r3, #22
 800416a:	b29a      	uxth	r2, r3
 800416c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800416e:	801a      	strh	r2, [r3, #0]
 8004170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004172:	881b      	ldrh	r3, [r3, #0]
 8004174:	b29b      	uxth	r3, r3
 8004176:	4ab0      	ldr	r2, [pc, #704]	; (8004438 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8004178:	4313      	orrs	r3, r2
 800417a:	b29a      	uxth	r2, r3
 800417c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417e:	801a      	strh	r2, [r3, #0]
 8004180:	e01b      	b.n	80041ba <HAL_PCD_EP_DB_Transmit+0xfe>
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	785b      	ldrb	r3, [r3, #1]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d117      	bne.n	80041ba <HAL_PCD_EP_DB_Transmit+0xfe>
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	637b      	str	r3, [r7, #52]	; 0x34
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2250      	movs	r2, #80	; 0x50
 8004196:	5a9b      	ldrh	r3, [r3, r2]
 8004198:	b29b      	uxth	r3, r3
 800419a:	001a      	movs	r2, r3
 800419c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	637b      	str	r3, [r7, #52]	; 0x34
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	00da      	lsls	r2, r3, #3
 80041a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041aa:	18d3      	adds	r3, r2, r3
 80041ac:	4aa1      	ldr	r2, [pc, #644]	; (8004434 <HAL_PCD_EP_DB_Transmit+0x378>)
 80041ae:	4694      	mov	ip, r2
 80041b0:	4463      	add	r3, ip
 80041b2:	633b      	str	r3, [r7, #48]	; 0x30
 80041b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b6:	2200      	movs	r2, #0
 80041b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	627b      	str	r3, [r7, #36]	; 0x24
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	785b      	ldrb	r3, [r3, #1]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d125      	bne.n	8004214 <HAL_PCD_EP_DB_Transmit+0x158>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	61fb      	str	r3, [r7, #28]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2250      	movs	r2, #80	; 0x50
 80041d4:	5a9b      	ldrh	r3, [r3, r2]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	001a      	movs	r2, r3
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	189b      	adds	r3, r3, r2
 80041de:	61fb      	str	r3, [r7, #28]
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	00da      	lsls	r2, r3, #3
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	18d3      	adds	r3, r2, r3
 80041ea:	4a94      	ldr	r2, [pc, #592]	; (800443c <HAL_PCD_EP_DB_Transmit+0x380>)
 80041ec:	4694      	mov	ip, r2
 80041ee:	4463      	add	r3, ip
 80041f0:	61bb      	str	r3, [r7, #24]
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	059b      	lsls	r3, r3, #22
 80041fa:	0d9b      	lsrs	r3, r3, #22
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	801a      	strh	r2, [r3, #0]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	4a8b      	ldr	r2, [pc, #556]	; (8004438 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800420a:	4313      	orrs	r3, r2
 800420c:	b29a      	uxth	r2, r3
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	801a      	strh	r2, [r3, #0]
 8004212:	e018      	b.n	8004246 <HAL_PCD_EP_DB_Transmit+0x18a>
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	785b      	ldrb	r3, [r3, #1]
 8004218:	2b01      	cmp	r3, #1
 800421a:	d114      	bne.n	8004246 <HAL_PCD_EP_DB_Transmit+0x18a>
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2250      	movs	r2, #80	; 0x50
 8004222:	5a9b      	ldrh	r3, [r3, r2]
 8004224:	b29b      	uxth	r3, r3
 8004226:	001a      	movs	r2, r3
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	189b      	adds	r3, r3, r2
 800422c:	627b      	str	r3, [r7, #36]	; 0x24
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	00da      	lsls	r2, r3, #3
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	18d3      	adds	r3, r2, r3
 8004238:	4a80      	ldr	r2, [pc, #512]	; (800443c <HAL_PCD_EP_DB_Transmit+0x380>)
 800423a:	4694      	mov	ip, r2
 800423c:	4463      	add	r3, ip
 800423e:	623b      	str	r3, [r7, #32]
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2200      	movs	r2, #0
 8004244:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	0011      	movs	r1, r2
 800424e:	0018      	movs	r0, r3
 8004250:	f008 f814 	bl	800c27c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004254:	1dbb      	adds	r3, r7, #6
 8004256:	881a      	ldrh	r2, [r3, #0]
 8004258:	2380      	movs	r3, #128	; 0x80
 800425a:	01db      	lsls	r3, r3, #7
 800425c:	4013      	ands	r3, r2
 800425e:	d100      	bne.n	8004262 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8004260:	e309      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	001a      	movs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	18d3      	adds	r3, r2, r3
 8004270:	881b      	ldrh	r3, [r3, #0]
 8004272:	b29a      	uxth	r2, r3
 8004274:	2016      	movs	r0, #22
 8004276:	183b      	adds	r3, r7, r0
 8004278:	4971      	ldr	r1, [pc, #452]	; (8004440 <HAL_PCD_EP_DB_Transmit+0x384>)
 800427a:	400a      	ands	r2, r1
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	001a      	movs	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	18d3      	adds	r3, r2, r3
 800428c:	183a      	adds	r2, r7, r0
 800428e:	8812      	ldrh	r2, [r2, #0]
 8004290:	496c      	ldr	r1, [pc, #432]	; (8004444 <HAL_PCD_EP_DB_Transmit+0x388>)
 8004292:	430a      	orrs	r2, r1
 8004294:	b292      	uxth	r2, r2
 8004296:	801a      	strh	r2, [r3, #0]
 8004298:	e2ed      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800429a:	1dbb      	adds	r3, r7, #6
 800429c:	881a      	ldrh	r2, [r3, #0]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	01db      	lsls	r3, r3, #7
 80042a2:	4013      	ands	r3, r2
 80042a4:	d01a      	beq.n	80042dc <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	001a      	movs	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	009b      	lsls	r3, r3, #2
 80042b2:	18d3      	adds	r3, r2, r3
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	208a      	movs	r0, #138	; 0x8a
 80042ba:	183b      	adds	r3, r7, r0
 80042bc:	4960      	ldr	r1, [pc, #384]	; (8004440 <HAL_PCD_EP_DB_Transmit+0x384>)
 80042be:	400a      	ands	r2, r1
 80042c0:	801a      	strh	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	001a      	movs	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	18d3      	adds	r3, r2, r3
 80042d0:	183a      	adds	r2, r7, r0
 80042d2:	8812      	ldrh	r2, [r2, #0]
 80042d4:	495b      	ldr	r1, [pc, #364]	; (8004444 <HAL_PCD_EP_DB_Transmit+0x388>)
 80042d6:	430a      	orrs	r2, r1
 80042d8:	b292      	uxth	r2, r2
 80042da:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2224      	movs	r2, #36	; 0x24
 80042e0:	5c9b      	ldrb	r3, [r3, r2]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d000      	beq.n	80042e8 <HAL_PCD_EP_DB_Transmit+0x22c>
 80042e6:	e2c6      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	695a      	ldr	r2, [r3, #20]
 80042ec:	2186      	movs	r1, #134	; 0x86
 80042ee:	187b      	adds	r3, r7, r1
 80042f0:	881b      	ldrh	r3, [r3, #0]
 80042f2:	18d2      	adds	r2, r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	69da      	ldr	r2, [r3, #28]
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	18d2      	adds	r2, r2, r3
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	6a1a      	ldr	r2, [r3, #32]
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	429a      	cmp	r2, r3
 8004310:	d30c      	bcc.n	800432c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	218c      	movs	r1, #140	; 0x8c
 8004318:	187a      	adds	r2, r7, r1
 800431a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6a1a      	ldr	r2, [r3, #32]
 8004320:	187b      	adds	r3, r7, r1
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	1ad2      	subs	r2, r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	621a      	str	r2, [r3, #32]
 800432a:	e01a      	b.n	8004362 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	6a1b      	ldr	r3, [r3, #32]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10a      	bne.n	800434a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8004334:	2386      	movs	r3, #134	; 0x86
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	881b      	ldrh	r3, [r3, #0]
 800433a:	228c      	movs	r2, #140	; 0x8c
 800433c:	18ba      	adds	r2, r7, r2
 800433e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	2224      	movs	r2, #36	; 0x24
 8004344:	2100      	movs	r1, #0
 8004346:	5499      	strb	r1, [r3, r2]
 8004348:	e00b      	b.n	8004362 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2224      	movs	r2, #36	; 0x24
 800434e:	2100      	movs	r1, #0
 8004350:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6a1b      	ldr	r3, [r3, #32]
 8004356:	228c      	movs	r2, #140	; 0x8c
 8004358:	18ba      	adds	r2, r7, r2
 800435a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2200      	movs	r2, #0
 8004360:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	785b      	ldrb	r3, [r3, #1]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d000      	beq.n	800436c <HAL_PCD_EP_DB_Transmit+0x2b0>
 800436a:	e06d      	b.n	8004448 <HAL_PCD_EP_DB_Transmit+0x38c>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	2250      	movs	r2, #80	; 0x50
 8004378:	5a9b      	ldrh	r3, [r3, r2]
 800437a:	b29b      	uxth	r3, r3
 800437c:	001a      	movs	r2, r3
 800437e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004380:	189b      	adds	r3, r3, r2
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004384:	68bb      	ldr	r3, [r7, #8]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	00da      	lsls	r2, r3, #3
 800438a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800438c:	18d3      	adds	r3, r2, r3
 800438e:	4a29      	ldr	r2, [pc, #164]	; (8004434 <HAL_PCD_EP_DB_Transmit+0x378>)
 8004390:	4694      	mov	ip, r2
 8004392:	4463      	add	r3, ip
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	b29b      	uxth	r3, r3
 800439c:	059b      	lsls	r3, r3, #22
 800439e:	0d9b      	lsrs	r3, r3, #22
 80043a0:	b29a      	uxth	r2, r3
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	801a      	strh	r2, [r3, #0]
 80043a6:	228c      	movs	r2, #140	; 0x8c
 80043a8:	18bb      	adds	r3, r7, r2
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	2b3e      	cmp	r3, #62	; 0x3e
 80043ae:	d91a      	bls.n	80043e6 <HAL_PCD_EP_DB_Transmit+0x32a>
 80043b0:	18bb      	adds	r3, r7, r2
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	095b      	lsrs	r3, r3, #5
 80043b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b8:	18bb      	adds	r3, r7, r2
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	221f      	movs	r2, #31
 80043be:	4013      	ands	r3, r2
 80043c0:	d102      	bne.n	80043c8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80043c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043c4:	3b01      	subs	r3, #1
 80043c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ca:	881b      	ldrh	r3, [r3, #0]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	4313      	orrs	r3, r2
 80043d8:	b29b      	uxth	r3, r3
 80043da:	4a17      	ldr	r2, [pc, #92]	; (8004438 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	b29a      	uxth	r2, r3
 80043e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e2:	801a      	strh	r2, [r3, #0]
 80043e4:	e04f      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80043e6:	238c      	movs	r3, #140	; 0x8c
 80043e8:	18fb      	adds	r3, r7, r3
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d108      	bne.n	8004402 <HAL_PCD_EP_DB_Transmit+0x346>
 80043f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f2:	881b      	ldrh	r3, [r3, #0]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	4a10      	ldr	r2, [pc, #64]	; (8004438 <HAL_PCD_EP_DB_Transmit+0x37c>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043fe:	801a      	strh	r2, [r3, #0]
 8004400:	e041      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004402:	228c      	movs	r2, #140	; 0x8c
 8004404:	18bb      	adds	r3, r7, r2
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	64bb      	str	r3, [r7, #72]	; 0x48
 800440c:	18bb      	adds	r3, r7, r2
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2201      	movs	r2, #1
 8004412:	4013      	ands	r3, r2
 8004414:	d002      	beq.n	800441c <HAL_PCD_EP_DB_Transmit+0x360>
 8004416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004418:	3301      	adds	r3, #1
 800441a:	64bb      	str	r3, [r7, #72]	; 0x48
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	b29a      	uxth	r2, r3
 8004422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004424:	b29b      	uxth	r3, r3
 8004426:	029b      	lsls	r3, r3, #10
 8004428:	b29b      	uxth	r3, r3
 800442a:	4313      	orrs	r3, r2
 800442c:	b29a      	uxth	r2, r3
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	801a      	strh	r2, [r3, #0]
 8004432:	e028      	b.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004434:	00000402 	.word	0x00000402
 8004438:	ffff8000 	.word	0xffff8000
 800443c:	00000406 	.word	0x00000406
 8004440:	ffff8f8f 	.word	0xffff8f8f
 8004444:	ffffc080 	.word	0xffffc080
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	785b      	ldrb	r3, [r3, #1]
 800444c:	2b01      	cmp	r3, #1
 800444e:	d11a      	bne.n	8004486 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2250      	movs	r2, #80	; 0x50
 800445c:	5a9b      	ldrh	r3, [r3, r2]
 800445e:	b29b      	uxth	r3, r3
 8004460:	001a      	movs	r2, r3
 8004462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004464:	189b      	adds	r3, r3, r2
 8004466:	647b      	str	r3, [r7, #68]	; 0x44
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	00da      	lsls	r2, r3, #3
 800446e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004470:	18d3      	adds	r3, r2, r3
 8004472:	4adb      	ldr	r2, [pc, #876]	; (80047e0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004474:	4694      	mov	ip, r2
 8004476:	4463      	add	r3, ip
 8004478:	643b      	str	r3, [r7, #64]	; 0x40
 800447a:	238c      	movs	r3, #140	; 0x8c
 800447c:	18fb      	adds	r3, r7, r3
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	b29a      	uxth	r2, r3
 8004482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004484:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6818      	ldr	r0, [r3, #0]
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	6959      	ldr	r1, [r3, #20]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	891a      	ldrh	r2, [r3, #8]
 8004492:	238c      	movs	r3, #140	; 0x8c
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	b29b      	uxth	r3, r3
 800449a:	f005 fe49 	bl	800a130 <USB_WritePMA>
 800449e:	e1ea      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2250      	movs	r2, #80	; 0x50
 80044a6:	5a9b      	ldrh	r3, [r3, r2]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	001a      	movs	r2, r3
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	00db      	lsls	r3, r3, #3
 80044b2:	18d2      	adds	r2, r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	18d3      	adds	r3, r2, r3
 80044ba:	4aca      	ldr	r2, [pc, #808]	; (80047e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80044bc:	4694      	mov	ip, r2
 80044be:	4463      	add	r3, ip
 80044c0:	881a      	ldrh	r2, [r3, #0]
 80044c2:	2186      	movs	r1, #134	; 0x86
 80044c4:	187b      	adds	r3, r7, r1
 80044c6:	0592      	lsls	r2, r2, #22
 80044c8:	0d92      	lsrs	r2, r2, #22
 80044ca:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	699a      	ldr	r2, [r3, #24]
 80044d0:	187b      	adds	r3, r7, r1
 80044d2:	881b      	ldrh	r3, [r3, #0]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d307      	bcc.n	80044e8 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	699a      	ldr	r2, [r3, #24]
 80044dc:	187b      	adds	r3, r7, r1
 80044de:	881b      	ldrh	r3, [r3, #0]
 80044e0:	1ad2      	subs	r2, r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	619a      	str	r2, [r3, #24]
 80044e6:	e002      	b.n	80044ee <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2200      	movs	r2, #0
 80044ec:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d000      	beq.n	80044f8 <HAL_PCD_EP_DB_Transmit+0x43c>
 80044f6:	e0bb      	b.n	8004670 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	785b      	ldrb	r3, [r3, #1]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d125      	bne.n	800454c <HAL_PCD_EP_DB_Transmit+0x490>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2250      	movs	r2, #80	; 0x50
 800450c:	5a9b      	ldrh	r3, [r3, r2]
 800450e:	b29b      	uxth	r3, r3
 8004510:	001a      	movs	r2, r3
 8004512:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004514:	189b      	adds	r3, r3, r2
 8004516:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	00da      	lsls	r2, r3, #3
 800451e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004520:	18d3      	adds	r3, r2, r3
 8004522:	4aaf      	ldr	r2, [pc, #700]	; (80047e0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004524:	4694      	mov	ip, r2
 8004526:	4463      	add	r3, ip
 8004528:	67bb      	str	r3, [r7, #120]	; 0x78
 800452a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	b29b      	uxth	r3, r3
 8004530:	059b      	lsls	r3, r3, #22
 8004532:	0d9b      	lsrs	r3, r3, #22
 8004534:	b29a      	uxth	r2, r3
 8004536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004538:	801a      	strh	r2, [r3, #0]
 800453a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800453c:	881b      	ldrh	r3, [r3, #0]
 800453e:	b29b      	uxth	r3, r3
 8004540:	4aa9      	ldr	r2, [pc, #676]	; (80047e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8004542:	4313      	orrs	r3, r2
 8004544:	b29a      	uxth	r2, r3
 8004546:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004548:	801a      	strh	r2, [r3, #0]
 800454a:	e01b      	b.n	8004584 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d117      	bne.n	8004584 <HAL_PCD_EP_DB_Transmit+0x4c8>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	667b      	str	r3, [r7, #100]	; 0x64
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	2250      	movs	r2, #80	; 0x50
 8004560:	5a9b      	ldrh	r3, [r3, r2]
 8004562:	b29b      	uxth	r3, r3
 8004564:	001a      	movs	r2, r3
 8004566:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004568:	189b      	adds	r3, r3, r2
 800456a:	667b      	str	r3, [r7, #100]	; 0x64
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	00da      	lsls	r2, r3, #3
 8004572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004574:	18d3      	adds	r3, r2, r3
 8004576:	4a9a      	ldr	r2, [pc, #616]	; (80047e0 <HAL_PCD_EP_DB_Transmit+0x724>)
 8004578:	4694      	mov	ip, r2
 800457a:	4463      	add	r3, ip
 800457c:	663b      	str	r3, [r7, #96]	; 0x60
 800457e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004580:	2200      	movs	r2, #0
 8004582:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	677b      	str	r3, [r7, #116]	; 0x74
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	785b      	ldrb	r3, [r3, #1]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d12b      	bne.n	80045ea <HAL_PCD_EP_DB_Transmit+0x52e>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2250      	movs	r2, #80	; 0x50
 800459e:	5a9b      	ldrh	r3, [r3, r2]
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	001a      	movs	r2, r3
 80045a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	00da      	lsls	r2, r3, #3
 80045b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045b2:	18d3      	adds	r3, r2, r3
 80045b4:	4a8b      	ldr	r2, [pc, #556]	; (80047e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 80045b6:	4694      	mov	ip, r2
 80045b8:	4463      	add	r3, ip
 80045ba:	2180      	movs	r1, #128	; 0x80
 80045bc:	187a      	adds	r2, r7, r1
 80045be:	6013      	str	r3, [r2, #0]
 80045c0:	187b      	adds	r3, r7, r1
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	059b      	lsls	r3, r3, #22
 80045ca:	0d9b      	lsrs	r3, r3, #22
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	187b      	adds	r3, r7, r1
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	801a      	strh	r2, [r3, #0]
 80045d4:	187b      	adds	r3, r7, r1
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	4a82      	ldr	r2, [pc, #520]	; (80047e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	187b      	adds	r3, r7, r1
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	801a      	strh	r2, [r3, #0]
 80045e8:	e018      	b.n	800461c <HAL_PCD_EP_DB_Transmit+0x560>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	785b      	ldrb	r3, [r3, #1]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d114      	bne.n	800461c <HAL_PCD_EP_DB_Transmit+0x560>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	2250      	movs	r2, #80	; 0x50
 80045f8:	5a9b      	ldrh	r3, [r3, r2]
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	001a      	movs	r2, r3
 80045fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004600:	189b      	adds	r3, r3, r2
 8004602:	677b      	str	r3, [r7, #116]	; 0x74
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	00da      	lsls	r2, r3, #3
 800460a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800460c:	18d3      	adds	r3, r2, r3
 800460e:	4a75      	ldr	r2, [pc, #468]	; (80047e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 8004610:	4694      	mov	ip, r2
 8004612:	4463      	add	r3, ip
 8004614:	673b      	str	r3, [r7, #112]	; 0x70
 8004616:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004618:	2200      	movs	r2, #0
 800461a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781a      	ldrb	r2, [r3, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	0011      	movs	r1, r2
 8004624:	0018      	movs	r0, r3
 8004626:	f007 fe29 	bl	800c27c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800462a:	1dbb      	adds	r3, r7, #6
 800462c:	881a      	ldrh	r2, [r3, #0]
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	01db      	lsls	r3, r3, #7
 8004632:	4013      	ands	r3, r2
 8004634:	d000      	beq.n	8004638 <HAL_PCD_EP_DB_Transmit+0x57c>
 8004636:	e11e      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	001a      	movs	r2, r3
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	18d3      	adds	r3, r2, r3
 8004646:	881b      	ldrh	r3, [r3, #0]
 8004648:	b29a      	uxth	r2, r3
 800464a:	2088      	movs	r0, #136	; 0x88
 800464c:	183b      	adds	r3, r7, r0
 800464e:	4967      	ldr	r1, [pc, #412]	; (80047ec <HAL_PCD_EP_DB_Transmit+0x730>)
 8004650:	400a      	ands	r2, r1
 8004652:	801a      	strh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	001a      	movs	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	18d3      	adds	r3, r2, r3
 8004662:	183a      	adds	r2, r7, r0
 8004664:	8812      	ldrh	r2, [r2, #0]
 8004666:	4962      	ldr	r1, [pc, #392]	; (80047f0 <HAL_PCD_EP_DB_Transmit+0x734>)
 8004668:	430a      	orrs	r2, r1
 800466a:	b292      	uxth	r2, r2
 800466c:	801a      	strh	r2, [r3, #0]
 800466e:	e102      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004670:	1dbb      	adds	r3, r7, #6
 8004672:	881a      	ldrh	r2, [r3, #0]
 8004674:	2380      	movs	r3, #128	; 0x80
 8004676:	01db      	lsls	r3, r3, #7
 8004678:	4013      	ands	r3, r2
 800467a:	d11a      	bne.n	80046b2 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	001a      	movs	r2, r3
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	18d3      	adds	r3, r2, r3
 800468a:	881b      	ldrh	r3, [r3, #0]
 800468c:	b29a      	uxth	r2, r3
 800468e:	204e      	movs	r0, #78	; 0x4e
 8004690:	183b      	adds	r3, r7, r0
 8004692:	4956      	ldr	r1, [pc, #344]	; (80047ec <HAL_PCD_EP_DB_Transmit+0x730>)
 8004694:	400a      	ands	r2, r1
 8004696:	801a      	strh	r2, [r3, #0]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	001a      	movs	r2, r3
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	18d3      	adds	r3, r2, r3
 80046a6:	183a      	adds	r2, r7, r0
 80046a8:	8812      	ldrh	r2, [r2, #0]
 80046aa:	4951      	ldr	r1, [pc, #324]	; (80047f0 <HAL_PCD_EP_DB_Transmit+0x734>)
 80046ac:	430a      	orrs	r2, r1
 80046ae:	b292      	uxth	r2, r2
 80046b0:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2224      	movs	r2, #36	; 0x24
 80046b6:	5c9b      	ldrb	r3, [r3, r2]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d000      	beq.n	80046be <HAL_PCD_EP_DB_Transmit+0x602>
 80046bc:	e0db      	b.n	8004876 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	2186      	movs	r1, #134	; 0x86
 80046c4:	187b      	adds	r3, r7, r1
 80046c6:	881b      	ldrh	r3, [r3, #0]
 80046c8:	18d2      	adds	r2, r2, r3
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	187b      	adds	r3, r7, r1
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	18d2      	adds	r2, r2, r3
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6a1a      	ldr	r2, [r3, #32]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d30c      	bcc.n	8004702 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	691b      	ldr	r3, [r3, #16]
 80046ec:	218c      	movs	r1, #140	; 0x8c
 80046ee:	187a      	adds	r2, r7, r1
 80046f0:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	6a1a      	ldr	r2, [r3, #32]
 80046f6:	187b      	adds	r3, r7, r1
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	1ad2      	subs	r2, r2, r3
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	621a      	str	r2, [r3, #32]
 8004700:	e01a      	b.n	8004738 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800470a:	2386      	movs	r3, #134	; 0x86
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	881b      	ldrh	r3, [r3, #0]
 8004710:	228c      	movs	r2, #140	; 0x8c
 8004712:	18ba      	adds	r2, r7, r2
 8004714:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2224      	movs	r2, #36	; 0x24
 800471a:	2100      	movs	r1, #0
 800471c:	5499      	strb	r1, [r3, r2]
 800471e:	e00b      	b.n	8004738 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	228c      	movs	r2, #140	; 0x8c
 8004726:	18ba      	adds	r2, r7, r2
 8004728:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	2200      	movs	r2, #0
 800472e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2224      	movs	r2, #36	; 0x24
 8004734:	2100      	movs	r1, #0
 8004736:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	657b      	str	r3, [r7, #84]	; 0x54
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	785b      	ldrb	r3, [r3, #1]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d000      	beq.n	8004748 <HAL_PCD_EP_DB_Transmit+0x68c>
 8004746:	e06e      	b.n	8004826 <HAL_PCD_EP_DB_Transmit+0x76a>
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	2250      	movs	r2, #80	; 0x50
 8004754:	5a9b      	ldrh	r3, [r3, r2]
 8004756:	b29b      	uxth	r3, r3
 8004758:	001a      	movs	r2, r3
 800475a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800475c:	189b      	adds	r3, r3, r2
 800475e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	00da      	lsls	r2, r3, #3
 8004766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004768:	18d3      	adds	r3, r2, r3
 800476a:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <HAL_PCD_EP_DB_Transmit+0x728>)
 800476c:	4694      	mov	ip, r2
 800476e:	4463      	add	r3, ip
 8004770:	65bb      	str	r3, [r7, #88]	; 0x58
 8004772:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	b29b      	uxth	r3, r3
 8004778:	059b      	lsls	r3, r3, #22
 800477a:	0d9b      	lsrs	r3, r3, #22
 800477c:	b29a      	uxth	r2, r3
 800477e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004780:	801a      	strh	r2, [r3, #0]
 8004782:	228c      	movs	r2, #140	; 0x8c
 8004784:	18bb      	adds	r3, r7, r2
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b3e      	cmp	r3, #62	; 0x3e
 800478a:	d91a      	bls.n	80047c2 <HAL_PCD_EP_DB_Transmit+0x706>
 800478c:	18bb      	adds	r3, r7, r2
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	66bb      	str	r3, [r7, #104]	; 0x68
 8004794:	18bb      	adds	r3, r7, r2
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	221f      	movs	r2, #31
 800479a:	4013      	ands	r3, r2
 800479c:	d102      	bne.n	80047a4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800479e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047a0:	3b01      	subs	r3, #1
 80047a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a6:	881b      	ldrh	r3, [r3, #0]
 80047a8:	b29a      	uxth	r2, r3
 80047aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	029b      	lsls	r3, r3, #10
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	4313      	orrs	r3, r2
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	4a0c      	ldr	r2, [pc, #48]	; (80047e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047be:	801a      	strh	r2, [r3, #0]
 80047c0:	e04d      	b.n	800485e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80047c2:	238c      	movs	r3, #140	; 0x8c
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d113      	bne.n	80047f4 <HAL_PCD_EP_DB_Transmit+0x738>
 80047cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	4a05      	ldr	r2, [pc, #20]	; (80047e8 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047da:	801a      	strh	r2, [r3, #0]
 80047dc:	e03f      	b.n	800485e <HAL_PCD_EP_DB_Transmit+0x7a2>
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	00000402 	.word	0x00000402
 80047e4:	00000406 	.word	0x00000406
 80047e8:	ffff8000 	.word	0xffff8000
 80047ec:	ffff8f8f 	.word	0xffff8f8f
 80047f0:	ffffc080 	.word	0xffffc080
 80047f4:	228c      	movs	r2, #140	; 0x8c
 80047f6:	18bb      	adds	r3, r7, r2
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	085b      	lsrs	r3, r3, #1
 80047fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80047fe:	18bb      	adds	r3, r7, r2
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2201      	movs	r2, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d002      	beq.n	800480e <HAL_PCD_EP_DB_Transmit+0x752>
 8004808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800480a:	3301      	adds	r3, #1
 800480c:	66bb      	str	r3, [r7, #104]	; 0x68
 800480e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	b29a      	uxth	r2, r3
 8004814:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004816:	b29b      	uxth	r3, r3
 8004818:	029b      	lsls	r3, r3, #10
 800481a:	b29b      	uxth	r3, r3
 800481c:	4313      	orrs	r3, r2
 800481e:	b29a      	uxth	r2, r3
 8004820:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	e01b      	b.n	800485e <HAL_PCD_EP_DB_Transmit+0x7a2>
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	2b01      	cmp	r3, #1
 800482c:	d117      	bne.n	800485e <HAL_PCD_EP_DB_Transmit+0x7a2>
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	2250      	movs	r2, #80	; 0x50
 8004834:	5a9b      	ldrh	r3, [r3, r2]
 8004836:	b29b      	uxth	r3, r3
 8004838:	001a      	movs	r2, r3
 800483a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483c:	189b      	adds	r3, r3, r2
 800483e:	657b      	str	r3, [r7, #84]	; 0x54
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	00da      	lsls	r2, r3, #3
 8004846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004848:	18d3      	adds	r3, r2, r3
 800484a:	4a21      	ldr	r2, [pc, #132]	; (80048d0 <HAL_PCD_EP_DB_Transmit+0x814>)
 800484c:	4694      	mov	ip, r2
 800484e:	4463      	add	r3, ip
 8004850:	653b      	str	r3, [r7, #80]	; 0x50
 8004852:	238c      	movs	r3, #140	; 0x8c
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	b29a      	uxth	r2, r3
 800485a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800485c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	6959      	ldr	r1, [r3, #20]
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	895a      	ldrh	r2, [r3, #10]
 800486a:	238c      	movs	r3, #140	; 0x8c
 800486c:	18fb      	adds	r3, r7, r3
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	b29b      	uxth	r3, r3
 8004872:	f005 fc5d 	bl	800a130 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	001a      	movs	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	009b      	lsls	r3, r3, #2
 8004882:	18d3      	adds	r3, r2, r3
 8004884:	881b      	ldrh	r3, [r3, #0]
 8004886:	b29a      	uxth	r2, r3
 8004888:	2014      	movs	r0, #20
 800488a:	183b      	adds	r3, r7, r0
 800488c:	4911      	ldr	r1, [pc, #68]	; (80048d4 <HAL_PCD_EP_DB_Transmit+0x818>)
 800488e:	400a      	ands	r2, r1
 8004890:	801a      	strh	r2, [r3, #0]
 8004892:	183b      	adds	r3, r7, r0
 8004894:	183a      	adds	r2, r7, r0
 8004896:	8812      	ldrh	r2, [r2, #0]
 8004898:	2110      	movs	r1, #16
 800489a:	404a      	eors	r2, r1
 800489c:	801a      	strh	r2, [r3, #0]
 800489e:	183b      	adds	r3, r7, r0
 80048a0:	183a      	adds	r2, r7, r0
 80048a2:	8812      	ldrh	r2, [r2, #0]
 80048a4:	2120      	movs	r1, #32
 80048a6:	404a      	eors	r2, r1
 80048a8:	801a      	strh	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	001a      	movs	r2, r3
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	18d3      	adds	r3, r2, r3
 80048b8:	183a      	adds	r2, r7, r0
 80048ba:	8812      	ldrh	r2, [r2, #0]
 80048bc:	4906      	ldr	r1, [pc, #24]	; (80048d8 <HAL_PCD_EP_DB_Transmit+0x81c>)
 80048be:	430a      	orrs	r2, r1
 80048c0:	b292      	uxth	r2, r2
 80048c2:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	0018      	movs	r0, r3
 80048c8:	46bd      	mov	sp, r7
 80048ca:	b024      	add	sp, #144	; 0x90
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	00000406 	.word	0x00000406
 80048d4:	ffff8fbf 	.word	0xffff8fbf
 80048d8:	ffff8080 	.word	0xffff8080

080048dc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	0008      	movs	r0, r1
 80048e6:	0011      	movs	r1, r2
 80048e8:	607b      	str	r3, [r7, #4]
 80048ea:	240a      	movs	r4, #10
 80048ec:	193b      	adds	r3, r7, r4
 80048ee:	1c02      	adds	r2, r0, #0
 80048f0:	801a      	strh	r2, [r3, #0]
 80048f2:	2308      	movs	r3, #8
 80048f4:	18fb      	adds	r3, r7, r3
 80048f6:	1c0a      	adds	r2, r1, #0
 80048f8:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80048fa:	0021      	movs	r1, r4
 80048fc:	187b      	adds	r3, r7, r1
 80048fe:	881b      	ldrh	r3, [r3, #0]
 8004900:	2280      	movs	r2, #128	; 0x80
 8004902:	4013      	ands	r3, r2
 8004904:	b29b      	uxth	r3, r3
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00c      	beq.n	8004924 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800490a:	187b      	adds	r3, r7, r1
 800490c:	881b      	ldrh	r3, [r3, #0]
 800490e:	2207      	movs	r2, #7
 8004910:	4013      	ands	r3, r2
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	0013      	movs	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	189b      	adds	r3, r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	18d3      	adds	r3, r2, r3
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	e00b      	b.n	800493c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004924:	230a      	movs	r3, #10
 8004926:	18fb      	adds	r3, r7, r3
 8004928:	881a      	ldrh	r2, [r3, #0]
 800492a:	0013      	movs	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	189b      	adds	r3, r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	3369      	adds	r3, #105	; 0x69
 8004934:	33ff      	adds	r3, #255	; 0xff
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	18d3      	adds	r3, r2, r3
 800493a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800493c:	2308      	movs	r3, #8
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	881b      	ldrh	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	2200      	movs	r2, #0
 800494a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	b29a      	uxth	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	80da      	strh	r2, [r3, #6]
 8004954:	e00b      	b.n	800496e <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2201      	movs	r2, #1
 800495a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	b29a      	uxth	r2, r3
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	0c1b      	lsrs	r3, r3, #16
 8004968:	b29a      	uxth	r2, r3
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	0018      	movs	r0, r3
 8004972:	46bd      	mov	sp, r7
 8004974:	b007      	add	sp, #28
 8004976:	bd90      	pop	{r4, r7, pc}

08004978 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	23ba      	movs	r3, #186	; 0xba
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	2101      	movs	r1, #1
 800498e:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	23b8      	movs	r3, #184	; 0xb8
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	2100      	movs	r1, #0
 8004998:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2254      	movs	r2, #84	; 0x54
 800499e:	5a9b      	ldrh	r3, [r3, r2]
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b299      	uxth	r1, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2254      	movs	r2, #84	; 0x54
 80049ac:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	2254      	movs	r2, #84	; 0x54
 80049b2:	5a9b      	ldrh	r3, [r3, r2]
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	2202      	movs	r2, #2
 80049b8:	4313      	orrs	r3, r2
 80049ba:	b299      	uxth	r1, r3
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2254      	movs	r2, #84	; 0x54
 80049c0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	0018      	movs	r0, r3
 80049c6:	46bd      	mov	sp, r7
 80049c8:	b004      	add	sp, #16
 80049ca:	bd80      	pop	{r7, pc}

080049cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	000a      	movs	r2, r1
 80049d6:	1cfb      	adds	r3, r7, #3
 80049d8:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80049da:	46c0      	nop			; (mov r8, r8)
 80049dc:	46bd      	mov	sp, r7
 80049de:	b002      	add	sp, #8
 80049e0:	bd80      	pop	{r7, pc}
	...

080049e4 <HAL_PWR_EnableBkUpAccess>:
  * @note  If the HSE divided by 32 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  PWR->CR |= (uint32_t)PWR_CR_DBP;
 80049e8:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	4b03      	ldr	r3, [pc, #12]	; (80049fc <HAL_PWR_EnableBkUpAccess+0x18>)
 80049ee:	2180      	movs	r1, #128	; 0x80
 80049f0:	0049      	lsls	r1, r1, #1
 80049f2:	430a      	orrs	r2, r1
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	46c0      	nop			; (mov r8, r8)
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40007000 	.word	0x40007000

08004a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d102      	bne.n	8004a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f000 fb76 	bl	8005100 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	d100      	bne.n	8004a20 <HAL_RCC_OscConfig+0x20>
 8004a1e:	e08e      	b.n	8004b3e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004a20:	4bc5      	ldr	r3, [pc, #788]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	220c      	movs	r2, #12
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b04      	cmp	r3, #4
 8004a2a:	d00e      	beq.n	8004a4a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004a2c:	4bc2      	ldr	r3, [pc, #776]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	220c      	movs	r2, #12
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d117      	bne.n	8004a68 <HAL_RCC_OscConfig+0x68>
 8004a38:	4bbf      	ldr	r3, [pc, #764]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a3a:	685a      	ldr	r2, [r3, #4]
 8004a3c:	23c0      	movs	r3, #192	; 0xc0
 8004a3e:	025b      	lsls	r3, r3, #9
 8004a40:	401a      	ands	r2, r3
 8004a42:	2380      	movs	r3, #128	; 0x80
 8004a44:	025b      	lsls	r3, r3, #9
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d10e      	bne.n	8004a68 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4a:	4bbb      	ldr	r3, [pc, #748]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	2380      	movs	r3, #128	; 0x80
 8004a50:	029b      	lsls	r3, r3, #10
 8004a52:	4013      	ands	r3, r2
 8004a54:	d100      	bne.n	8004a58 <HAL_RCC_OscConfig+0x58>
 8004a56:	e071      	b.n	8004b3c <HAL_RCC_OscConfig+0x13c>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d000      	beq.n	8004a62 <HAL_RCC_OscConfig+0x62>
 8004a60:	e06c      	b.n	8004b3c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f000 fb4c 	bl	8005100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d107      	bne.n	8004a80 <HAL_RCC_OscConfig+0x80>
 8004a70:	4bb1      	ldr	r3, [pc, #708]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	4bb0      	ldr	r3, [pc, #704]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a76:	2180      	movs	r1, #128	; 0x80
 8004a78:	0249      	lsls	r1, r1, #9
 8004a7a:	430a      	orrs	r2, r1
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e02f      	b.n	8004ae0 <HAL_RCC_OscConfig+0xe0>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10c      	bne.n	8004aa2 <HAL_RCC_OscConfig+0xa2>
 8004a88:	4bab      	ldr	r3, [pc, #684]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	4baa      	ldr	r3, [pc, #680]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a8e:	49ab      	ldr	r1, [pc, #684]	; (8004d3c <HAL_RCC_OscConfig+0x33c>)
 8004a90:	400a      	ands	r2, r1
 8004a92:	601a      	str	r2, [r3, #0]
 8004a94:	4ba8      	ldr	r3, [pc, #672]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	4ba7      	ldr	r3, [pc, #668]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004a9a:	49a9      	ldr	r1, [pc, #676]	; (8004d40 <HAL_RCC_OscConfig+0x340>)
 8004a9c:	400a      	ands	r2, r1
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	e01e      	b.n	8004ae0 <HAL_RCC_OscConfig+0xe0>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b05      	cmp	r3, #5
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_RCC_OscConfig+0xc8>
 8004aaa:	4ba3      	ldr	r3, [pc, #652]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4ba2      	ldr	r3, [pc, #648]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004ab0:	2180      	movs	r1, #128	; 0x80
 8004ab2:	02c9      	lsls	r1, r1, #11
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	601a      	str	r2, [r3, #0]
 8004ab8:	4b9f      	ldr	r3, [pc, #636]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004aba:	681a      	ldr	r2, [r3, #0]
 8004abc:	4b9e      	ldr	r3, [pc, #632]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004abe:	2180      	movs	r1, #128	; 0x80
 8004ac0:	0249      	lsls	r1, r1, #9
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	601a      	str	r2, [r3, #0]
 8004ac6:	e00b      	b.n	8004ae0 <HAL_RCC_OscConfig+0xe0>
 8004ac8:	4b9b      	ldr	r3, [pc, #620]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b9a      	ldr	r3, [pc, #616]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004ace:	499b      	ldr	r1, [pc, #620]	; (8004d3c <HAL_RCC_OscConfig+0x33c>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	4b98      	ldr	r3, [pc, #608]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	4b97      	ldr	r3, [pc, #604]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004ada:	4999      	ldr	r1, [pc, #612]	; (8004d40 <HAL_RCC_OscConfig+0x340>)
 8004adc:	400a      	ands	r2, r1
 8004ade:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d014      	beq.n	8004b12 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae8:	f7fd fe02 	bl	80026f0 <HAL_GetTick>
 8004aec:	0003      	movs	r3, r0
 8004aee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af0:	e008      	b.n	8004b04 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004af2:	f7fd fdfd 	bl	80026f0 <HAL_GetTick>
 8004af6:	0002      	movs	r2, r0
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	2b64      	cmp	r3, #100	; 0x64
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e2fd      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b04:	4b8c      	ldr	r3, [pc, #560]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	2380      	movs	r3, #128	; 0x80
 8004b0a:	029b      	lsls	r3, r3, #10
 8004b0c:	4013      	ands	r3, r2
 8004b0e:	d0f0      	beq.n	8004af2 <HAL_RCC_OscConfig+0xf2>
 8004b10:	e015      	b.n	8004b3e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b12:	f7fd fded 	bl	80026f0 <HAL_GetTick>
 8004b16:	0003      	movs	r3, r0
 8004b18:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1a:	e008      	b.n	8004b2e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b1c:	f7fd fde8 	bl	80026f0 <HAL_GetTick>
 8004b20:	0002      	movs	r2, r0
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	2b64      	cmp	r3, #100	; 0x64
 8004b28:	d901      	bls.n	8004b2e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e2e8      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b2e:	4b82      	ldr	r3, [pc, #520]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	2380      	movs	r3, #128	; 0x80
 8004b34:	029b      	lsls	r3, r3, #10
 8004b36:	4013      	ands	r3, r2
 8004b38:	d1f0      	bne.n	8004b1c <HAL_RCC_OscConfig+0x11c>
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b3c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2202      	movs	r2, #2
 8004b44:	4013      	ands	r3, r2
 8004b46:	d100      	bne.n	8004b4a <HAL_RCC_OscConfig+0x14a>
 8004b48:	e06c      	b.n	8004c24 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004b4a:	4b7b      	ldr	r3, [pc, #492]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	220c      	movs	r2, #12
 8004b50:	4013      	ands	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004b54:	4b78      	ldr	r3, [pc, #480]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	220c      	movs	r2, #12
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	2b08      	cmp	r3, #8
 8004b5e:	d11f      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1a0>
 8004b60:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	23c0      	movs	r3, #192	; 0xc0
 8004b66:	025b      	lsls	r3, r3, #9
 8004b68:	401a      	ands	r2, r3
 8004b6a:	2380      	movs	r3, #128	; 0x80
 8004b6c:	021b      	lsls	r3, r3, #8
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d116      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b72:	4b71      	ldr	r3, [pc, #452]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2202      	movs	r2, #2
 8004b78:	4013      	ands	r3, r2
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_OscConfig+0x188>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e2bb      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b88:	4b6b      	ldr	r3, [pc, #428]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	22f8      	movs	r2, #248	; 0xf8
 8004b8e:	4393      	bics	r3, r2
 8004b90:	0019      	movs	r1, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00da      	lsls	r2, r3, #3
 8004b98:	4b67      	ldr	r3, [pc, #412]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b9e:	e041      	b.n	8004c24 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d024      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ba8:	4b63      	ldr	r3, [pc, #396]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004bae:	2101      	movs	r1, #1
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb4:	f7fd fd9c 	bl	80026f0 <HAL_GetTick>
 8004bb8:	0003      	movs	r3, r0
 8004bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bbc:	e008      	b.n	8004bd0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bbe:	f7fd fd97 	bl	80026f0 <HAL_GetTick>
 8004bc2:	0002      	movs	r2, r0
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d901      	bls.n	8004bd0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e297      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bd0:	4b59      	ldr	r3, [pc, #356]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2202      	movs	r2, #2
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	d0f1      	beq.n	8004bbe <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bda:	4b57      	ldr	r3, [pc, #348]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	22f8      	movs	r2, #248	; 0xf8
 8004be0:	4393      	bics	r3, r2
 8004be2:	0019      	movs	r1, r3
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	00da      	lsls	r2, r3, #3
 8004bea:	4b53      	ldr	r3, [pc, #332]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004bec:	430a      	orrs	r2, r1
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e018      	b.n	8004c24 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bf2:	4b51      	ldr	r3, [pc, #324]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	4b50      	ldr	r3, [pc, #320]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	438a      	bics	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bfe:	f7fd fd77 	bl	80026f0 <HAL_GetTick>
 8004c02:	0003      	movs	r3, r0
 8004c04:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c08:	f7fd fd72 	bl	80026f0 <HAL_GetTick>
 8004c0c:	0002      	movs	r2, r0
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	1ad3      	subs	r3, r2, r3
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d901      	bls.n	8004c1a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8004c16:	2303      	movs	r3, #3
 8004c18:	e272      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c1a:	4b47      	ldr	r3, [pc, #284]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	4013      	ands	r3, r2
 8004c22:	d1f1      	bne.n	8004c08 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	d036      	beq.n	8004c9c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d019      	beq.n	8004c6a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c36:	4b40      	ldr	r3, [pc, #256]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004c38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c3a:	4b3f      	ldr	r3, [pc, #252]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	430a      	orrs	r2, r1
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c42:	f7fd fd55 	bl	80026f0 <HAL_GetTick>
 8004c46:	0003      	movs	r3, r0
 8004c48:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c4c:	f7fd fd50 	bl	80026f0 <HAL_GetTick>
 8004c50:	0002      	movs	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e250      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c5e:	4b36      	ldr	r3, [pc, #216]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c62:	2202      	movs	r2, #2
 8004c64:	4013      	ands	r3, r2
 8004c66:	d0f1      	beq.n	8004c4c <HAL_RCC_OscConfig+0x24c>
 8004c68:	e018      	b.n	8004c9c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c6a:	4b33      	ldr	r3, [pc, #204]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004c6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c6e:	4b32      	ldr	r3, [pc, #200]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004c70:	2101      	movs	r1, #1
 8004c72:	438a      	bics	r2, r1
 8004c74:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c76:	f7fd fd3b 	bl	80026f0 <HAL_GetTick>
 8004c7a:	0003      	movs	r3, r0
 8004c7c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c80:	f7fd fd36 	bl	80026f0 <HAL_GetTick>
 8004c84:	0002      	movs	r2, r0
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e236      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c92:	4b29      	ldr	r3, [pc, #164]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c96:	2202      	movs	r2, #2
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d1f1      	bne.n	8004c80 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d100      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x2a8>
 8004ca6:	e0b5      	b.n	8004e14 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca8:	201f      	movs	r0, #31
 8004caa:	183b      	adds	r3, r7, r0
 8004cac:	2200      	movs	r2, #0
 8004cae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cb0:	4b21      	ldr	r3, [pc, #132]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004cb2:	69da      	ldr	r2, [r3, #28]
 8004cb4:	2380      	movs	r3, #128	; 0x80
 8004cb6:	055b      	lsls	r3, r3, #21
 8004cb8:	4013      	ands	r3, r2
 8004cba:	d110      	bne.n	8004cde <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cbc:	4b1e      	ldr	r3, [pc, #120]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	4b1d      	ldr	r3, [pc, #116]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004cc2:	2180      	movs	r1, #128	; 0x80
 8004cc4:	0549      	lsls	r1, r1, #21
 8004cc6:	430a      	orrs	r2, r1
 8004cc8:	61da      	str	r2, [r3, #28]
 8004cca:	4b1b      	ldr	r3, [pc, #108]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004ccc:	69da      	ldr	r2, [r3, #28]
 8004cce:	2380      	movs	r3, #128	; 0x80
 8004cd0:	055b      	lsls	r3, r3, #21
 8004cd2:	4013      	ands	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cd8:	183b      	adds	r3, r7, r0
 8004cda:	2201      	movs	r2, #1
 8004cdc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cde:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <HAL_RCC_OscConfig+0x344>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	2380      	movs	r3, #128	; 0x80
 8004ce4:	005b      	lsls	r3, r3, #1
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	d11a      	bne.n	8004d20 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <HAL_RCC_OscConfig+0x344>)
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <HAL_RCC_OscConfig+0x344>)
 8004cf0:	2180      	movs	r1, #128	; 0x80
 8004cf2:	0049      	lsls	r1, r1, #1
 8004cf4:	430a      	orrs	r2, r1
 8004cf6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf8:	f7fd fcfa 	bl	80026f0 <HAL_GetTick>
 8004cfc:	0003      	movs	r3, r0
 8004cfe:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d02:	f7fd fcf5 	bl	80026f0 <HAL_GetTick>
 8004d06:	0002      	movs	r2, r0
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b64      	cmp	r3, #100	; 0x64
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e1f5      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d14:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_OscConfig+0x344>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	005b      	lsls	r3, r3, #1
 8004d1c:	4013      	ands	r3, r2
 8004d1e:	d0f0      	beq.n	8004d02 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d10f      	bne.n	8004d48 <HAL_RCC_OscConfig+0x348>
 8004d28:	4b03      	ldr	r3, [pc, #12]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004d2a:	6a1a      	ldr	r2, [r3, #32]
 8004d2c:	4b02      	ldr	r3, [pc, #8]	; (8004d38 <HAL_RCC_OscConfig+0x338>)
 8004d2e:	2101      	movs	r1, #1
 8004d30:	430a      	orrs	r2, r1
 8004d32:	621a      	str	r2, [r3, #32]
 8004d34:	e036      	b.n	8004da4 <HAL_RCC_OscConfig+0x3a4>
 8004d36:	46c0      	nop			; (mov r8, r8)
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	fffeffff 	.word	0xfffeffff
 8004d40:	fffbffff 	.word	0xfffbffff
 8004d44:	40007000 	.word	0x40007000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10c      	bne.n	8004d6a <HAL_RCC_OscConfig+0x36a>
 8004d50:	4bca      	ldr	r3, [pc, #808]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d52:	6a1a      	ldr	r2, [r3, #32]
 8004d54:	4bc9      	ldr	r3, [pc, #804]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d56:	2101      	movs	r1, #1
 8004d58:	438a      	bics	r2, r1
 8004d5a:	621a      	str	r2, [r3, #32]
 8004d5c:	4bc7      	ldr	r3, [pc, #796]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d5e:	6a1a      	ldr	r2, [r3, #32]
 8004d60:	4bc6      	ldr	r3, [pc, #792]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d62:	2104      	movs	r1, #4
 8004d64:	438a      	bics	r2, r1
 8004d66:	621a      	str	r2, [r3, #32]
 8004d68:	e01c      	b.n	8004da4 <HAL_RCC_OscConfig+0x3a4>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b05      	cmp	r3, #5
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x38c>
 8004d72:	4bc2      	ldr	r3, [pc, #776]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d74:	6a1a      	ldr	r2, [r3, #32]
 8004d76:	4bc1      	ldr	r3, [pc, #772]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d78:	2104      	movs	r1, #4
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	621a      	str	r2, [r3, #32]
 8004d7e:	4bbf      	ldr	r3, [pc, #764]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d80:	6a1a      	ldr	r2, [r3, #32]
 8004d82:	4bbe      	ldr	r3, [pc, #760]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d84:	2101      	movs	r1, #1
 8004d86:	430a      	orrs	r2, r1
 8004d88:	621a      	str	r2, [r3, #32]
 8004d8a:	e00b      	b.n	8004da4 <HAL_RCC_OscConfig+0x3a4>
 8004d8c:	4bbb      	ldr	r3, [pc, #748]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d8e:	6a1a      	ldr	r2, [r3, #32]
 8004d90:	4bba      	ldr	r3, [pc, #744]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d92:	2101      	movs	r1, #1
 8004d94:	438a      	bics	r2, r1
 8004d96:	621a      	str	r2, [r3, #32]
 8004d98:	4bb8      	ldr	r3, [pc, #736]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d9a:	6a1a      	ldr	r2, [r3, #32]
 8004d9c:	4bb7      	ldr	r3, [pc, #732]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004d9e:	2104      	movs	r1, #4
 8004da0:	438a      	bics	r2, r1
 8004da2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d014      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dac:	f7fd fca0 	bl	80026f0 <HAL_GetTick>
 8004db0:	0003      	movs	r3, r0
 8004db2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db4:	e009      	b.n	8004dca <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f7fd fc9b 	bl	80026f0 <HAL_GetTick>
 8004dba:	0002      	movs	r2, r0
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	4aaf      	ldr	r2, [pc, #700]	; (8005080 <HAL_RCC_OscConfig+0x680>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e19a      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dca:	4bac      	ldr	r3, [pc, #688]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004dcc:	6a1b      	ldr	r3, [r3, #32]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	d0f0      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3b6>
 8004dd4:	e013      	b.n	8004dfe <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd6:	f7fd fc8b 	bl	80026f0 <HAL_GetTick>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dde:	e009      	b.n	8004df4 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004de0:	f7fd fc86 	bl	80026f0 <HAL_GetTick>
 8004de4:	0002      	movs	r2, r0
 8004de6:	69bb      	ldr	r3, [r7, #24]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	4aa5      	ldr	r2, [pc, #660]	; (8005080 <HAL_RCC_OscConfig+0x680>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e185      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004df4:	4ba1      	ldr	r3, [pc, #644]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004df6:	6a1b      	ldr	r3, [r3, #32]
 8004df8:	2202      	movs	r2, #2
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	d1f0      	bne.n	8004de0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004dfe:	231f      	movs	r3, #31
 8004e00:	18fb      	adds	r3, r7, r3
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e08:	4b9c      	ldr	r3, [pc, #624]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	4b9b      	ldr	r3, [pc, #620]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e0e:	499d      	ldr	r1, [pc, #628]	; (8005084 <HAL_RCC_OscConfig+0x684>)
 8004e10:	400a      	ands	r2, r1
 8004e12:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2210      	movs	r2, #16
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	d063      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d12a      	bne.n	8004e7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004e26:	4b95      	ldr	r3, [pc, #596]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2a:	4b94      	ldr	r3, [pc, #592]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e2c:	2104      	movs	r1, #4
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004e32:	4b92      	ldr	r3, [pc, #584]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e36:	4b91      	ldr	r3, [pc, #580]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e38:	2101      	movs	r1, #1
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3e:	f7fd fc57 	bl	80026f0 <HAL_GetTick>
 8004e42:	0003      	movs	r3, r0
 8004e44:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e46:	e008      	b.n	8004e5a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004e48:	f7fd fc52 	bl	80026f0 <HAL_GetTick>
 8004e4c:	0002      	movs	r2, r0
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d901      	bls.n	8004e5a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e152      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004e5a:	4b88      	ldr	r3, [pc, #544]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	2202      	movs	r2, #2
 8004e60:	4013      	ands	r3, r2
 8004e62:	d0f1      	beq.n	8004e48 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e64:	4b85      	ldr	r3, [pc, #532]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e68:	22f8      	movs	r2, #248	; 0xf8
 8004e6a:	4393      	bics	r3, r2
 8004e6c:	0019      	movs	r1, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	00da      	lsls	r2, r3, #3
 8004e74:	4b81      	ldr	r3, [pc, #516]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e76:	430a      	orrs	r2, r1
 8004e78:	635a      	str	r2, [r3, #52]	; 0x34
 8004e7a:	e034      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	3305      	adds	r3, #5
 8004e82:	d111      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004e84:	4b7d      	ldr	r3, [pc, #500]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e88:	4b7c      	ldr	r3, [pc, #496]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e8a:	2104      	movs	r1, #4
 8004e8c:	438a      	bics	r2, r1
 8004e8e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004e90:	4b7a      	ldr	r3, [pc, #488]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e94:	22f8      	movs	r2, #248	; 0xf8
 8004e96:	4393      	bics	r3, r2
 8004e98:	0019      	movs	r1, r3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	00da      	lsls	r2, r3, #3
 8004ea0:	4b76      	ldr	r3, [pc, #472]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34
 8004ea6:	e01e      	b.n	8004ee6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ea8:	4b74      	ldr	r3, [pc, #464]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004eaa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eac:	4b73      	ldr	r3, [pc, #460]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004eae:	2104      	movs	r1, #4
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004eb4:	4b71      	ldr	r3, [pc, #452]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004eb8:	4b70      	ldr	r3, [pc, #448]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004eba:	2101      	movs	r1, #1
 8004ebc:	438a      	bics	r2, r1
 8004ebe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ec0:	f7fd fc16 	bl	80026f0 <HAL_GetTick>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ec8:	e008      	b.n	8004edc <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004eca:	f7fd fc11 	bl	80026f0 <HAL_GetTick>
 8004ece:	0002      	movs	r2, r0
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	1ad3      	subs	r3, r2, r3
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d901      	bls.n	8004edc <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e111      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004edc:	4b67      	ldr	r3, [pc, #412]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	d1f1      	bne.n	8004eca <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	2220      	movs	r2, #32
 8004eec:	4013      	ands	r3, r2
 8004eee:	d05c      	beq.n	8004faa <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004ef0:	4b62      	ldr	r3, [pc, #392]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	220c      	movs	r2, #12
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	2b0c      	cmp	r3, #12
 8004efa:	d00e      	beq.n	8004f1a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004efc:	4b5f      	ldr	r3, [pc, #380]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	220c      	movs	r2, #12
 8004f02:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d114      	bne.n	8004f32 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8004f08:	4b5c      	ldr	r3, [pc, #368]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f0a:	685a      	ldr	r2, [r3, #4]
 8004f0c:	23c0      	movs	r3, #192	; 0xc0
 8004f0e:	025b      	lsls	r3, r3, #9
 8004f10:	401a      	ands	r2, r3
 8004f12:	23c0      	movs	r3, #192	; 0xc0
 8004f14:	025b      	lsls	r3, r3, #9
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d10b      	bne.n	8004f32 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004f1a:	4b58      	ldr	r3, [pc, #352]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	029b      	lsls	r3, r3, #10
 8004f22:	4013      	ands	r3, r2
 8004f24:	d040      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x5a8>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d03c      	beq.n	8004fa8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0e6      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01b      	beq.n	8004f72 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8004f3a:	4b50      	ldr	r3, [pc, #320]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f3e:	4b4f      	ldr	r3, [pc, #316]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f40:	2180      	movs	r1, #128	; 0x80
 8004f42:	0249      	lsls	r1, r1, #9
 8004f44:	430a      	orrs	r2, r1
 8004f46:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f48:	f7fd fbd2 	bl	80026f0 <HAL_GetTick>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f50:	e008      	b.n	8004f64 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f52:	f7fd fbcd 	bl	80026f0 <HAL_GetTick>
 8004f56:	0002      	movs	r2, r0
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	1ad3      	subs	r3, r2, r3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0cd      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004f64:	4b45      	ldr	r3, [pc, #276]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f68:	2380      	movs	r3, #128	; 0x80
 8004f6a:	029b      	lsls	r3, r3, #10
 8004f6c:	4013      	ands	r3, r2
 8004f6e:	d0f0      	beq.n	8004f52 <HAL_RCC_OscConfig+0x552>
 8004f70:	e01b      	b.n	8004faa <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8004f72:	4b42      	ldr	r3, [pc, #264]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f76:	4b41      	ldr	r3, [pc, #260]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f78:	4943      	ldr	r1, [pc, #268]	; (8005088 <HAL_RCC_OscConfig+0x688>)
 8004f7a:	400a      	ands	r2, r1
 8004f7c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f7e:	f7fd fbb7 	bl	80026f0 <HAL_GetTick>
 8004f82:	0003      	movs	r3, r0
 8004f84:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f88:	f7fd fbb2 	bl	80026f0 <HAL_GetTick>
 8004f8c:	0002      	movs	r2, r0
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e0b2      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004f9a:	4b38      	ldr	r3, [pc, #224]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004f9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	029b      	lsls	r3, r3, #10
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x588>
 8004fa6:	e000      	b.n	8004faa <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004fa8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d100      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x5b4>
 8004fb2:	e0a4      	b.n	80050fe <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004fb4:	4b31      	ldr	r3, [pc, #196]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	220c      	movs	r2, #12
 8004fba:	4013      	ands	r3, r2
 8004fbc:	2b08      	cmp	r3, #8
 8004fbe:	d100      	bne.n	8004fc2 <HAL_RCC_OscConfig+0x5c2>
 8004fc0:	e078      	b.n	80050b4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d14c      	bne.n	8005064 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fca:	4b2c      	ldr	r3, [pc, #176]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4b2b      	ldr	r3, [pc, #172]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004fd0:	492e      	ldr	r1, [pc, #184]	; (800508c <HAL_RCC_OscConfig+0x68c>)
 8004fd2:	400a      	ands	r2, r1
 8004fd4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fd6:	f7fd fb8b 	bl	80026f0 <HAL_GetTick>
 8004fda:	0003      	movs	r3, r0
 8004fdc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004fde:	e008      	b.n	8004ff2 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe0:	f7fd fb86 	bl	80026f0 <HAL_GetTick>
 8004fe4:	0002      	movs	r2, r0
 8004fe6:	69bb      	ldr	r3, [r7, #24]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e086      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ff2:	4b22      	ldr	r3, [pc, #136]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	2380      	movs	r3, #128	; 0x80
 8004ff8:	049b      	lsls	r3, r3, #18
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	d1f0      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ffe:	4b1f      	ldr	r3, [pc, #124]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8005000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005002:	220f      	movs	r2, #15
 8005004:	4393      	bics	r3, r2
 8005006:	0019      	movs	r1, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 800500e:	430a      	orrs	r2, r1
 8005010:	62da      	str	r2, [r3, #44]	; 0x2c
 8005012:	4b1a      	ldr	r3, [pc, #104]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	4a1e      	ldr	r2, [pc, #120]	; (8005090 <HAL_RCC_OscConfig+0x690>)
 8005018:	4013      	ands	r3, r2
 800501a:	0019      	movs	r1, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005024:	431a      	orrs	r2, r3
 8005026:	4b15      	ldr	r3, [pc, #84]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8005028:	430a      	orrs	r2, r1
 800502a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800502c:	4b13      	ldr	r3, [pc, #76]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 800502e:	681a      	ldr	r2, [r3, #0]
 8005030:	4b12      	ldr	r3, [pc, #72]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8005032:	2180      	movs	r1, #128	; 0x80
 8005034:	0449      	lsls	r1, r1, #17
 8005036:	430a      	orrs	r2, r1
 8005038:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fd fb59 	bl	80026f0 <HAL_GetTick>
 800503e:	0003      	movs	r3, r0
 8005040:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005044:	f7fd fb54 	bl	80026f0 <HAL_GetTick>
 8005048:	0002      	movs	r2, r0
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e054      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005056:	4b09      	ldr	r3, [pc, #36]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8005058:	681a      	ldr	r2, [r3, #0]
 800505a:	2380      	movs	r3, #128	; 0x80
 800505c:	049b      	lsls	r3, r3, #18
 800505e:	4013      	ands	r3, r2
 8005060:	d0f0      	beq.n	8005044 <HAL_RCC_OscConfig+0x644>
 8005062:	e04c      	b.n	80050fe <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005064:	4b05      	ldr	r3, [pc, #20]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b04      	ldr	r3, [pc, #16]	; (800507c <HAL_RCC_OscConfig+0x67c>)
 800506a:	4908      	ldr	r1, [pc, #32]	; (800508c <HAL_RCC_OscConfig+0x68c>)
 800506c:	400a      	ands	r2, r1
 800506e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005070:	f7fd fb3e 	bl	80026f0 <HAL_GetTick>
 8005074:	0003      	movs	r3, r0
 8005076:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005078:	e015      	b.n	80050a6 <HAL_RCC_OscConfig+0x6a6>
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	40021000 	.word	0x40021000
 8005080:	00001388 	.word	0x00001388
 8005084:	efffffff 	.word	0xefffffff
 8005088:	fffeffff 	.word	0xfffeffff
 800508c:	feffffff 	.word	0xfeffffff
 8005090:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005094:	f7fd fb2c 	bl	80026f0 <HAL_GetTick>
 8005098:	0002      	movs	r2, r0
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	1ad3      	subs	r3, r2, r3
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e02c      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80050a6:	4b18      	ldr	r3, [pc, #96]	; (8005108 <HAL_RCC_OscConfig+0x708>)
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	2380      	movs	r3, #128	; 0x80
 80050ac:	049b      	lsls	r3, r3, #18
 80050ae:	4013      	ands	r3, r2
 80050b0:	d1f0      	bne.n	8005094 <HAL_RCC_OscConfig+0x694>
 80050b2:	e024      	b.n	80050fe <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e01f      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80050c0:	4b11      	ldr	r3, [pc, #68]	; (8005108 <HAL_RCC_OscConfig+0x708>)
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_RCC_OscConfig+0x708>)
 80050c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ca:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	23c0      	movs	r3, #192	; 0xc0
 80050d0:	025b      	lsls	r3, r3, #9
 80050d2:	401a      	ands	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d8:	429a      	cmp	r2, r3
 80050da:	d10e      	bne.n	80050fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	220f      	movs	r2, #15
 80050e0:	401a      	ands	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d107      	bne.n	80050fa <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	23f0      	movs	r3, #240	; 0xf0
 80050ee:	039b      	lsls	r3, r3, #14
 80050f0:	401a      	ands	r2, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d001      	beq.n	80050fe <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e000      	b.n	8005100 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	0018      	movs	r0, r3
 8005102:	46bd      	mov	sp, r7
 8005104:	b008      	add	sp, #32
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000

0800510c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d101      	bne.n	8005120 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	e0bf      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005120:	4b61      	ldr	r3, [pc, #388]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	2201      	movs	r2, #1
 8005126:	4013      	ands	r3, r2
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	429a      	cmp	r2, r3
 800512c:	d911      	bls.n	8005152 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800512e:	4b5e      	ldr	r3, [pc, #376]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2201      	movs	r2, #1
 8005134:	4393      	bics	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005140:	4b59      	ldr	r3, [pc, #356]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2201      	movs	r2, #1
 8005146:	4013      	ands	r3, r2
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d001      	beq.n	8005152 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e0a6      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2202      	movs	r2, #2
 8005158:	4013      	ands	r3, r2
 800515a:	d015      	beq.n	8005188 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2204      	movs	r2, #4
 8005162:	4013      	ands	r3, r2
 8005164:	d006      	beq.n	8005174 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005166:	4b51      	ldr	r3, [pc, #324]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	4b50      	ldr	r3, [pc, #320]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 800516c:	21e0      	movs	r1, #224	; 0xe0
 800516e:	00c9      	lsls	r1, r1, #3
 8005170:	430a      	orrs	r2, r1
 8005172:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005174:	4b4d      	ldr	r3, [pc, #308]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	22f0      	movs	r2, #240	; 0xf0
 800517a:	4393      	bics	r3, r2
 800517c:	0019      	movs	r1, r3
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689a      	ldr	r2, [r3, #8]
 8005182:	4b4a      	ldr	r3, [pc, #296]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 8005184:	430a      	orrs	r2, r1
 8005186:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2201      	movs	r2, #1
 800518e:	4013      	ands	r3, r2
 8005190:	d04c      	beq.n	800522c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d107      	bne.n	80051aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800519a:	4b44      	ldr	r3, [pc, #272]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	2380      	movs	r3, #128	; 0x80
 80051a0:	029b      	lsls	r3, r3, #10
 80051a2:	4013      	ands	r3, r2
 80051a4:	d120      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e07a      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d107      	bne.n	80051c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b2:	4b3e      	ldr	r3, [pc, #248]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 80051b4:	681a      	ldr	r2, [r3, #0]
 80051b6:	2380      	movs	r3, #128	; 0x80
 80051b8:	049b      	lsls	r3, r3, #18
 80051ba:	4013      	ands	r3, r2
 80051bc:	d114      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e06e      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	d107      	bne.n	80051da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80051ca:	4b38      	ldr	r3, [pc, #224]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 80051cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80051ce:	2380      	movs	r3, #128	; 0x80
 80051d0:	029b      	lsls	r3, r3, #10
 80051d2:	4013      	ands	r3, r2
 80051d4:	d108      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e062      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051da:	4b34      	ldr	r3, [pc, #208]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2202      	movs	r2, #2
 80051e0:	4013      	ands	r3, r2
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e05b      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051e8:	4b30      	ldr	r3, [pc, #192]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	2203      	movs	r2, #3
 80051ee:	4393      	bics	r3, r2
 80051f0:	0019      	movs	r1, r3
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	685a      	ldr	r2, [r3, #4]
 80051f6:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 80051f8:	430a      	orrs	r2, r1
 80051fa:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051fc:	f7fd fa78 	bl	80026f0 <HAL_GetTick>
 8005200:	0003      	movs	r3, r0
 8005202:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005204:	e009      	b.n	800521a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005206:	f7fd fa73 	bl	80026f0 <HAL_GetTick>
 800520a:	0002      	movs	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	4a27      	ldr	r2, [pc, #156]	; (80052b0 <HAL_RCC_ClockConfig+0x1a4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e042      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	220c      	movs	r2, #12
 8005220:	401a      	ands	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	429a      	cmp	r2, r3
 800522a:	d1ec      	bne.n	8005206 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800522c:	4b1e      	ldr	r3, [pc, #120]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2201      	movs	r2, #1
 8005232:	4013      	ands	r3, r2
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	429a      	cmp	r2, r3
 8005238:	d211      	bcs.n	800525e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800523a:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2201      	movs	r2, #1
 8005240:	4393      	bics	r3, r2
 8005242:	0019      	movs	r1, r3
 8005244:	4b18      	ldr	r3, [pc, #96]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <HAL_RCC_ClockConfig+0x19c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2201      	movs	r2, #1
 8005252:	4013      	ands	r3, r2
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d001      	beq.n	800525e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e020      	b.n	80052a0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2204      	movs	r2, #4
 8005264:	4013      	ands	r3, r2
 8005266:	d009      	beq.n	800527c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005268:	4b10      	ldr	r3, [pc, #64]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <HAL_RCC_ClockConfig+0x1a8>)
 800526e:	4013      	ands	r3, r2
 8005270:	0019      	movs	r1, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68da      	ldr	r2, [r3, #12]
 8005276:	4b0d      	ldr	r3, [pc, #52]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800527c:	f000 f820 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8005280:	0001      	movs	r1, r0
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <HAL_RCC_ClockConfig+0x1a0>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	091b      	lsrs	r3, r3, #4
 8005288:	220f      	movs	r2, #15
 800528a:	4013      	ands	r3, r2
 800528c:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <HAL_RCC_ClockConfig+0x1ac>)
 800528e:	5cd3      	ldrb	r3, [r2, r3]
 8005290:	000a      	movs	r2, r1
 8005292:	40da      	lsrs	r2, r3
 8005294:	4b09      	ldr	r3, [pc, #36]	; (80052bc <HAL_RCC_ClockConfig+0x1b0>)
 8005296:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8005298:	2003      	movs	r0, #3
 800529a:	f7fd f9e3 	bl	8002664 <HAL_InitTick>
  
  return HAL_OK;
 800529e:	2300      	movs	r3, #0
}
 80052a0:	0018      	movs	r0, r3
 80052a2:	46bd      	mov	sp, r7
 80052a4:	b004      	add	sp, #16
 80052a6:	bd80      	pop	{r7, pc}
 80052a8:	40022000 	.word	0x40022000
 80052ac:	40021000 	.word	0x40021000
 80052b0:	00001388 	.word	0x00001388
 80052b4:	fffff8ff 	.word	0xfffff8ff
 80052b8:	0800ed98 	.word	0x0800ed98
 80052bc:	20000058 	.word	0x20000058

080052c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	60bb      	str	r3, [r7, #8]
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
 80052d2:	2300      	movs	r3, #0
 80052d4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80052d6:	2300      	movs	r3, #0
 80052d8:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80052da:	4b2d      	ldr	r3, [pc, #180]	; (8005390 <HAL_RCC_GetSysClockFreq+0xd0>)
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	220c      	movs	r2, #12
 80052e4:	4013      	ands	r3, r2
 80052e6:	2b0c      	cmp	r3, #12
 80052e8:	d046      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0xb8>
 80052ea:	d848      	bhi.n	800537e <HAL_RCC_GetSysClockFreq+0xbe>
 80052ec:	2b04      	cmp	r3, #4
 80052ee:	d002      	beq.n	80052f6 <HAL_RCC_GetSysClockFreq+0x36>
 80052f0:	2b08      	cmp	r3, #8
 80052f2:	d003      	beq.n	80052fc <HAL_RCC_GetSysClockFreq+0x3c>
 80052f4:	e043      	b.n	800537e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80052f6:	4b27      	ldr	r3, [pc, #156]	; (8005394 <HAL_RCC_GetSysClockFreq+0xd4>)
 80052f8:	613b      	str	r3, [r7, #16]
      break;
 80052fa:	e043      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	0c9b      	lsrs	r3, r3, #18
 8005300:	220f      	movs	r2, #15
 8005302:	4013      	ands	r3, r2
 8005304:	4a24      	ldr	r2, [pc, #144]	; (8005398 <HAL_RCC_GetSysClockFreq+0xd8>)
 8005306:	5cd3      	ldrb	r3, [r2, r3]
 8005308:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800530a:	4b21      	ldr	r3, [pc, #132]	; (8005390 <HAL_RCC_GetSysClockFreq+0xd0>)
 800530c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800530e:	220f      	movs	r2, #15
 8005310:	4013      	ands	r3, r2
 8005312:	4a22      	ldr	r2, [pc, #136]	; (800539c <HAL_RCC_GetSysClockFreq+0xdc>)
 8005314:	5cd3      	ldrb	r3, [r2, r3]
 8005316:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	23c0      	movs	r3, #192	; 0xc0
 800531c:	025b      	lsls	r3, r3, #9
 800531e:	401a      	ands	r2, r3
 8005320:	2380      	movs	r3, #128	; 0x80
 8005322:	025b      	lsls	r3, r3, #9
 8005324:	429a      	cmp	r2, r3
 8005326:	d109      	bne.n	800533c <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005328:	68b9      	ldr	r1, [r7, #8]
 800532a:	481a      	ldr	r0, [pc, #104]	; (8005394 <HAL_RCC_GetSysClockFreq+0xd4>)
 800532c:	f7fa ff08 	bl	8000140 <__udivsi3>
 8005330:	0003      	movs	r3, r0
 8005332:	001a      	movs	r2, r3
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4353      	muls	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
 800533a:	e01a      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	23c0      	movs	r3, #192	; 0xc0
 8005340:	025b      	lsls	r3, r3, #9
 8005342:	401a      	ands	r2, r3
 8005344:	23c0      	movs	r3, #192	; 0xc0
 8005346:	025b      	lsls	r3, r3, #9
 8005348:	429a      	cmp	r2, r3
 800534a:	d109      	bne.n	8005360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	4814      	ldr	r0, [pc, #80]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 8005350:	f7fa fef6 	bl	8000140 <__udivsi3>
 8005354:	0003      	movs	r3, r0
 8005356:	001a      	movs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4353      	muls	r3, r2
 800535c:	617b      	str	r3, [r7, #20]
 800535e:	e008      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	480c      	ldr	r0, [pc, #48]	; (8005394 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005364:	f7fa feec 	bl	8000140 <__udivsi3>
 8005368:	0003      	movs	r3, r0
 800536a:	001a      	movs	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4353      	muls	r3, r2
 8005370:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	613b      	str	r3, [r7, #16]
      break;
 8005376:	e005      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8005378:	4b09      	ldr	r3, [pc, #36]	; (80053a0 <HAL_RCC_GetSysClockFreq+0xe0>)
 800537a:	613b      	str	r3, [r7, #16]
      break;
 800537c:	e002      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800537e:	4b05      	ldr	r3, [pc, #20]	; (8005394 <HAL_RCC_GetSysClockFreq+0xd4>)
 8005380:	613b      	str	r3, [r7, #16]
      break;
 8005382:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8005384:	693b      	ldr	r3, [r7, #16]
}
 8005386:	0018      	movs	r0, r3
 8005388:	46bd      	mov	sp, r7
 800538a:	b006      	add	sp, #24
 800538c:	bd80      	pop	{r7, pc}
 800538e:	46c0      	nop			; (mov r8, r8)
 8005390:	40021000 	.word	0x40021000
 8005394:	007a1200 	.word	0x007a1200
 8005398:	0800edb0 	.word	0x0800edb0
 800539c:	0800edc0 	.word	0x0800edc0
 80053a0:	02dc6c00 	.word	0x02dc6c00

080053a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a8:	4b02      	ldr	r3, [pc, #8]	; (80053b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	0018      	movs	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	46c0      	nop			; (mov r8, r8)
 80053b4:	20000058 	.word	0x20000058

080053b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80053bc:	f7ff fff2 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80053c0:	0001      	movs	r1, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	0a1b      	lsrs	r3, r3, #8
 80053c8:	2207      	movs	r2, #7
 80053ca:	4013      	ands	r3, r2
 80053cc:	4a04      	ldr	r2, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053ce:	5cd3      	ldrb	r3, [r2, r3]
 80053d0:	40d9      	lsrs	r1, r3
 80053d2:	000b      	movs	r3, r1
}    
 80053d4:	0018      	movs	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	46c0      	nop			; (mov r8, r8)
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800eda8 	.word	0x0800eda8

080053e4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80053f0:	2300      	movs	r3, #0
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	2380      	movs	r3, #128	; 0x80
 80053fa:	025b      	lsls	r3, r3, #9
 80053fc:	4013      	ands	r3, r2
 80053fe:	d100      	bne.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8005400:	e08e      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8005402:	2017      	movs	r0, #23
 8005404:	183b      	adds	r3, r7, r0
 8005406:	2200      	movs	r2, #0
 8005408:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800540a:	4b6e      	ldr	r3, [pc, #440]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800540c:	69da      	ldr	r2, [r3, #28]
 800540e:	2380      	movs	r3, #128	; 0x80
 8005410:	055b      	lsls	r3, r3, #21
 8005412:	4013      	ands	r3, r2
 8005414:	d110      	bne.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005416:	4b6b      	ldr	r3, [pc, #428]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005418:	69da      	ldr	r2, [r3, #28]
 800541a:	4b6a      	ldr	r3, [pc, #424]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800541c:	2180      	movs	r1, #128	; 0x80
 800541e:	0549      	lsls	r1, r1, #21
 8005420:	430a      	orrs	r2, r1
 8005422:	61da      	str	r2, [r3, #28]
 8005424:	4b67      	ldr	r3, [pc, #412]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	2380      	movs	r3, #128	; 0x80
 800542a:	055b      	lsls	r3, r3, #21
 800542c:	4013      	ands	r3, r2
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005432:	183b      	adds	r3, r7, r0
 8005434:	2201      	movs	r2, #1
 8005436:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005438:	4b63      	ldr	r3, [pc, #396]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	2380      	movs	r3, #128	; 0x80
 800543e:	005b      	lsls	r3, r3, #1
 8005440:	4013      	ands	r3, r2
 8005442:	d11a      	bne.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005444:	4b60      	ldr	r3, [pc, #384]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4b5f      	ldr	r3, [pc, #380]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800544a:	2180      	movs	r1, #128	; 0x80
 800544c:	0049      	lsls	r1, r1, #1
 800544e:	430a      	orrs	r2, r1
 8005450:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005452:	f7fd f94d 	bl	80026f0 <HAL_GetTick>
 8005456:	0003      	movs	r3, r0
 8005458:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800545a:	e008      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800545c:	f7fd f948 	bl	80026f0 <HAL_GetTick>
 8005460:	0002      	movs	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b64      	cmp	r3, #100	; 0x64
 8005468:	d901      	bls.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e0a6      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	2380      	movs	r3, #128	; 0x80
 8005474:	005b      	lsls	r3, r3, #1
 8005476:	4013      	ands	r3, r2
 8005478:	d0f0      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800547a:	4b52      	ldr	r3, [pc, #328]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800547c:	6a1a      	ldr	r2, [r3, #32]
 800547e:	23c0      	movs	r3, #192	; 0xc0
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4013      	ands	r3, r2
 8005484:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d034      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	23c0      	movs	r3, #192	; 0xc0
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4013      	ands	r3, r2
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	429a      	cmp	r2, r3
 800549a:	d02c      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800549c:	4b49      	ldr	r3, [pc, #292]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	4a4a      	ldr	r2, [pc, #296]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054a6:	4b47      	ldr	r3, [pc, #284]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054a8:	6a1a      	ldr	r2, [r3, #32]
 80054aa:	4b46      	ldr	r3, [pc, #280]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054ac:	2180      	movs	r1, #128	; 0x80
 80054ae:	0249      	lsls	r1, r1, #9
 80054b0:	430a      	orrs	r2, r1
 80054b2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054b4:	4b43      	ldr	r3, [pc, #268]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054b6:	6a1a      	ldr	r2, [r3, #32]
 80054b8:	4b42      	ldr	r3, [pc, #264]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054ba:	4945      	ldr	r1, [pc, #276]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80054bc:	400a      	ands	r2, r1
 80054be:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80054c0:	4b40      	ldr	r3, [pc, #256]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	4013      	ands	r3, r2
 80054cc:	d013      	beq.n	80054f6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ce:	f7fd f90f 	bl	80026f0 <HAL_GetTick>
 80054d2:	0003      	movs	r3, r0
 80054d4:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054d6:	e009      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054d8:	f7fd f90a 	bl	80026f0 <HAL_GetTick>
 80054dc:	0002      	movs	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	4a3c      	ldr	r2, [pc, #240]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d901      	bls.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e067      	b.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054ec:	4b35      	ldr	r3, [pc, #212]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	2202      	movs	r2, #2
 80054f2:	4013      	ands	r3, r2
 80054f4:	d0f0      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f6:	4b33      	ldr	r3, [pc, #204]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	4a34      	ldr	r2, [pc, #208]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	0019      	movs	r1, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4b2f      	ldr	r3, [pc, #188]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005506:	430a      	orrs	r2, r1
 8005508:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800550a:	2317      	movs	r3, #23
 800550c:	18fb      	adds	r3, r7, r3
 800550e:	781b      	ldrb	r3, [r3, #0]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d105      	bne.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005514:	4b2b      	ldr	r3, [pc, #172]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005516:	69da      	ldr	r2, [r3, #28]
 8005518:	4b2a      	ldr	r3, [pc, #168]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800551a:	492f      	ldr	r1, [pc, #188]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800551c:	400a      	ands	r2, r1
 800551e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2201      	movs	r2, #1
 8005526:	4013      	ands	r3, r2
 8005528:	d009      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	2203      	movs	r2, #3
 8005530:	4393      	bics	r3, r2
 8005532:	0019      	movs	r1, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689a      	ldr	r2, [r3, #8]
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800553a:	430a      	orrs	r2, r1
 800553c:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	2202      	movs	r2, #2
 8005544:	4013      	ands	r3, r2
 8005546:	d009      	beq.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005548:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	4a23      	ldr	r2, [pc, #140]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800554e:	4013      	ands	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	4b1b      	ldr	r3, [pc, #108]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005558:	430a      	orrs	r2, r1
 800555a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2220      	movs	r2, #32
 8005562:	4013      	ands	r3, r2
 8005564:	d009      	beq.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005566:	4b17      	ldr	r3, [pc, #92]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800556a:	2210      	movs	r2, #16
 800556c:	4393      	bics	r3, r2
 800556e:	0019      	movs	r1, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691a      	ldr	r2, [r3, #16]
 8005574:	4b13      	ldr	r3, [pc, #76]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005576:	430a      	orrs	r2, r1
 8005578:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	029b      	lsls	r3, r3, #10
 8005582:	4013      	ands	r3, r2
 8005584:	d009      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	2280      	movs	r2, #128	; 0x80
 800558c:	4393      	bics	r3, r2
 800558e:	0019      	movs	r1, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	699a      	ldr	r2, [r3, #24]
 8005594:	4b0b      	ldr	r3, [pc, #44]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8005596:	430a      	orrs	r2, r1
 8005598:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	2380      	movs	r3, #128	; 0x80
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4013      	ands	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055a6:	4b07      	ldr	r3, [pc, #28]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055aa:	2240      	movs	r2, #64	; 0x40
 80055ac:	4393      	bics	r3, r2
 80055ae:	0019      	movs	r1, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	695a      	ldr	r2, [r3, #20]
 80055b4:	4b03      	ldr	r3, [pc, #12]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80055b6:	430a      	orrs	r2, r1
 80055b8:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	0018      	movs	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	b006      	add	sp, #24
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	40021000 	.word	0x40021000
 80055c8:	40007000 	.word	0x40007000
 80055cc:	fffffcff 	.word	0xfffffcff
 80055d0:	fffeffff 	.word	0xfffeffff
 80055d4:	00001388 	.word	0x00001388
 80055d8:	efffffff 	.word	0xefffffff
 80055dc:	fffcffff 	.word	0xfffcffff

080055e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80055e0:	b5b0      	push	{r4, r5, r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80055e8:	230f      	movs	r3, #15
 80055ea:	18fb      	adds	r3, r7, r3
 80055ec:	2201      	movs	r2, #1
 80055ee:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0a2      	b.n	8005740 <HAL_RTC_Init+0x160>
  assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
  assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
  assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	7f5b      	ldrb	r3, [r3, #29]
 80055fe:	b2db      	uxtb	r3, r3
 8005600:	2b00      	cmp	r3, #0
 8005602:	d127      	bne.n	8005654 <HAL_RTC_Init+0x74>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	771a      	strb	r2, [r3, #28]

    hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;        /* Legacy weak AlarmAEventCallback      */
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a4e      	ldr	r2, [pc, #312]	; (8005748 <HAL_RTC_Init+0x168>)
 800560e:	621a      	str	r2, [r3, #32]
    hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;   /* Legacy weak TimeStampEventCallback   */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a4e      	ldr	r2, [pc, #312]	; (800574c <HAL_RTC_Init+0x16c>)
 8005614:	625a      	str	r2, [r3, #36]	; 0x24
#if defined(RTC_WAKEUP_SUPPORT)
    hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpTimerEventCallback */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a4d      	ldr	r2, [pc, #308]	; (8005750 <HAL_RTC_Init+0x170>)
 800561a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* RTC_WAKEUP_SUPPORT */
    hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;     /* Legacy weak Tamper1EventCallback     */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	4a4d      	ldr	r2, [pc, #308]	; (8005754 <HAL_RTC_Init+0x174>)
 8005620:	62da      	str	r2, [r3, #44]	; 0x2c
    hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;     /* Legacy weak Tamper2EventCallback     */
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a4c      	ldr	r2, [pc, #304]	; (8005758 <HAL_RTC_Init+0x178>)
 8005626:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(RTC_TAMPER3_SUPPORT)
    hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;     /* Legacy weak Tamper3EventCallback     */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a4c      	ldr	r2, [pc, #304]	; (800575c <HAL_RTC_Init+0x17c>)
 800562c:	635a      	str	r2, [r3, #52]	; 0x34
#endif /* RTC_TAMPER3_SUPPORT */

    if (hrtc->MspInitCallback == NULL)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005632:	2b00      	cmp	r3, #0
 8005634:	d102      	bne.n	800563c <HAL_RTC_Init+0x5c>
    {
      hrtc->MspInitCallback = HAL_RTC_MspInit;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a49      	ldr	r2, [pc, #292]	; (8005760 <HAL_RTC_Init+0x180>)
 800563a:	639a      	str	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware */
    hrtc->MspInitCallback(hrtc);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	0010      	movs	r0, r2
 8005644:	4798      	blx	r3

    if (hrtc->MspDeInitCallback == NULL)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d102      	bne.n	8005654 <HAL_RTC_Init+0x74>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	4a44      	ldr	r2, [pc, #272]	; (8005764 <HAL_RTC_Init+0x184>)
 8005652:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_RTC_MspInit(hrtc);
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	2210      	movs	r2, #16
 8005662:	4013      	ands	r3, r2
 8005664:	2b10      	cmp	r3, #16
 8005666:	d05c      	beq.n	8005722 <HAL_RTC_Init+0x142>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	22ca      	movs	r2, #202	; 0xca
 800566e:	625a      	str	r2, [r3, #36]	; 0x24
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2253      	movs	r2, #83	; 0x53
 8005676:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005678:	250f      	movs	r5, #15
 800567a:	197c      	adds	r4, r7, r5
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	0018      	movs	r0, r3
 8005680:	f000 fdf0 	bl	8006264 <RTC_EnterInitMode>
 8005684:	0003      	movs	r3, r0
 8005686:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8005688:	0028      	movs	r0, r5
 800568a:	183b      	adds	r3, r7, r0
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d12c      	bne.n	80056ec <HAL_RTC_Init+0x10c>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4932      	ldr	r1, [pc, #200]	; (8005768 <HAL_RTC_Init+0x188>)
 800569e:	400a      	ands	r2, r1
 80056a0:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6899      	ldr	r1, [r3, #8]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	691b      	ldr	r3, [r3, #16]
 80056b0:	431a      	orrs	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	431a      	orrs	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	430a      	orrs	r2, r1
 80056be:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	68d2      	ldr	r2, [r2, #12]
 80056c8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	6919      	ldr	r1, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	041a      	lsls	r2, r3, #16
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	430a      	orrs	r2, r1
 80056dc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80056de:	183c      	adds	r4, r7, r0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	0018      	movs	r0, r3
 80056e4:	f000 fe01 	bl	80062ea <RTC_ExitInitMode>
 80056e8:	0003      	movs	r3, r0
 80056ea:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80056ec:	230f      	movs	r3, #15
 80056ee:	18fb      	adds	r3, r7, r3
 80056f0:	781b      	ldrb	r3, [r3, #0]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d110      	bne.n	8005718 <HAL_RTC_Init+0x138>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	491a      	ldr	r1, [pc, #104]	; (800576c <HAL_RTC_Init+0x18c>)
 8005702:	400a      	ands	r2, r1
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	699a      	ldr	r2, [r3, #24]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	22ff      	movs	r2, #255	; 0xff
 800571e:	625a      	str	r2, [r3, #36]	; 0x24
 8005720:	e003      	b.n	800572a <HAL_RTC_Init+0x14a>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005722:	230f      	movs	r3, #15
 8005724:	18fb      	adds	r3, r7, r3
 8005726:	2200      	movs	r2, #0
 8005728:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800572a:	230f      	movs	r3, #15
 800572c:	18fb      	adds	r3, r7, r3
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <HAL_RTC_Init+0x15a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800573a:	230f      	movs	r3, #15
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	781b      	ldrb	r3, [r3, #0]
}
 8005740:	0018      	movs	r0, r3
 8005742:	46bd      	mov	sp, r7
 8005744:	b004      	add	sp, #16
 8005746:	bdb0      	pop	{r4, r5, r7, pc}
 8005748:	08006205 	.word	0x08006205
 800574c:	080063bd 	.word	0x080063bd
 8005750:	080063fd 	.word	0x080063fd
 8005754:	080063cd 	.word	0x080063cd
 8005758:	080063dd 	.word	0x080063dd
 800575c:	080063ed 	.word	0x080063ed
 8005760:	08001805 	.word	0x08001805
 8005764:	08001845 	.word	0x08001845
 8005768:	ff8fffbf 	.word	0xff8fffbf
 800576c:	fffbffff 	.word	0xfffbffff

08005770 <HAL_RTC_RegisterCallback>:
  * @note   HAL_RTC_TAMPER3_EVENT_CB_ID is not applicable to all devices.
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef CallbackID, pRTC_CallbackTypeDef pCallback)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	607a      	str	r2, [r7, #4]
 800577a:	230b      	movs	r3, #11
 800577c:	18fb      	adds	r3, r7, r3
 800577e:	1c0a      	adds	r2, r1, #0
 8005780:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005782:	2317      	movs	r3, #23
 8005784:	18fb      	adds	r3, r7, r3
 8005786:	2200      	movs	r2, #0
 8005788:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d101      	bne.n	8005794 <HAL_RTC_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e060      	b.n	8005856 <HAL_RTC_RegisterCallback+0xe6>
  }

  /* Process locked */
  __HAL_LOCK(hrtc);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	7f1b      	ldrb	r3, [r3, #28]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d101      	bne.n	80057a0 <HAL_RTC_RegisterCallback+0x30>
 800579c:	2302      	movs	r3, #2
 800579e:	e05a      	b.n	8005856 <HAL_RTC_RegisterCallback+0xe6>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2201      	movs	r2, #1
 80057a4:	771a      	strb	r2, [r3, #28]

  if (HAL_RTC_STATE_READY == hrtc->State)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	7f5b      	ldrb	r3, [r3, #29]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d12e      	bne.n	800580e <HAL_RTC_RegisterCallback+0x9e>
  {
    switch (CallbackID)
 80057b0:	230b      	movs	r3, #11
 80057b2:	18fb      	adds	r3, r7, r3
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d824      	bhi.n	8005804 <HAL_RTC_RegisterCallback+0x94>
 80057ba:	009a      	lsls	r2, r3, #2
 80057bc:	4b28      	ldr	r3, [pc, #160]	; (8005860 <HAL_RTC_RegisterCallback+0xf0>)
 80057be:	18d3      	adds	r3, r2, r3
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	469f      	mov	pc, r3
    {
      case HAL_RTC_ALARM_A_EVENT_CB_ID :
        hrtc->AlarmAEventCallback = pCallback;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]
        break;
 80057ca:	e03e      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

      case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
        hrtc->TimeStampEventCallback = pCallback;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80057d2:	e03a      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

#if defined(RTC_WAKEUP_SUPPORT)
      case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
        hrtc->WakeUpTimerEventCallback = pCallback;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80057da:	e036      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>
#endif /* RTC_WAKEUP_SUPPORT */

      case HAL_RTC_TAMPER1_EVENT_CB_ID :
        hrtc->Tamper1EventCallback = pCallback;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80057e2:	e032      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

      case HAL_RTC_TAMPER2_EVENT_CB_ID :
        hrtc->Tamper2EventCallback = pCallback;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	631a      	str	r2, [r3, #48]	; 0x30
        break;
 80057ea:	e02e      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

#if defined(RTC_TAMPER3_SUPPORT)
      case HAL_RTC_TAMPER3_EVENT_CB_ID :
        hrtc->Tamper3EventCallback = pCallback;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	635a      	str	r2, [r3, #52]	; 0x34
        break;
 80057f2:	e02a      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>
#endif /* RTC_TAMPER3_SUPPORT */

      case HAL_RTC_MSPINIT_CB_ID :
        hrtc->MspInitCallback = pCallback;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 80057fa:	e026      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

      case HAL_RTC_MSPDEINIT_CB_ID :
        hrtc->MspDeInitCallback = pCallback;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8005802:	e022      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8005804:	2317      	movs	r3, #23
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	2201      	movs	r2, #1
 800580a:	701a      	strb	r2, [r3, #0]
        break;
 800580c:	e01d      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>
    }
  }
  else if (HAL_RTC_STATE_RESET == hrtc->State)
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	7f5b      	ldrb	r3, [r3, #29]
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b00      	cmp	r3, #0
 8005816:	d114      	bne.n	8005842 <HAL_RTC_RegisterCallback+0xd2>
  {
    switch (CallbackID)
 8005818:	230b      	movs	r3, #11
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b0e      	cmp	r3, #14
 8005820:	d002      	beq.n	8005828 <HAL_RTC_RegisterCallback+0xb8>
 8005822:	2b0f      	cmp	r3, #15
 8005824:	d004      	beq.n	8005830 <HAL_RTC_RegisterCallback+0xc0>
 8005826:	e007      	b.n	8005838 <HAL_RTC_RegisterCallback+0xc8>
    {
      case HAL_RTC_MSPINIT_CB_ID :
        hrtc->MspInitCallback = pCallback;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
        break;
 800582e:	e00c      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

      case HAL_RTC_MSPDEINIT_CB_ID :
        hrtc->MspDeInitCallback = pCallback;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	63da      	str	r2, [r3, #60]	; 0x3c
        break;
 8005836:	e008      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>

      default :
        /* Return error status */
        status =  HAL_ERROR;
 8005838:	2317      	movs	r3, #23
 800583a:	18fb      	adds	r3, r7, r3
 800583c:	2201      	movs	r2, #1
 800583e:	701a      	strb	r2, [r3, #0]
        break;
 8005840:	e003      	b.n	800584a <HAL_RTC_RegisterCallback+0xda>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8005842:	2317      	movs	r3, #23
 8005844:	18fb      	adds	r3, r7, r3
 8005846:	2201      	movs	r2, #1
 8005848:	701a      	strb	r2, [r3, #0]
  }

  /* Release Lock */
  __HAL_UNLOCK(hrtc);
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2200      	movs	r2, #0
 800584e:	771a      	strb	r2, [r3, #28]

  return status;
 8005850:	2317      	movs	r3, #23
 8005852:	18fb      	adds	r3, r7, r3
 8005854:	781b      	ldrb	r3, [r3, #0]
}
 8005856:	0018      	movs	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	b006      	add	sp, #24
 800585c:	bd80      	pop	{r7, pc}
 800585e:	46c0      	nop			; (mov r8, r8)
 8005860:	0800edd0 	.word	0x0800edd0

08005864 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005864:	b5b0      	push	{r4, r5, r7, lr}
 8005866:	b086      	sub	sp, #24
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	7f1b      	ldrb	r3, [r3, #28]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_RTC_SetTime+0x1c>
 800587c:	2302      	movs	r3, #2
 800587e:	e08e      	b.n	800599e <HAL_RTC_SetTime+0x13a>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2202      	movs	r2, #2
 800588a:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d125      	bne.n	80058de <HAL_RTC_SetTime+0x7a>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	2240      	movs	r2, #64	; 0x40
 800589a:	4013      	ands	r3, r2
 800589c:	d102      	bne.n	80058a4 <HAL_RTC_SetTime+0x40>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	2200      	movs	r2, #0
 80058a2:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	781b      	ldrb	r3, [r3, #0]
 80058a8:	0018      	movs	r0, r3
 80058aa:	f000 fd47 	bl	800633c <RTC_ByteToBcd2>
 80058ae:	0003      	movs	r3, r0
 80058b0:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	785b      	ldrb	r3, [r3, #1]
 80058b6:	0018      	movs	r0, r3
 80058b8:	f000 fd40 	bl	800633c <RTC_ByteToBcd2>
 80058bc:	0003      	movs	r3, r0
 80058be:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058c0:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	789b      	ldrb	r3, [r3, #2]
 80058c6:	0018      	movs	r0, r3
 80058c8:	f000 fd38 	bl	800633c <RTC_ByteToBcd2>
 80058cc:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80058ce:	0022      	movs	r2, r4
 80058d0:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	78db      	ldrb	r3, [r3, #3]
 80058d6:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
 80058dc:	e017      	b.n	800590e <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689b      	ldr	r3, [r3, #8]
 80058e4:	2240      	movs	r2, #64	; 0x40
 80058e6:	4013      	ands	r3, r2
 80058e8:	d102      	bne.n	80058f0 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	2200      	movs	r2, #0
 80058ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	785b      	ldrb	r3, [r3, #1]
 80058fa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80058fc:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8005902:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005904:	68bb      	ldr	r3, [r7, #8]
 8005906:	78db      	ldrb	r3, [r3, #3]
 8005908:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800590a:	4313      	orrs	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	22ca      	movs	r2, #202	; 0xca
 8005914:	625a      	str	r2, [r3, #36]	; 0x24
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2253      	movs	r2, #83	; 0x53
 800591c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800591e:	2513      	movs	r5, #19
 8005920:	197c      	adds	r4, r7, r5
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	0018      	movs	r0, r3
 8005926:	f000 fc9d 	bl	8006264 <RTC_EnterInitMode>
 800592a:	0003      	movs	r3, r0
 800592c:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 800592e:	0028      	movs	r0, r5
 8005930:	183b      	adds	r3, r7, r0
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d120      	bne.n	800597a <HAL_RTC_SetTime+0x116>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	697a      	ldr	r2, [r7, #20]
 800593e:	491a      	ldr	r1, [pc, #104]	; (80059a8 <HAL_RTC_SetTime+0x144>)
 8005940:	400a      	ands	r2, r1
 8005942:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	689a      	ldr	r2, [r3, #8]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4917      	ldr	r1, [pc, #92]	; (80059ac <HAL_RTC_SetTime+0x148>)
 8005950:	400a      	ands	r2, r1
 8005952:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	6899      	ldr	r1, [r3, #8]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	431a      	orrs	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	430a      	orrs	r2, r1
 800596a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800596c:	183c      	adds	r4, r7, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	0018      	movs	r0, r3
 8005972:	f000 fcba 	bl	80062ea <RTC_ExitInitMode>
 8005976:	0003      	movs	r3, r0
 8005978:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 800597a:	2313      	movs	r3, #19
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d102      	bne.n	800598a <HAL_RTC_SetTime+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	22ff      	movs	r2, #255	; 0xff
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	771a      	strb	r2, [r3, #28]

  return status;
 8005998:	2313      	movs	r3, #19
 800599a:	18fb      	adds	r3, r7, r3
 800599c:	781b      	ldrb	r3, [r3, #0]
}
 800599e:	0018      	movs	r0, r3
 80059a0:	46bd      	mov	sp, r7
 80059a2:	b006      	add	sp, #24
 80059a4:	bdb0      	pop	{r4, r5, r7, pc}
 80059a6:	46c0      	nop			; (mov r8, r8)
 80059a8:	007f7f7f 	.word	0x007f7f7f
 80059ac:	fffbffff 	.word	0xfffbffff

080059b0 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b086      	sub	sp, #24
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	045b      	lsls	r3, r3, #17
 80059d2:	0c5a      	lsrs	r2, r3, #17
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	4a22      	ldr	r2, [pc, #136]	; (8005a68 <HAL_RTC_GetTime+0xb8>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	0c1b      	lsrs	r3, r3, #16
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	223f      	movs	r2, #63	; 0x3f
 80059ec:	4013      	ands	r3, r2
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	0a1b      	lsrs	r3, r3, #8
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	227f      	movs	r2, #127	; 0x7f
 80059fc:	4013      	ands	r3, r2
 80059fe:	b2da      	uxtb	r2, r3
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	227f      	movs	r2, #127	; 0x7f
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	0d9b      	lsrs	r3, r3, #22
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2201      	movs	r2, #1
 8005a1a:	4013      	ands	r3, r2
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d11a      	bne.n	8005a5e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	0018      	movs	r0, r3
 8005a2e:	f000 fca6 	bl	800637e <RTC_Bcd2ToByte>
 8005a32:	0003      	movs	r3, r0
 8005a34:	001a      	movs	r2, r3
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	785b      	ldrb	r3, [r3, #1]
 8005a3e:	0018      	movs	r0, r3
 8005a40:	f000 fc9d 	bl	800637e <RTC_Bcd2ToByte>
 8005a44:	0003      	movs	r3, r0
 8005a46:	001a      	movs	r2, r3
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	789b      	ldrb	r3, [r3, #2]
 8005a50:	0018      	movs	r0, r3
 8005a52:	f000 fc94 	bl	800637e <RTC_Bcd2ToByte>
 8005a56:	0003      	movs	r3, r0
 8005a58:	001a      	movs	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	0018      	movs	r0, r3
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b006      	add	sp, #24
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	007f7f7f 	.word	0x007f7f7f

08005a6c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005a6c:	b5b0      	push	{r4, r5, r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	7f1b      	ldrb	r3, [r3, #28]
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_RTC_SetDate+0x1c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e07a      	b.n	8005b7e <HAL_RTC_SetDate+0x112>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2202      	movs	r2, #2
 8005a92:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d10e      	bne.n	8005ab8 <HAL_RTC_SetDate+0x4c>
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	785b      	ldrb	r3, [r3, #1]
 8005a9e:	001a      	movs	r2, r3
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	d008      	beq.n	8005ab8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005aa6:	68bb      	ldr	r3, [r7, #8]
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	2210      	movs	r2, #16
 8005aac:	4393      	bics	r3, r2
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	330a      	adds	r3, #10
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d11c      	bne.n	8005af8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	78db      	ldrb	r3, [r3, #3]
 8005ac2:	0018      	movs	r0, r3
 8005ac4:	f000 fc3a 	bl	800633c <RTC_ByteToBcd2>
 8005ac8:	0003      	movs	r3, r0
 8005aca:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	785b      	ldrb	r3, [r3, #1]
 8005ad0:	0018      	movs	r0, r3
 8005ad2:	f000 fc33 	bl	800633c <RTC_ByteToBcd2>
 8005ad6:	0003      	movs	r3, r0
 8005ad8:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005ada:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	789b      	ldrb	r3, [r3, #2]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f000 fc2b 	bl	800633c <RTC_ByteToBcd2>
 8005ae6:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005ae8:	0022      	movs	r2, r4
 8005aea:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
 8005af6:	e00e      	b.n	8005b16 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	78db      	ldrb	r3, [r3, #3]
 8005afc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b04:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8005b0a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8005b12:	4313      	orrs	r3, r2
 8005b14:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	22ca      	movs	r2, #202	; 0xca
 8005b1c:	625a      	str	r2, [r3, #36]	; 0x24
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2253      	movs	r2, #83	; 0x53
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005b26:	2513      	movs	r5, #19
 8005b28:	197c      	adds	r4, r7, r5
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 fb99 	bl	8006264 <RTC_EnterInitMode>
 8005b32:	0003      	movs	r3, r0
 8005b34:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8005b36:	0028      	movs	r0, r5
 8005b38:	183b      	adds	r3, r7, r0
 8005b3a:	781b      	ldrb	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RTC_SetDate+0xee>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	697a      	ldr	r2, [r7, #20]
 8005b46:	4910      	ldr	r1, [pc, #64]	; (8005b88 <HAL_RTC_SetDate+0x11c>)
 8005b48:	400a      	ands	r2, r1
 8005b4a:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005b4c:	183c      	adds	r4, r7, r0
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	0018      	movs	r0, r3
 8005b52:	f000 fbca 	bl	80062ea <RTC_ExitInitMode>
 8005b56:	0003      	movs	r3, r0
 8005b58:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8005b5a:	2313      	movs	r3, #19
 8005b5c:	18fb      	adds	r3, r7, r3
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <HAL_RTC_SetDate+0xfe>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	22ff      	movs	r2, #255	; 0xff
 8005b70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]

  return status;
 8005b78:	2313      	movs	r3, #19
 8005b7a:	18fb      	adds	r3, r7, r3
 8005b7c:	781b      	ldrb	r3, [r3, #0]
}
 8005b7e:	0018      	movs	r0, r3
 8005b80:	46bd      	mov	sp, r7
 8005b82:	b006      	add	sp, #24
 8005b84:	bdb0      	pop	{r4, r5, r7, pc}
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	00ffff3f 	.word	0x00ffff3f

08005b8c <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	4a21      	ldr	r2, [pc, #132]	; (8005c28 <HAL_RTC_GetDate+0x9c>)
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	0c1b      	lsrs	r3, r3, #16
 8005bac:	b2da      	uxtb	r2, r3
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	0a1b      	lsrs	r3, r3, #8
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	221f      	movs	r2, #31
 8005bba:	4013      	ands	r3, r2
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	223f      	movs	r2, #63	; 0x3f
 8005bc8:	4013      	ands	r3, r2
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	0b5b      	lsrs	r3, r3, #13
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2207      	movs	r2, #7
 8005bd8:	4013      	ands	r3, r2
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d11a      	bne.n	8005c1c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	0018      	movs	r0, r3
 8005bec:	f000 fbc7 	bl	800637e <RTC_Bcd2ToByte>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	001a      	movs	r2, r3
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	785b      	ldrb	r3, [r3, #1]
 8005bfc:	0018      	movs	r0, r3
 8005bfe:	f000 fbbe 	bl	800637e <RTC_Bcd2ToByte>
 8005c02:	0003      	movs	r3, r0
 8005c04:	001a      	movs	r2, r3
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	789b      	ldrb	r3, [r3, #2]
 8005c0e:	0018      	movs	r0, r3
 8005c10:	f000 fbb5 	bl	800637e <RTC_Bcd2ToByte>
 8005c14:	0003      	movs	r3, r0
 8005c16:	001a      	movs	r2, r3
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
}
 8005c1e:	0018      	movs	r0, r3
 8005c20:	46bd      	mov	sp, r7
 8005c22:	b006      	add	sp, #24
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	46c0      	nop			; (mov r8, r8)
 8005c28:	00ffff3f 	.word	0x00ffff3f

08005c2c <HAL_RTC_SetAlarm>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005c2c:	b590      	push	{r4, r7, lr}
 8005c2e:	b089      	sub	sp, #36	; 0x24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8005c38:	2300      	movs	r3, #0
 8005c3a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	61fb      	str	r3, [r7, #28]
  uint32_t subsecondtmpreg = 0U;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	7f1b      	ldrb	r3, [r3, #28]
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_RTC_SetAlarm+0x24>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e0c6      	b.n	8005dde <HAL_RTC_SetAlarm+0x1b2>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2202      	movs	r2, #2
 8005c5a:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d136      	bne.n	8005cd0 <HAL_RTC_SetAlarm+0xa4>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	2240      	movs	r2, #64	; 0x40
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d102      	bne.n	8005c74 <HAL_RTC_SetAlarm+0x48>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2200      	movs	r2, #0
 8005c72:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	781b      	ldrb	r3, [r3, #0]
 8005c78:	0018      	movs	r0, r3
 8005c7a:	f000 fb5f 	bl	800633c <RTC_ByteToBcd2>
 8005c7e:	0003      	movs	r3, r0
 8005c80:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	785b      	ldrb	r3, [r3, #1]
 8005c86:	0018      	movs	r0, r3
 8005c88:	f000 fb58 	bl	800633c <RTC_ByteToBcd2>
 8005c8c:	0003      	movs	r3, r0
 8005c8e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005c90:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	789b      	ldrb	r3, [r3, #2]
 8005c96:	0018      	movs	r0, r3
 8005c98:	f000 fb50 	bl	800633c <RTC_ByteToBcd2>
 8005c9c:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005c9e:	0022      	movs	r2, r4
 8005ca0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	78db      	ldrb	r3, [r3, #3]
 8005ca6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	2220      	movs	r2, #32
 8005cb0:	5c9b      	ldrb	r3, [r3, r2]
 8005cb2:	0018      	movs	r0, r3
 8005cb4:	f000 fb42 	bl	800633c <RTC_ByteToBcd2>
 8005cb8:	0003      	movs	r3, r0
 8005cba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005cbc:	0022      	movs	r2, r4
 8005cbe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005cc4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	61fb      	str	r3, [r7, #28]
 8005cce:	e022      	b.n	8005d16 <HAL_RTC_SetAlarm+0xea>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2240      	movs	r2, #64	; 0x40
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d102      	bne.n	8005ce2 <HAL_RTC_SetAlarm+0xb6>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	781b      	ldrb	r3, [r3, #0]
 8005ce6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	785b      	ldrb	r3, [r3, #1]
 8005cec:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005cee:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005cf0:	68ba      	ldr	r2, [r7, #8]
 8005cf2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005cf4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	78db      	ldrb	r3, [r3, #3]
 8005cfa:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005cfc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2120      	movs	r1, #32
 8005d02:	5c5b      	ldrb	r3, [r3, r1]
 8005d04:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005d06:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005d0c:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	22ca      	movs	r2, #202	; 0xca
 8005d28:	625a      	str	r2, [r3, #36]	; 0x24
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2253      	movs	r2, #83	; 0x53
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689a      	ldr	r2, [r3, #8]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	492a      	ldr	r1, [pc, #168]	; (8005de8 <HAL_RTC_SetAlarm+0x1bc>)
 8005d3e:	400a      	ands	r2, r1
 8005d40:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	689a      	ldr	r2, [r3, #8]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4927      	ldr	r1, [pc, #156]	; (8005dec <HAL_RTC_SetAlarm+0x1c0>)
 8005d4e:	400a      	ands	r2, r1
 8005d50:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	22ff      	movs	r2, #255	; 0xff
 8005d5a:	401a      	ands	r2, r3
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4923      	ldr	r1, [pc, #140]	; (8005df0 <HAL_RTC_SetAlarm+0x1c4>)
 8005d62:	430a      	orrs	r2, r1
 8005d64:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005d66:	f7fc fcc3 	bl	80026f0 <HAL_GetTick>
 8005d6a:	0003      	movs	r3, r0
 8005d6c:	61bb      	str	r3, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d6e:	e014      	b.n	8005d9a <HAL_RTC_SetAlarm+0x16e>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005d70:	f7fc fcbe 	bl	80026f0 <HAL_GetTick>
 8005d74:	0002      	movs	r2, r0
 8005d76:	69bb      	ldr	r3, [r7, #24]
 8005d78:	1ad2      	subs	r2, r2, r3
 8005d7a:	23fa      	movs	r3, #250	; 0xfa
 8005d7c:	009b      	lsls	r3, r3, #2
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d90b      	bls.n	8005d9a <HAL_RTC_SetAlarm+0x16e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	22ff      	movs	r2, #255	; 0xff
 8005d88:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2203      	movs	r2, #3
 8005d8e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005d96:	2303      	movs	r3, #3
 8005d98:	e021      	b.n	8005dde <HAL_RTC_SetAlarm+0x1b2>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	4013      	ands	r3, r2
 8005da4:	d0e4      	beq.n	8005d70 <HAL_RTC_SetAlarm+0x144>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69fa      	ldr	r2, [r7, #28]
 8005dac:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689a      	ldr	r2, [r3, #8]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2180      	movs	r1, #128	; 0x80
 8005dc2:	0049      	lsls	r1, r1, #1
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	22ff      	movs	r2, #255	; 0xff
 8005dce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	0018      	movs	r0, r3
 8005de0:	46bd      	mov	sp, r7
 8005de2:	b009      	add	sp, #36	; 0x24
 8005de4:	bd90      	pop	{r4, r7, pc}
 8005de6:	46c0      	nop			; (mov r8, r8)
 8005de8:	fffffeff 	.word	0xfffffeff
 8005dec:	ffffefff 	.word	0xffffefff
 8005df0:	fffffe7f 	.word	0xfffffe7f

08005df4 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8005df4:	b590      	push	{r4, r7, lr}
 8005df6:	b089      	sub	sp, #36	; 0x24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 8005e00:	4b75      	ldr	r3, [pc, #468]	; (8005fd8 <HAL_RTC_SetAlarm_IT+0x1e4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	22fa      	movs	r2, #250	; 0xfa
 8005e06:	01d1      	lsls	r1, r2, #7
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f7fa f999 	bl	8000140 <__udivsi3>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	001a      	movs	r2, r3
 8005e12:	0013      	movs	r3, r2
 8005e14:	015b      	lsls	r3, r3, #5
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	009b      	lsls	r3, r3, #2
 8005e1a:	189b      	adds	r3, r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 8005e20:	2300      	movs	r3, #0
 8005e22:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 8005e24:	2300      	movs	r3, #0
 8005e26:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	7f1b      	ldrb	r3, [r3, #28]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d101      	bne.n	8005e34 <HAL_RTC_SetAlarm_IT+0x40>
 8005e30:	2302      	movs	r3, #2
 8005e32:	e0cd      	b.n	8005fd0 <HAL_RTC_SetAlarm_IT+0x1dc>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d136      	bne.n	8005eb4 <HAL_RTC_SetAlarm_IT+0xc0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	2240      	movs	r2, #64	; 0x40
 8005e4e:	4013      	ands	r3, r2
 8005e50:	d102      	bne.n	8005e58 <HAL_RTC_SetAlarm_IT+0x64>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2200      	movs	r2, #0
 8005e56:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	0018      	movs	r0, r3
 8005e5e:	f000 fa6d 	bl	800633c <RTC_ByteToBcd2>
 8005e62:	0003      	movs	r3, r0
 8005e64:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	785b      	ldrb	r3, [r3, #1]
 8005e6a:	0018      	movs	r0, r3
 8005e6c:	f000 fa66 	bl	800633c <RTC_ByteToBcd2>
 8005e70:	0003      	movs	r3, r0
 8005e72:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005e74:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	789b      	ldrb	r3, [r3, #2]
 8005e7a:	0018      	movs	r0, r3
 8005e7c:	f000 fa5e 	bl	800633c <RTC_ByteToBcd2>
 8005e80:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8005e82:	0022      	movs	r2, r4
 8005e84:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	78db      	ldrb	r3, [r3, #3]
 8005e8a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 8005e8c:	431a      	orrs	r2, r3
 8005e8e:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2220      	movs	r2, #32
 8005e94:	5c9b      	ldrb	r3, [r3, r2]
 8005e96:	0018      	movs	r0, r3
 8005e98:	f000 fa50 	bl	800633c <RTC_ByteToBcd2>
 8005e9c:	0003      	movs	r3, r0
 8005e9e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 8005ea0:	0022      	movs	r2, r4
 8005ea2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 8005ea8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	61fb      	str	r3, [r7, #28]
 8005eb2:	e022      	b.n	8005efa <HAL_RTC_SetAlarm_IT+0x106>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	2240      	movs	r2, #64	; 0x40
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	d102      	bne.n	8005ec6 <HAL_RTC_SetAlarm_IT+0xd2>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	785b      	ldrb	r3, [r3, #1]
 8005ed0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ed2:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 8005ed8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	78db      	ldrb	r3, [r3, #3]
 8005ede:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 8005ee0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	2120      	movs	r1, #32
 8005ee6:	5c5b      	ldrb	r3, [r3, r1]
 8005ee8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 8005eea:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 8005ef0:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 8005f02:	4313      	orrs	r3, r2
 8005f04:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	22ca      	movs	r2, #202	; 0xca
 8005f0c:	625a      	str	r2, [r3, #36]	; 0x24
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	2253      	movs	r2, #83	; 0x53
 8005f14:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	492e      	ldr	r1, [pc, #184]	; (8005fdc <HAL_RTC_SetAlarm_IT+0x1e8>)
 8005f22:	400a      	ands	r2, r1
 8005f24:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	22ff      	movs	r2, #255	; 0xff
 8005f2e:	401a      	ands	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	492a      	ldr	r1, [pc, #168]	; (8005fe0 <HAL_RTC_SetAlarm_IT+0x1ec>)
 8005f36:	430a      	orrs	r2, r1
 8005f38:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      count = count - 1U;
 8005f3a:	697b      	ldr	r3, [r7, #20]
 8005f3c:	3b01      	subs	r3, #1
 8005f3e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10b      	bne.n	8005f5e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	22ff      	movs	r2, #255	; 0xff
 8005f4c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2203      	movs	r2, #3
 8005f52:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e038      	b.n	8005fd0 <HAL_RTC_SetAlarm_IT+0x1dc>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	4013      	ands	r3, r2
 8005f68:	d0e7      	beq.n	8005f3a <HAL_RTC_SetAlarm_IT+0x146>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	0049      	lsls	r1, r1, #1
 8005f88:	430a      	orrs	r2, r1
 8005f8a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689a      	ldr	r2, [r3, #8]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2180      	movs	r1, #128	; 0x80
 8005f98:	0149      	lsls	r1, r1, #5
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8005f9e:	4b11      	ldr	r3, [pc, #68]	; (8005fe4 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	4b10      	ldr	r3, [pc, #64]	; (8005fe4 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005fa4:	2180      	movs	r1, #128	; 0x80
 8005fa6:	0289      	lsls	r1, r1, #10
 8005fa8:	430a      	orrs	r2, r1
 8005faa:	601a      	str	r2, [r3, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 8005fac:	4b0d      	ldr	r3, [pc, #52]	; (8005fe4 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005fae:	689a      	ldr	r2, [r3, #8]
 8005fb0:	4b0c      	ldr	r3, [pc, #48]	; (8005fe4 <HAL_RTC_SetAlarm_IT+0x1f0>)
 8005fb2:	2180      	movs	r1, #128	; 0x80
 8005fb4:	0289      	lsls	r1, r1, #10
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	22ff      	movs	r2, #255	; 0xff
 8005fc0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8005fce:	2300      	movs	r3, #0
}
 8005fd0:	0018      	movs	r0, r3
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	b009      	add	sp, #36	; 0x24
 8005fd6:	bd90      	pop	{r4, r7, pc}
 8005fd8:	20000058 	.word	0x20000058
 8005fdc:	fffffeff 	.word	0xfffffeff
 8005fe0:	fffffe7f 	.word	0xfffffe7f
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be:
  *            @arg RTC_ALARM_A: Alarm A
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	7f1b      	ldrb	r3, [r3, #28]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_RTC_DeactivateAlarm+0x1a>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e048      	b.n	8006094 <HAL_RTC_DeactivateAlarm+0xac>
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2201      	movs	r2, #1
 8006006:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	22ca      	movs	r2, #202	; 0xca
 8006014:	625a      	str	r2, [r3, #36]	; 0x24
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2253      	movs	r2, #83	; 0x53
 800601c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	491c      	ldr	r1, [pc, #112]	; (800609c <HAL_RTC_DeactivateAlarm+0xb4>)
 800602a:	400a      	ands	r2, r1
 800602c:	609a      	str	r2, [r3, #8]

    /* In case interrupt mode is used, the interrupt source must be disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689a      	ldr	r2, [r3, #8]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4919      	ldr	r1, [pc, #100]	; (80060a0 <HAL_RTC_DeactivateAlarm+0xb8>)
 800603a:	400a      	ands	r2, r1
 800603c:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800603e:	f7fc fb57 	bl	80026f0 <HAL_GetTick>
 8006042:	0003      	movs	r3, r0
 8006044:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if timeout is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006046:	e014      	b.n	8006072 <HAL_RTC_DeactivateAlarm+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006048:	f7fc fb52 	bl	80026f0 <HAL_GetTick>
 800604c:	0002      	movs	r2, r0
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1ad2      	subs	r2, r2, r3
 8006052:	23fa      	movs	r3, #250	; 0xfa
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	429a      	cmp	r2, r3
 8006058:	d90b      	bls.n	8006072 <HAL_RTC_DeactivateAlarm+0x8a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	22ff      	movs	r2, #255	; 0xff
 8006060:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2203      	movs	r2, #3
 8006066:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2200      	movs	r2, #0
 800606c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e010      	b.n	8006094 <HAL_RTC_DeactivateAlarm+0xac>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	2201      	movs	r2, #1
 800607a:	4013      	ands	r3, r2
 800607c:	d0e4      	beq.n	8006048 <HAL_RTC_DeactivateAlarm+0x60>
      }
    }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	22ff      	movs	r2, #255	; 0xff
 8006084:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	0018      	movs	r0, r3
 8006096:	46bd      	mov	sp, r7
 8006098:	b004      	add	sp, #16
 800609a:	bd80      	pop	{r7, pc}
 800609c:	fffffeff 	.word	0xfffffeff
 80060a0:	ffffefff 	.word	0xffffefff

080060a4 <HAL_RTC_GetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alarm, uint32_t Format)
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b086      	sub	sp, #24
 80060a8:	af00      	add	r7, sp, #0
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
  uint32_t subsecondtmpreg = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_ALARM(Alarm));

  sAlarm->Alarm = RTC_ALARM_A;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	0052      	lsls	r2, r2, #1
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	69db      	ldr	r3, [r3, #28]
 80060c8:	617b      	str	r3, [r7, #20]
  subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d0:	045b      	lsls	r3, r3, #17
 80060d2:	0c5b      	lsrs	r3, r3, #17
 80060d4:	613b      	str	r3, [r7, #16]

  /* Fill the structure with the read parameters */
  sAlarm->AlarmTime.Hours      = (uint8_t) ((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_ALRMAR_HU_Pos);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	0c1b      	lsrs	r3, r3, #16
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	223f      	movs	r2, #63	; 0x3f
 80060de:	4013      	ands	r3, r2
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	701a      	strb	r2, [r3, #0]
  sAlarm->AlarmTime.Minutes    = (uint8_t) ((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_ALRMAR_MNU_Pos);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	0a1b      	lsrs	r3, r3, #8
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	227f      	movs	r2, #127	; 0x7f
 80060ee:	4013      	ands	r3, r2
 80060f0:	b2da      	uxtb	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	705a      	strb	r2, [r3, #1]
  sAlarm->AlarmTime.Seconds    = (uint8_t) ( tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU));
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	227f      	movs	r2, #127	; 0x7f
 80060fc:	4013      	ands	r3, r2
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	709a      	strb	r2, [r3, #2]
  sAlarm->AlarmTime.TimeFormat = (uint8_t) ((tmpreg & RTC_ALRMAR_PM)                     >> RTC_TR_PM_Pos);
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	0d9b      	lsrs	r3, r3, #22
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2201      	movs	r2, #1
 800610c:	4013      	ands	r3, r2
 800610e:	b2da      	uxtb	r2, r3
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	70da      	strb	r2, [r3, #3]
  sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 8006114:	68bb      	ldr	r3, [r7, #8]
 8006116:	693a      	ldr	r2, [r7, #16]
 8006118:	605a      	str	r2, [r3, #4]
  sAlarm->AlarmDateWeekDay     = (uint8_t) ((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_ALRMAR_DU_Pos);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	0e1b      	lsrs	r3, r3, #24
 800611e:	b2db      	uxtb	r3, r3
 8006120:	223f      	movs	r2, #63	; 0x3f
 8006122:	4013      	ands	r3, r2
 8006124:	b2d9      	uxtb	r1, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2220      	movs	r2, #32
 800612a:	5499      	strb	r1, [r3, r2]
  sAlarm->AlarmDateWeekDaySel  = (uint32_t) (tmpreg & RTC_ALRMAR_WDSEL);
 800612c:	697a      	ldr	r2, [r7, #20]
 800612e:	2380      	movs	r3, #128	; 0x80
 8006130:	05db      	lsls	r3, r3, #23
 8006132:	401a      	ands	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	61da      	str	r2, [r3, #28]
  sAlarm->AlarmMask            = (uint32_t) (tmpreg & RTC_ALARMMASK_ALL);
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	4a19      	ldr	r2, [pc, #100]	; (80061a0 <HAL_RTC_GetAlarm+0xfc>)
 800613c:	401a      	ands	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	615a      	str	r2, [r3, #20]

  if (Format == RTC_FORMAT_BIN)
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d125      	bne.n	8006194 <HAL_RTC_GetAlarm+0xf0>
  {
    sAlarm->AlarmTime.Hours   = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	0018      	movs	r0, r3
 800614e:	f000 f916 	bl	800637e <RTC_Bcd2ToByte>
 8006152:	0003      	movs	r3, r0
 8006154:	001a      	movs	r2, r3
 8006156:	68bb      	ldr	r3, [r7, #8]
 8006158:	701a      	strb	r2, [r3, #0]
    sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	785b      	ldrb	r3, [r3, #1]
 800615e:	0018      	movs	r0, r3
 8006160:	f000 f90d 	bl	800637e <RTC_Bcd2ToByte>
 8006164:	0003      	movs	r3, r0
 8006166:	001a      	movs	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	705a      	strb	r2, [r3, #1]
    sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	789b      	ldrb	r3, [r3, #2]
 8006170:	0018      	movs	r0, r3
 8006172:	f000 f904 	bl	800637e <RTC_Bcd2ToByte>
 8006176:	0003      	movs	r3, r0
 8006178:	001a      	movs	r2, r3
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	709a      	strb	r2, [r3, #2]
    sAlarm->AlarmDateWeekDay  = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	2220      	movs	r2, #32
 8006182:	5c9b      	ldrb	r3, [r3, r2]
 8006184:	0018      	movs	r0, r3
 8006186:	f000 f8fa 	bl	800637e <RTC_Bcd2ToByte>
 800618a:	0003      	movs	r3, r0
 800618c:	0019      	movs	r1, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2220      	movs	r2, #32
 8006192:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	0018      	movs	r0, r3
 8006198:	46bd      	mov	sp, r7
 800619a:	b006      	add	sp, #24
 800619c:	bd80      	pop	{r7, pc}
 800619e:	46c0      	nop			; (mov r8, r8)
 80061a0:	80808080 	.word	0x80808080

080061a4 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80061ac:	4b13      	ldr	r3, [pc, #76]	; (80061fc <HAL_RTC_AlarmIRQHandler+0x58>)
 80061ae:	2280      	movs	r2, #128	; 0x80
 80061b0:	0292      	lsls	r2, r2, #10
 80061b2:	615a      	str	r2, [r3, #20]

  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689a      	ldr	r2, [r3, #8]
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	015b      	lsls	r3, r3, #5
 80061be:	4013      	ands	r3, r2
 80061c0:	d015      	beq.n	80061ee <HAL_RTC_AlarmIRQHandler+0x4a>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68da      	ldr	r2, [r3, #12]
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	005b      	lsls	r3, r3, #1
 80061cc:	4013      	ands	r3, r2
 80061ce:	d00e      	beq.n	80061ee <HAL_RTC_AlarmIRQHandler+0x4a>
    {
      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	22ff      	movs	r2, #255	; 0xff
 80061d8:	401a      	ands	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4908      	ldr	r1, [pc, #32]	; (8006200 <HAL_RTC_AlarmIRQHandler+0x5c>)
 80061e0:	430a      	orrs	r2, r1
 80061e2:	60da      	str	r2, [r3, #12]

      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	0010      	movs	r0, r2
 80061ec:	4798      	blx	r3
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2201      	movs	r2, #1
 80061f2:	775a      	strb	r2, [r3, #29]
}
 80061f4:	46c0      	nop			; (mov r8, r8)
 80061f6:	46bd      	mov	sp, r7
 80061f8:	b002      	add	sp, #8
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	40010400 	.word	0x40010400
 8006200:	fffffe7f 	.word	0xfffffe7f

08006204 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800620c:	46c0      	nop			; (mov r8, r8)
 800620e:	46bd      	mov	sp, r7
 8006210:	b002      	add	sp, #8
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a0e      	ldr	r2, [pc, #56]	; (8006260 <HAL_RTC_WaitForSynchro+0x4c>)
 8006226:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006228:	f7fc fa62 	bl	80026f0 <HAL_GetTick>
 800622c:	0003      	movs	r3, r0
 800622e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006230:	e00a      	b.n	8006248 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006232:	f7fc fa5d 	bl	80026f0 <HAL_GetTick>
 8006236:	0002      	movs	r2, r0
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1ad2      	subs	r2, r2, r3
 800623c:	23fa      	movs	r3, #250	; 0xfa
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	429a      	cmp	r2, r3
 8006242:	d901      	bls.n	8006248 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e006      	b.n	8006256 <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	2220      	movs	r2, #32
 8006250:	4013      	ands	r3, r2
 8006252:	d0ee      	beq.n	8006232 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8006254:	2300      	movs	r3, #0
}
 8006256:	0018      	movs	r0, r3
 8006258:	46bd      	mov	sp, r7
 800625a:	b004      	add	sp, #16
 800625c:	bd80      	pop	{r7, pc}
 800625e:	46c0      	nop			; (mov r8, r8)
 8006260:	0001fd5d 	.word	0x0001fd5d

08006264 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8006270:	230f      	movs	r3, #15
 8006272:	18fb      	adds	r3, r7, r3
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	2240      	movs	r2, #64	; 0x40
 8006280:	4013      	ands	r3, r2
 8006282:	d12b      	bne.n	80062dc <RTC_EnterInitMode+0x78>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2180      	movs	r1, #128	; 0x80
 8006290:	430a      	orrs	r2, r1
 8006292:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006294:	f7fc fa2c 	bl	80026f0 <HAL_GetTick>
 8006298:	0003      	movs	r3, r0
 800629a:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800629c:	e013      	b.n	80062c6 <RTC_EnterInitMode+0x62>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800629e:	f7fc fa27 	bl	80026f0 <HAL_GetTick>
 80062a2:	0002      	movs	r2, r0
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	1ad2      	subs	r2, r2, r3
 80062a8:	200f      	movs	r0, #15
 80062aa:	183b      	adds	r3, r7, r0
 80062ac:	1839      	adds	r1, r7, r0
 80062ae:	7809      	ldrb	r1, [r1, #0]
 80062b0:	7019      	strb	r1, [r3, #0]
 80062b2:	23fa      	movs	r3, #250	; 0xfa
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d905      	bls.n	80062c6 <RTC_EnterInitMode+0x62>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2204      	movs	r2, #4
 80062be:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80062c0:	183b      	adds	r3, r7, r0
 80062c2:	2201      	movs	r2, #1
 80062c4:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	2240      	movs	r2, #64	; 0x40
 80062ce:	4013      	ands	r3, r2
 80062d0:	d104      	bne.n	80062dc <RTC_EnterInitMode+0x78>
 80062d2:	230f      	movs	r3, #15
 80062d4:	18fb      	adds	r3, r7, r3
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d1e0      	bne.n	800629e <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 80062dc:	230f      	movs	r3, #15
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	781b      	ldrb	r3, [r3, #0]
}
 80062e2:	0018      	movs	r0, r3
 80062e4:	46bd      	mov	sp, r7
 80062e6:	b004      	add	sp, #16
 80062e8:	bd80      	pop	{r7, pc}

080062ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80062ea:	b590      	push	{r4, r7, lr}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062f2:	240f      	movs	r4, #15
 80062f4:	193b      	adds	r3, r7, r4
 80062f6:	2200      	movs	r2, #0
 80062f8:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	68da      	ldr	r2, [r3, #12]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2180      	movs	r1, #128	; 0x80
 8006306:	438a      	bics	r2, r1
 8006308:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	2220      	movs	r2, #32
 8006312:	4013      	ands	r3, r2
 8006314:	d10b      	bne.n	800632e <RTC_ExitInitMode+0x44>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	0018      	movs	r0, r3
 800631a:	f7ff ff7b 	bl	8006214 <HAL_RTC_WaitForSynchro>
 800631e:	1e03      	subs	r3, r0, #0
 8006320:	d005      	beq.n	800632e <RTC_ExitInitMode+0x44>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2204      	movs	r2, #4
 8006326:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006328:	193b      	adds	r3, r7, r4
 800632a:	2201      	movs	r2, #1
 800632c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800632e:	230f      	movs	r3, #15
 8006330:	18fb      	adds	r3, r7, r3
 8006332:	781b      	ldrb	r3, [r3, #0]
}
 8006334:	0018      	movs	r0, r3
 8006336:	46bd      	mov	sp, r7
 8006338:	b005      	add	sp, #20
 800633a:	bd90      	pop	{r4, r7, pc}

0800633c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	0002      	movs	r2, r0
 8006344:	1dfb      	adds	r3, r7, #7
 8006346:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8006348:	2300      	movs	r3, #0
 800634a:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800634c:	e007      	b.n	800635e <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3301      	adds	r3, #1
 8006352:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8006354:	1dfb      	adds	r3, r7, #7
 8006356:	1dfa      	adds	r2, r7, #7
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	3a0a      	subs	r2, #10
 800635c:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 800635e:	1dfb      	adds	r3, r7, #7
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b09      	cmp	r3, #9
 8006364:	d8f3      	bhi.n	800634e <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	b2db      	uxtb	r3, r3
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	b2da      	uxtb	r2, r3
 800636e:	1dfb      	adds	r3, r7, #7
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	4313      	orrs	r3, r2
 8006374:	b2db      	uxtb	r3, r3
}
 8006376:	0018      	movs	r0, r3
 8006378:	46bd      	mov	sp, r7
 800637a:	b004      	add	sp, #16
 800637c:	bd80      	pop	{r7, pc}

0800637e <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	0002      	movs	r2, r0
 8006386:	1dfb      	adds	r3, r7, #7
 8006388:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 800638a:	2300      	movs	r3, #0
 800638c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800638e:	1dfb      	adds	r3, r7, #7
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	091b      	lsrs	r3, r3, #4
 8006394:	b2db      	uxtb	r3, r3
 8006396:	001a      	movs	r2, r3
 8006398:	0013      	movs	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	189b      	adds	r3, r3, r2
 800639e:	005b      	lsls	r3, r3, #1
 80063a0:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	1dfb      	adds	r3, r7, #7
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	210f      	movs	r1, #15
 80063ac:	400b      	ands	r3, r1
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	18d3      	adds	r3, r2, r3
 80063b2:	b2db      	uxtb	r3, r3
}
 80063b4:	0018      	movs	r0, r3
 80063b6:	46bd      	mov	sp, r7
 80063b8:	b004      	add	sp, #16
 80063ba:	bd80      	pop	{r7, pc}

080063bc <HAL_RTCEx_TimeStampEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_TimeStampEventCallback(RTC_HandleTypeDef *hrtc)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_TimeStampEventCallback could be implemented in the user file
  */
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b002      	add	sp, #8
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_RTCEx_Tamper1EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper1EventCallback(RTC_HandleTypeDef *hrtc)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper1EventCallback could be implemented in the user file
   */
}
 80063d4:	46c0      	nop			; (mov r8, r8)
 80063d6:	46bd      	mov	sp, r7
 80063d8:	b002      	add	sp, #8
 80063da:	bd80      	pop	{r7, pc}

080063dc <HAL_RTCEx_Tamper2EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper2EventCallback(RTC_HandleTypeDef *hrtc)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b082      	sub	sp, #8
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper2EventCallback could be implemented in the user file
   */
}
 80063e4:	46c0      	nop			; (mov r8, r8)
 80063e6:	46bd      	mov	sp, r7
 80063e8:	b002      	add	sp, #8
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_RTCEx_Tamper3EventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_Tamper3EventCallback(RTC_HandleTypeDef *hrtc)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_Tamper3EventCallback could be implemented in the user file
   */
}
 80063f4:	46c0      	nop			; (mov r8, r8)
 80063f6:	46bd      	mov	sp, r7
 80063f8:	b002      	add	sp, #8
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_RTCEx_WakeUpTimerEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_WakeUpTimerEventCallback(RTC_HandleTypeDef *hrtc)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_WakeUpTimerEventCallback could be implemented in the user file
   */
}
 8006404:	46c0      	nop			; (mov r8, r8)
 8006406:	46bd      	mov	sp, r7
 8006408:	b002      	add	sp, #8
 800640a:	bd80      	pop	{r7, pc}

0800640c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e04e      	b.n	80064bc <HAL_TIM_Base_Init+0xb0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	223d      	movs	r2, #61	; 0x3d
 8006422:	5c9b      	ldrb	r3, [r3, r2]
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d113      	bne.n	8006452 <HAL_TIM_Base_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	223c      	movs	r2, #60	; 0x3c
 800642e:	2100      	movs	r1, #0
 8006430:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	0018      	movs	r0, r3
 8006436:	f001 f97d 	bl	8007734 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800643e:	2b00      	cmp	r3, #0
 8006440:	d102      	bne.n	8006448 <HAL_TIM_Base_Init+0x3c>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1f      	ldr	r2, [pc, #124]	; (80064c4 <HAL_TIM_Base_Init+0xb8>)
 8006446:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	0010      	movs	r0, r2
 8006450:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	223d      	movs	r2, #61	; 0x3d
 8006456:	2102      	movs	r1, #2
 8006458:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3304      	adds	r3, #4
 8006462:	0019      	movs	r1, r3
 8006464:	0010      	movs	r0, r2
 8006466:	f000 fe2b 	bl	80070c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2246      	movs	r2, #70	; 0x46
 800646e:	2101      	movs	r1, #1
 8006470:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	223e      	movs	r2, #62	; 0x3e
 8006476:	2101      	movs	r1, #1
 8006478:	5499      	strb	r1, [r3, r2]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	223f      	movs	r2, #63	; 0x3f
 800647e:	2101      	movs	r1, #1
 8006480:	5499      	strb	r1, [r3, r2]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2240      	movs	r2, #64	; 0x40
 8006486:	2101      	movs	r1, #1
 8006488:	5499      	strb	r1, [r3, r2]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2241      	movs	r2, #65	; 0x41
 800648e:	2101      	movs	r1, #1
 8006490:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2242      	movs	r2, #66	; 0x42
 8006496:	2101      	movs	r1, #1
 8006498:	5499      	strb	r1, [r3, r2]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2243      	movs	r2, #67	; 0x43
 800649e:	2101      	movs	r1, #1
 80064a0:	5499      	strb	r1, [r3, r2]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2244      	movs	r2, #68	; 0x44
 80064a6:	2101      	movs	r1, #1
 80064a8:	5499      	strb	r1, [r3, r2]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2245      	movs	r2, #69	; 0x45
 80064ae:	2101      	movs	r1, #1
 80064b0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	223d      	movs	r2, #61	; 0x3d
 80064b6:	2101      	movs	r1, #1
 80064b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064ba:	2300      	movs	r3, #0
}
 80064bc:	0018      	movs	r0, r3
 80064be:	46bd      	mov	sp, r7
 80064c0:	b002      	add	sp, #8
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	0800187d 	.word	0x0800187d

080064c8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	4a0d      	ldr	r2, [pc, #52]	; (800650c <HAL_TIM_Base_Stop+0x44>)
 80064d8:	4013      	ands	r3, r2
 80064da:	d10d      	bne.n	80064f8 <HAL_TIM_Base_Stop+0x30>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	4a0b      	ldr	r2, [pc, #44]	; (8006510 <HAL_TIM_Base_Stop+0x48>)
 80064e4:	4013      	ands	r3, r2
 80064e6:	d107      	bne.n	80064f8 <HAL_TIM_Base_Stop+0x30>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2101      	movs	r1, #1
 80064f4:	438a      	bics	r2, r1
 80064f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	223d      	movs	r2, #61	; 0x3d
 80064fc:	2101      	movs	r1, #1
 80064fe:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	0018      	movs	r0, r3
 8006504:	46bd      	mov	sp, r7
 8006506:	b002      	add	sp, #8
 8006508:	bd80      	pop	{r7, pc}
 800650a:	46c0      	nop			; (mov r8, r8)
 800650c:	00001111 	.word	0x00001111
 8006510:	00000444 	.word	0x00000444

08006514 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	223d      	movs	r2, #61	; 0x3d
 8006520:	5c9b      	ldrb	r3, [r3, r2]
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	d001      	beq.n	800652c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e03b      	b.n	80065a4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	223d      	movs	r2, #61	; 0x3d
 8006530:	2102      	movs	r1, #2
 8006532:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2101      	movs	r1, #1
 8006540:	430a      	orrs	r2, r1
 8006542:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a18      	ldr	r2, [pc, #96]	; (80065ac <HAL_TIM_Base_Start_IT+0x98>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d00f      	beq.n	800656e <HAL_TIM_Base_Start_IT+0x5a>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	05db      	lsls	r3, r3, #23
 8006556:	429a      	cmp	r2, r3
 8006558:	d009      	beq.n	800656e <HAL_TIM_Base_Start_IT+0x5a>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a14      	ldr	r2, [pc, #80]	; (80065b0 <HAL_TIM_Base_Start_IT+0x9c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d004      	beq.n	800656e <HAL_TIM_Base_Start_IT+0x5a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a12      	ldr	r2, [pc, #72]	; (80065b4 <HAL_TIM_Base_Start_IT+0xa0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d111      	bne.n	8006592 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	2207      	movs	r2, #7
 8006576:	4013      	ands	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	2b06      	cmp	r3, #6
 800657e:	d010      	beq.n	80065a2 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2101      	movs	r1, #1
 800658c:	430a      	orrs	r2, r1
 800658e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006590:	e007      	b.n	80065a2 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681a      	ldr	r2, [r3, #0]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	2101      	movs	r1, #1
 800659e:	430a      	orrs	r2, r1
 80065a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065a2:	2300      	movs	r3, #0
}
 80065a4:	0018      	movs	r0, r3
 80065a6:	46bd      	mov	sp, r7
 80065a8:	b004      	add	sp, #16
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	40012c00 	.word	0x40012c00
 80065b0:	40000400 	.word	0x40000400
 80065b4:	40014000 	.word	0x40014000

080065b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	e04e      	b.n	8006668 <HAL_TIM_PWM_Init+0xb0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	223d      	movs	r2, #61	; 0x3d
 80065ce:	5c9b      	ldrb	r3, [r3, r2]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d113      	bne.n	80065fe <HAL_TIM_PWM_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	223c      	movs	r2, #60	; 0x3c
 80065da:	2100      	movs	r1, #0
 80065dc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	0018      	movs	r0, r3
 80065e2:	f001 f8a7 	bl	8007734 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <HAL_TIM_PWM_Init+0x3c>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	4a1f      	ldr	r2, [pc, #124]	; (8006670 <HAL_TIM_PWM_Init+0xb8>)
 80065f2:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	0010      	movs	r0, r2
 80065fc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	223d      	movs	r2, #61	; 0x3d
 8006602:	2102      	movs	r1, #2
 8006604:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	3304      	adds	r3, #4
 800660e:	0019      	movs	r1, r3
 8006610:	0010      	movs	r0, r2
 8006612:	f000 fd55 	bl	80070c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2246      	movs	r2, #70	; 0x46
 800661a:	2101      	movs	r1, #1
 800661c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	223e      	movs	r2, #62	; 0x3e
 8006622:	2101      	movs	r1, #1
 8006624:	5499      	strb	r1, [r3, r2]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	223f      	movs	r2, #63	; 0x3f
 800662a:	2101      	movs	r1, #1
 800662c:	5499      	strb	r1, [r3, r2]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2240      	movs	r2, #64	; 0x40
 8006632:	2101      	movs	r1, #1
 8006634:	5499      	strb	r1, [r3, r2]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2241      	movs	r2, #65	; 0x41
 800663a:	2101      	movs	r1, #1
 800663c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2242      	movs	r2, #66	; 0x42
 8006642:	2101      	movs	r1, #1
 8006644:	5499      	strb	r1, [r3, r2]
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2243      	movs	r2, #67	; 0x43
 800664a:	2101      	movs	r1, #1
 800664c:	5499      	strb	r1, [r3, r2]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2244      	movs	r2, #68	; 0x44
 8006652:	2101      	movs	r1, #1
 8006654:	5499      	strb	r1, [r3, r2]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2245      	movs	r2, #69	; 0x45
 800665a:	2101      	movs	r1, #1
 800665c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	223d      	movs	r2, #61	; 0x3d
 8006662:	2101      	movs	r1, #1
 8006664:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006666:	2300      	movs	r3, #0
}
 8006668:	0018      	movs	r0, r3
 800666a:	46bd      	mov	sp, r7
 800666c:	b002      	add	sp, #8
 800666e:	bd80      	pop	{r7, pc}
 8006670:	08006675 	.word	0x08006675

08006674 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800667c:	46c0      	nop			; (mov r8, r8)
 800667e:	46bd      	mov	sp, r7
 8006680:	b002      	add	sp, #8
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
 800668c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800668e:	230f      	movs	r3, #15
 8006690:	18fb      	adds	r3, r7, r3
 8006692:	2200      	movs	r2, #0
 8006694:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d108      	bne.n	80066ae <HAL_TIM_PWM_Start_IT+0x2a>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	223e      	movs	r2, #62	; 0x3e
 80066a0:	5c9b      	ldrb	r3, [r3, r2]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	3b01      	subs	r3, #1
 80066a6:	1e5a      	subs	r2, r3, #1
 80066a8:	4193      	sbcs	r3, r2
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	e01f      	b.n	80066ee <HAL_TIM_PWM_Start_IT+0x6a>
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d108      	bne.n	80066c6 <HAL_TIM_PWM_Start_IT+0x42>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	223f      	movs	r2, #63	; 0x3f
 80066b8:	5c9b      	ldrb	r3, [r3, r2]
 80066ba:	b2db      	uxtb	r3, r3
 80066bc:	3b01      	subs	r3, #1
 80066be:	1e5a      	subs	r2, r3, #1
 80066c0:	4193      	sbcs	r3, r2
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	e013      	b.n	80066ee <HAL_TIM_PWM_Start_IT+0x6a>
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d108      	bne.n	80066de <HAL_TIM_PWM_Start_IT+0x5a>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2240      	movs	r2, #64	; 0x40
 80066d0:	5c9b      	ldrb	r3, [r3, r2]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	3b01      	subs	r3, #1
 80066d6:	1e5a      	subs	r2, r3, #1
 80066d8:	4193      	sbcs	r3, r2
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	e007      	b.n	80066ee <HAL_TIM_PWM_Start_IT+0x6a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2241      	movs	r2, #65	; 0x41
 80066e2:	5c9b      	ldrb	r3, [r3, r2]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	3b01      	subs	r3, #1
 80066e8:	1e5a      	subs	r2, r3, #1
 80066ea:	4193      	sbcs	r3, r2
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e0b7      	b.n	8006866 <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d104      	bne.n	8006706 <HAL_TIM_PWM_Start_IT+0x82>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	223e      	movs	r2, #62	; 0x3e
 8006700:	2102      	movs	r1, #2
 8006702:	5499      	strb	r1, [r3, r2]
 8006704:	e013      	b.n	800672e <HAL_TIM_PWM_Start_IT+0xaa>
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	2b04      	cmp	r3, #4
 800670a:	d104      	bne.n	8006716 <HAL_TIM_PWM_Start_IT+0x92>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	223f      	movs	r2, #63	; 0x3f
 8006710:	2102      	movs	r1, #2
 8006712:	5499      	strb	r1, [r3, r2]
 8006714:	e00b      	b.n	800672e <HAL_TIM_PWM_Start_IT+0xaa>
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	2b08      	cmp	r3, #8
 800671a:	d104      	bne.n	8006726 <HAL_TIM_PWM_Start_IT+0xa2>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2240      	movs	r2, #64	; 0x40
 8006720:	2102      	movs	r1, #2
 8006722:	5499      	strb	r1, [r3, r2]
 8006724:	e003      	b.n	800672e <HAL_TIM_PWM_Start_IT+0xaa>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2241      	movs	r2, #65	; 0x41
 800672a:	2102      	movs	r1, #2
 800672c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	2b0c      	cmp	r3, #12
 8006732:	d02a      	beq.n	800678a <HAL_TIM_PWM_Start_IT+0x106>
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2b0c      	cmp	r3, #12
 8006738:	d830      	bhi.n	800679c <HAL_TIM_PWM_Start_IT+0x118>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b08      	cmp	r3, #8
 800673e:	d01b      	beq.n	8006778 <HAL_TIM_PWM_Start_IT+0xf4>
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b08      	cmp	r3, #8
 8006744:	d82a      	bhi.n	800679c <HAL_TIM_PWM_Start_IT+0x118>
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d003      	beq.n	8006754 <HAL_TIM_PWM_Start_IT+0xd0>
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	2b04      	cmp	r3, #4
 8006750:	d009      	beq.n	8006766 <HAL_TIM_PWM_Start_IT+0xe2>
 8006752:	e023      	b.n	800679c <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2102      	movs	r1, #2
 8006760:	430a      	orrs	r2, r1
 8006762:	60da      	str	r2, [r3, #12]
      break;
 8006764:	e01f      	b.n	80067a6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2104      	movs	r1, #4
 8006772:	430a      	orrs	r2, r1
 8006774:	60da      	str	r2, [r3, #12]
      break;
 8006776:	e016      	b.n	80067a6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	68da      	ldr	r2, [r3, #12]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2108      	movs	r1, #8
 8006784:	430a      	orrs	r2, r1
 8006786:	60da      	str	r2, [r3, #12]
      break;
 8006788:	e00d      	b.n	80067a6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	68da      	ldr	r2, [r3, #12]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2110      	movs	r1, #16
 8006796:	430a      	orrs	r2, r1
 8006798:	60da      	str	r2, [r3, #12]
      break;
 800679a:	e004      	b.n	80067a6 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 800679c:	230f      	movs	r3, #15
 800679e:	18fb      	adds	r3, r7, r3
 80067a0:	2201      	movs	r2, #1
 80067a2:	701a      	strb	r2, [r3, #0]
      break;
 80067a4:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80067a6:	230f      	movs	r3, #15
 80067a8:	18fb      	adds	r3, r7, r3
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d157      	bne.n	8006860 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	0018      	movs	r0, r3
 80067ba:	f000 ff97 	bl	80076ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a2b      	ldr	r2, [pc, #172]	; (8006870 <HAL_TIM_PWM_Start_IT+0x1ec>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d00e      	beq.n	80067e6 <HAL_TIM_PWM_Start_IT+0x162>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a29      	ldr	r2, [pc, #164]	; (8006874 <HAL_TIM_PWM_Start_IT+0x1f0>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d009      	beq.n	80067e6 <HAL_TIM_PWM_Start_IT+0x162>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a28      	ldr	r2, [pc, #160]	; (8006878 <HAL_TIM_PWM_Start_IT+0x1f4>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d004      	beq.n	80067e6 <HAL_TIM_PWM_Start_IT+0x162>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a26      	ldr	r2, [pc, #152]	; (800687c <HAL_TIM_PWM_Start_IT+0x1f8>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d101      	bne.n	80067ea <HAL_TIM_PWM_Start_IT+0x166>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e000      	b.n	80067ec <HAL_TIM_PWM_Start_IT+0x168>
 80067ea:	2300      	movs	r3, #0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d008      	beq.n	8006802 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2180      	movs	r1, #128	; 0x80
 80067fc:	0209      	lsls	r1, r1, #8
 80067fe:	430a      	orrs	r2, r1
 8006800:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a1a      	ldr	r2, [pc, #104]	; (8006870 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d00f      	beq.n	800682c <HAL_TIM_PWM_Start_IT+0x1a8>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	2380      	movs	r3, #128	; 0x80
 8006812:	05db      	lsls	r3, r3, #23
 8006814:	429a      	cmp	r2, r3
 8006816:	d009      	beq.n	800682c <HAL_TIM_PWM_Start_IT+0x1a8>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4a18      	ldr	r2, [pc, #96]	; (8006880 <HAL_TIM_PWM_Start_IT+0x1fc>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d004      	beq.n	800682c <HAL_TIM_PWM_Start_IT+0x1a8>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4a13      	ldr	r2, [pc, #76]	; (8006874 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d111      	bne.n	8006850 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	2207      	movs	r2, #7
 8006834:	4013      	ands	r3, r2
 8006836:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	2b06      	cmp	r3, #6
 800683c:	d010      	beq.n	8006860 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2101      	movs	r1, #1
 800684a:	430a      	orrs	r2, r1
 800684c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800684e:	e007      	b.n	8006860 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2101      	movs	r1, #1
 800685c:	430a      	orrs	r2, r1
 800685e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006860:	230f      	movs	r3, #15
 8006862:	18fb      	adds	r3, r7, r3
 8006864:	781b      	ldrb	r3, [r3, #0]
}
 8006866:	0018      	movs	r0, r3
 8006868:	46bd      	mov	sp, r7
 800686a:	b004      	add	sp, #16
 800686c:	bd80      	pop	{r7, pc}
 800686e:	46c0      	nop			; (mov r8, r8)
 8006870:	40012c00 	.word	0x40012c00
 8006874:	40014000 	.word	0x40014000
 8006878:	40014400 	.word	0x40014400
 800687c:	40014800 	.word	0x40014800
 8006880:	40000400 	.word	0x40000400

08006884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b082      	sub	sp, #8
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	2202      	movs	r2, #2
 8006894:	4013      	ands	r3, r2
 8006896:	2b02      	cmp	r3, #2
 8006898:	d12a      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x6c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	2202      	movs	r2, #2
 80068a2:	4013      	ands	r3, r2
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d123      	bne.n	80068f0 <HAL_TIM_IRQHandler+0x6c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	2203      	movs	r2, #3
 80068ae:	4252      	negs	r2, r2
 80068b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	699b      	ldr	r3, [r3, #24]
 80068be:	2203      	movs	r2, #3
 80068c0:	4013      	ands	r3, r2
 80068c2:	d006      	beq.n	80068d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2290      	movs	r2, #144	; 0x90
 80068c8:	589b      	ldr	r3, [r3, r2]
 80068ca:	687a      	ldr	r2, [r7, #4]
 80068cc:	0010      	movs	r0, r2
 80068ce:	4798      	blx	r3
 80068d0:	e00b      	b.n	80068ea <HAL_TIM_IRQHandler+0x66>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2298      	movs	r2, #152	; 0x98
 80068d6:	589b      	ldr	r3, [r3, r2]
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	0010      	movs	r0, r2
 80068dc:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	229c      	movs	r2, #156	; 0x9c
 80068e2:	589b      	ldr	r3, [r3, r2]
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	0010      	movs	r0, r2
 80068e8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	2204      	movs	r2, #4
 80068f8:	4013      	ands	r3, r2
 80068fa:	2b04      	cmp	r3, #4
 80068fc:	d12b      	bne.n	8006956 <HAL_TIM_IRQHandler+0xd2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	68db      	ldr	r3, [r3, #12]
 8006904:	2204      	movs	r2, #4
 8006906:	4013      	ands	r3, r2
 8006908:	2b04      	cmp	r3, #4
 800690a:	d124      	bne.n	8006956 <HAL_TIM_IRQHandler+0xd2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2205      	movs	r2, #5
 8006912:	4252      	negs	r2, r2
 8006914:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699a      	ldr	r2, [r3, #24]
 8006922:	23c0      	movs	r3, #192	; 0xc0
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	4013      	ands	r3, r2
 8006928:	d006      	beq.n	8006938 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2290      	movs	r2, #144	; 0x90
 800692e:	589b      	ldr	r3, [r3, r2]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	0010      	movs	r0, r2
 8006934:	4798      	blx	r3
 8006936:	e00b      	b.n	8006950 <HAL_TIM_IRQHandler+0xcc>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2298      	movs	r2, #152	; 0x98
 800693c:	589b      	ldr	r3, [r3, r2]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	0010      	movs	r0, r2
 8006942:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	229c      	movs	r2, #156	; 0x9c
 8006948:	589b      	ldr	r3, [r3, r2]
 800694a:	687a      	ldr	r2, [r7, #4]
 800694c:	0010      	movs	r0, r2
 800694e:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2200      	movs	r2, #0
 8006954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2208      	movs	r2, #8
 800695e:	4013      	ands	r3, r2
 8006960:	2b08      	cmp	r3, #8
 8006962:	d12a      	bne.n	80069ba <HAL_TIM_IRQHandler+0x136>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2208      	movs	r2, #8
 800696c:	4013      	ands	r3, r2
 800696e:	2b08      	cmp	r3, #8
 8006970:	d123      	bne.n	80069ba <HAL_TIM_IRQHandler+0x136>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2209      	movs	r2, #9
 8006978:	4252      	negs	r2, r2
 800697a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2204      	movs	r2, #4
 8006980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	2203      	movs	r2, #3
 800698a:	4013      	ands	r3, r2
 800698c:	d006      	beq.n	800699c <HAL_TIM_IRQHandler+0x118>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2290      	movs	r2, #144	; 0x90
 8006992:	589b      	ldr	r3, [r3, r2]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	0010      	movs	r0, r2
 8006998:	4798      	blx	r3
 800699a:	e00b      	b.n	80069b4 <HAL_TIM_IRQHandler+0x130>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2298      	movs	r2, #152	; 0x98
 80069a0:	589b      	ldr	r3, [r3, r2]
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	0010      	movs	r0, r2
 80069a6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	229c      	movs	r2, #156	; 0x9c
 80069ac:	589b      	ldr	r3, [r3, r2]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	0010      	movs	r0, r2
 80069b2:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2210      	movs	r2, #16
 80069c2:	4013      	ands	r3, r2
 80069c4:	2b10      	cmp	r3, #16
 80069c6:	d12b      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x19c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	2210      	movs	r2, #16
 80069d0:	4013      	ands	r3, r2
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d124      	bne.n	8006a20 <HAL_TIM_IRQHandler+0x19c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2211      	movs	r2, #17
 80069dc:	4252      	negs	r2, r2
 80069de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2208      	movs	r2, #8
 80069e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69da      	ldr	r2, [r3, #28]
 80069ec:	23c0      	movs	r3, #192	; 0xc0
 80069ee:	009b      	lsls	r3, r3, #2
 80069f0:	4013      	ands	r3, r2
 80069f2:	d006      	beq.n	8006a02 <HAL_TIM_IRQHandler+0x17e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2290      	movs	r2, #144	; 0x90
 80069f8:	589b      	ldr	r3, [r3, r2]
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	0010      	movs	r0, r2
 80069fe:	4798      	blx	r3
 8006a00:	e00b      	b.n	8006a1a <HAL_TIM_IRQHandler+0x196>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2298      	movs	r2, #152	; 0x98
 8006a06:	589b      	ldr	r3, [r3, r2]
 8006a08:	687a      	ldr	r2, [r7, #4]
 8006a0a:	0010      	movs	r0, r2
 8006a0c:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	229c      	movs	r2, #156	; 0x9c
 8006a12:	589b      	ldr	r3, [r3, r2]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	0010      	movs	r0, r2
 8006a18:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	691b      	ldr	r3, [r3, #16]
 8006a26:	2201      	movs	r2, #1
 8006a28:	4013      	ands	r3, r2
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d111      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x1ce>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	4013      	ands	r3, r2
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d10a      	bne.n	8006a52 <HAL_TIM_IRQHandler+0x1ce>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2202      	movs	r2, #2
 8006a42:	4252      	negs	r2, r2
 8006a44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2280      	movs	r2, #128	; 0x80
 8006a4a:	589b      	ldr	r3, [r3, r2]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	0010      	movs	r0, r2
 8006a50:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2280      	movs	r2, #128	; 0x80
 8006a5a:	4013      	ands	r3, r2
 8006a5c:	2b80      	cmp	r3, #128	; 0x80
 8006a5e:	d111      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x200>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	2280      	movs	r2, #128	; 0x80
 8006a68:	4013      	ands	r3, r2
 8006a6a:	2b80      	cmp	r3, #128	; 0x80
 8006a6c:	d10a      	bne.n	8006a84 <HAL_TIM_IRQHandler+0x200>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2281      	movs	r2, #129	; 0x81
 8006a74:	4252      	negs	r2, r2
 8006a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	22b0      	movs	r2, #176	; 0xb0
 8006a7c:	589b      	ldr	r3, [r3, r2]
 8006a7e:	687a      	ldr	r2, [r7, #4]
 8006a80:	0010      	movs	r0, r2
 8006a82:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	691b      	ldr	r3, [r3, #16]
 8006a8a:	2240      	movs	r2, #64	; 0x40
 8006a8c:	4013      	ands	r3, r2
 8006a8e:	2b40      	cmp	r3, #64	; 0x40
 8006a90:	d111      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x232>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	2240      	movs	r2, #64	; 0x40
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b40      	cmp	r3, #64	; 0x40
 8006a9e:	d10a      	bne.n	8006ab6 <HAL_TIM_IRQHandler+0x232>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2241      	movs	r2, #65	; 0x41
 8006aa6:	4252      	negs	r2, r2
 8006aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2288      	movs	r2, #136	; 0x88
 8006aae:	589b      	ldr	r3, [r3, r2]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	0010      	movs	r0, r2
 8006ab4:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	2220      	movs	r2, #32
 8006abe:	4013      	ands	r3, r2
 8006ac0:	2b20      	cmp	r3, #32
 8006ac2:	d111      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x264>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68db      	ldr	r3, [r3, #12]
 8006aca:	2220      	movs	r2, #32
 8006acc:	4013      	ands	r3, r2
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d10a      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0x264>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2221      	movs	r2, #33	; 0x21
 8006ad8:	4252      	negs	r2, r2
 8006ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	22a8      	movs	r2, #168	; 0xa8
 8006ae0:	589b      	ldr	r3, [r3, r2]
 8006ae2:	687a      	ldr	r2, [r7, #4]
 8006ae4:	0010      	movs	r0, r2
 8006ae6:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ae8:	46c0      	nop			; (mov r8, r8)
 8006aea:	46bd      	mov	sp, r7
 8006aec:	b002      	add	sp, #8
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006afc:	2317      	movs	r3, #23
 8006afe:	18fb      	adds	r3, r7, r3
 8006b00:	2200      	movs	r2, #0
 8006b02:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	223c      	movs	r2, #60	; 0x3c
 8006b08:	5c9b      	ldrb	r3, [r3, r2]
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d101      	bne.n	8006b12 <HAL_TIM_PWM_ConfigChannel+0x22>
 8006b0e:	2302      	movs	r3, #2
 8006b10:	e0ad      	b.n	8006c6e <HAL_TIM_PWM_ConfigChannel+0x17e>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	223c      	movs	r2, #60	; 0x3c
 8006b16:	2101      	movs	r1, #1
 8006b18:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2b0c      	cmp	r3, #12
 8006b1e:	d100      	bne.n	8006b22 <HAL_TIM_PWM_ConfigChannel+0x32>
 8006b20:	e076      	b.n	8006c10 <HAL_TIM_PWM_ConfigChannel+0x120>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b0c      	cmp	r3, #12
 8006b26:	d900      	bls.n	8006b2a <HAL_TIM_PWM_ConfigChannel+0x3a>
 8006b28:	e095      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d04e      	beq.n	8006bce <HAL_TIM_PWM_ConfigChannel+0xde>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b08      	cmp	r3, #8
 8006b34:	d900      	bls.n	8006b38 <HAL_TIM_PWM_ConfigChannel+0x48>
 8006b36:	e08e      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x166>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d003      	beq.n	8006b46 <HAL_TIM_PWM_ConfigChannel+0x56>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d021      	beq.n	8006b88 <HAL_TIM_PWM_ConfigChannel+0x98>
 8006b44:	e087      	b.n	8006c56 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	0011      	movs	r1, r2
 8006b4e:	0018      	movs	r0, r3
 8006b50:	f000 fb36 	bl	80071c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	699a      	ldr	r2, [r3, #24]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2108      	movs	r1, #8
 8006b60:	430a      	orrs	r2, r1
 8006b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2104      	movs	r1, #4
 8006b70:	438a      	bics	r2, r1
 8006b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	6999      	ldr	r1, [r3, #24]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	619a      	str	r2, [r3, #24]
      break;
 8006b86:	e06b      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	0011      	movs	r1, r2
 8006b90:	0018      	movs	r0, r3
 8006b92:	f000 fb9d 	bl	80072d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	699a      	ldr	r2, [r3, #24]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2180      	movs	r1, #128	; 0x80
 8006ba2:	0109      	lsls	r1, r1, #4
 8006ba4:	430a      	orrs	r2, r1
 8006ba6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	699a      	ldr	r2, [r3, #24]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4931      	ldr	r1, [pc, #196]	; (8006c78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006bb4:	400a      	ands	r2, r1
 8006bb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6999      	ldr	r1, [r3, #24]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	021a      	lsls	r2, r3, #8
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	430a      	orrs	r2, r1
 8006bca:	619a      	str	r2, [r3, #24]
      break;
 8006bcc:	e048      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	68ba      	ldr	r2, [r7, #8]
 8006bd4:	0011      	movs	r1, r2
 8006bd6:	0018      	movs	r0, r3
 8006bd8:	f000 fbfe 	bl	80073d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69da      	ldr	r2, [r3, #28]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2108      	movs	r1, #8
 8006be8:	430a      	orrs	r2, r1
 8006bea:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2104      	movs	r1, #4
 8006bf8:	438a      	bics	r2, r1
 8006bfa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	69d9      	ldr	r1, [r3, #28]
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	691a      	ldr	r2, [r3, #16]
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	61da      	str	r2, [r3, #28]
      break;
 8006c0e:	e027      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	0011      	movs	r1, r2
 8006c18:	0018      	movs	r0, r3
 8006c1a:	f000 fc63 	bl	80074e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	69da      	ldr	r2, [r3, #28]
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2180      	movs	r1, #128	; 0x80
 8006c2a:	0109      	lsls	r1, r1, #4
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69da      	ldr	r2, [r3, #28]
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	490f      	ldr	r1, [pc, #60]	; (8006c78 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8006c3c:	400a      	ands	r2, r1
 8006c3e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	69d9      	ldr	r1, [r3, #28]
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	021a      	lsls	r2, r3, #8
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	61da      	str	r2, [r3, #28]
      break;
 8006c54:	e004      	b.n	8006c60 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8006c56:	2317      	movs	r3, #23
 8006c58:	18fb      	adds	r3, r7, r3
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
      break;
 8006c5e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	223c      	movs	r2, #60	; 0x3c
 8006c64:	2100      	movs	r1, #0
 8006c66:	5499      	strb	r1, [r3, r2]

  return status;
 8006c68:	2317      	movs	r3, #23
 8006c6a:	18fb      	adds	r3, r7, r3
 8006c6c:	781b      	ldrb	r3, [r3, #0]
}
 8006c6e:	0018      	movs	r0, r3
 8006c70:	46bd      	mov	sp, r7
 8006c72:	b006      	add	sp, #24
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	46c0      	nop			; (mov r8, r8)
 8006c78:	fffffbff 	.word	0xfffffbff

08006c7c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c86:	230f      	movs	r3, #15
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	223c      	movs	r2, #60	; 0x3c
 8006c92:	5c9b      	ldrb	r3, [r3, r2]
 8006c94:	2b01      	cmp	r3, #1
 8006c96:	d101      	bne.n	8006c9c <HAL_TIM_ConfigClockSource+0x20>
 8006c98:	2302      	movs	r3, #2
 8006c9a:	e0bc      	b.n	8006e16 <HAL_TIM_ConfigClockSource+0x19a>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	223c      	movs	r2, #60	; 0x3c
 8006ca0:	2101      	movs	r1, #1
 8006ca2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	223d      	movs	r2, #61	; 0x3d
 8006ca8:	2102      	movs	r1, #2
 8006caa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2277      	movs	r2, #119	; 0x77
 8006cb8:	4393      	bics	r3, r2
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a58      	ldr	r2, [pc, #352]	; (8006e20 <HAL_TIM_ConfigClockSource+0x1a4>)
 8006cc0:	4013      	ands	r3, r2
 8006cc2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2280      	movs	r2, #128	; 0x80
 8006cd2:	0192      	lsls	r2, r2, #6
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_TIM_ConfigClockSource+0xde>
 8006cd8:	2280      	movs	r2, #128	; 0x80
 8006cda:	0192      	lsls	r2, r2, #6
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d900      	bls.n	8006ce2 <HAL_TIM_ConfigClockSource+0x66>
 8006ce0:	e088      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	0152      	lsls	r2, r2, #5
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d100      	bne.n	8006cec <HAL_TIM_ConfigClockSource+0x70>
 8006cea:	e088      	b.n	8006dfe <HAL_TIM_ConfigClockSource+0x182>
 8006cec:	2280      	movs	r2, #128	; 0x80
 8006cee:	0152      	lsls	r2, r2, #5
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d900      	bls.n	8006cf6 <HAL_TIM_ConfigClockSource+0x7a>
 8006cf4:	e07e      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006cf6:	2b70      	cmp	r3, #112	; 0x70
 8006cf8:	d018      	beq.n	8006d2c <HAL_TIM_ConfigClockSource+0xb0>
 8006cfa:	d900      	bls.n	8006cfe <HAL_TIM_ConfigClockSource+0x82>
 8006cfc:	e07a      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006cfe:	2b60      	cmp	r3, #96	; 0x60
 8006d00:	d04f      	beq.n	8006da2 <HAL_TIM_ConfigClockSource+0x126>
 8006d02:	d900      	bls.n	8006d06 <HAL_TIM_ConfigClockSource+0x8a>
 8006d04:	e076      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d06:	2b50      	cmp	r3, #80	; 0x50
 8006d08:	d03b      	beq.n	8006d82 <HAL_TIM_ConfigClockSource+0x106>
 8006d0a:	d900      	bls.n	8006d0e <HAL_TIM_ConfigClockSource+0x92>
 8006d0c:	e072      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d057      	beq.n	8006dc2 <HAL_TIM_ConfigClockSource+0x146>
 8006d12:	d900      	bls.n	8006d16 <HAL_TIM_ConfigClockSource+0x9a>
 8006d14:	e06e      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d16:	2b30      	cmp	r3, #48	; 0x30
 8006d18:	d063      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d1a:	d86b      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d1c:	2b20      	cmp	r3, #32
 8006d1e:	d060      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d20:	d868      	bhi.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d05d      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d26:	2b10      	cmp	r3, #16
 8006d28:	d05b      	beq.n	8006de2 <HAL_TIM_ConfigClockSource+0x166>
 8006d2a:	e063      	b.n	8006df4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6818      	ldr	r0, [r3, #0]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	6899      	ldr	r1, [r3, #8]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68db      	ldr	r3, [r3, #12]
 8006d3c:	f000 fcb6 	bl	80076ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	2277      	movs	r2, #119	; 0x77
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	609a      	str	r2, [r3, #8]
      break;
 8006d58:	e052      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6818      	ldr	r0, [r3, #0]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	6899      	ldr	r1, [r3, #8]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	685a      	ldr	r2, [r3, #4]
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f000 fc9f 	bl	80076ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689a      	ldr	r2, [r3, #8]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2180      	movs	r1, #128	; 0x80
 8006d7a:	01c9      	lsls	r1, r1, #7
 8006d7c:	430a      	orrs	r2, r1
 8006d7e:	609a      	str	r2, [r3, #8]
      break;
 8006d80:	e03e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6818      	ldr	r0, [r3, #0]
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	6859      	ldr	r1, [r3, #4]
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	001a      	movs	r2, r3
 8006d90:	f000 fc12 	bl	80075b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2150      	movs	r1, #80	; 0x50
 8006d9a:	0018      	movs	r0, r3
 8006d9c:	f000 fc6c 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006da0:	e02e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6818      	ldr	r0, [r3, #0]
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	6859      	ldr	r1, [r3, #4]
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	001a      	movs	r2, r3
 8006db0:	f000 fc30 	bl	8007614 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	2160      	movs	r1, #96	; 0x60
 8006dba:	0018      	movs	r0, r3
 8006dbc:	f000 fc5c 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006dc0:	e01e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6818      	ldr	r0, [r3, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	6859      	ldr	r1, [r3, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	68db      	ldr	r3, [r3, #12]
 8006dce:	001a      	movs	r2, r3
 8006dd0:	f000 fbf2 	bl	80075b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	2140      	movs	r1, #64	; 0x40
 8006dda:	0018      	movs	r0, r3
 8006ddc:	f000 fc4c 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006de0:	e00e      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	0019      	movs	r1, r3
 8006dec:	0010      	movs	r0, r2
 8006dee:	f000 fc43 	bl	8007678 <TIM_ITRx_SetConfig>
      break;
 8006df2:	e005      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8006df4:	230f      	movs	r3, #15
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	2201      	movs	r2, #1
 8006dfa:	701a      	strb	r2, [r3, #0]
      break;
 8006dfc:	e000      	b.n	8006e00 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8006dfe:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	223d      	movs	r2, #61	; 0x3d
 8006e04:	2101      	movs	r1, #1
 8006e06:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	223c      	movs	r2, #60	; 0x3c
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	5499      	strb	r1, [r3, r2]

  return status;
 8006e10:	230f      	movs	r3, #15
 8006e12:	18fb      	adds	r3, r7, r3
 8006e14:	781b      	ldrb	r3, [r3, #0]
}
 8006e16:	0018      	movs	r0, r3
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	b004      	add	sp, #16
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	46c0      	nop			; (mov r8, r8)
 8006e20:	ffff00ff 	.word	0xffff00ff

08006e24 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006e2c:	46c0      	nop			; (mov r8, r8)
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	b002      	add	sp, #8
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006e3c:	46c0      	nop			; (mov r8, r8)
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	b002      	add	sp, #8
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b082      	sub	sp, #8
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e4c:	46c0      	nop			; (mov r8, r8)
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	b002      	add	sp, #8
 8006e52:	bd80      	pop	{r7, pc}

08006e54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b082      	sub	sp, #8
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e5c:	46c0      	nop			; (mov r8, r8)
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	b002      	add	sp, #8
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b082      	sub	sp, #8
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006e6c:	46c0      	nop			; (mov r8, r8)
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	b002      	add	sp, #8
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e7c:	46c0      	nop			; (mov r8, r8)
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	b002      	add	sp, #8
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006e8c:	46c0      	nop			; (mov r8, r8)
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	b002      	add	sp, #8
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e9c:	46c0      	nop			; (mov r8, r8)
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	b002      	add	sp, #8
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b082      	sub	sp, #8
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006eac:	46c0      	nop			; (mov r8, r8)
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	b002      	add	sp, #8
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006ebc:	46c0      	nop			; (mov r8, r8)
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	b002      	add	sp, #8
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	607a      	str	r2, [r7, #4]
 8006ece:	230b      	movs	r3, #11
 8006ed0:	18fb      	adds	r3, r7, r3
 8006ed2:	1c0a      	adds	r2, r1, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed6:	2317      	movs	r3, #23
 8006ed8:	18fb      	adds	r3, r7, r3
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]

  if (pCallback == NULL)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIM_RegisterCallback+0x24>
  {
    return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0e3      	b.n	80070b0 <HAL_TIM_RegisterCallback+0x1ec>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	223d      	movs	r2, #61	; 0x3d
 8006eec:	5c9b      	ldrb	r3, [r3, r2]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d000      	beq.n	8006ef6 <HAL_TIM_RegisterCallback+0x32>
 8006ef4:	e088      	b.n	8007008 <HAL_TIM_RegisterCallback+0x144>
  {
    switch (CallbackID)
 8006ef6:	230b      	movs	r3, #11
 8006ef8:	18fb      	adds	r3, r7, r3
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b1a      	cmp	r3, #26
 8006efe:	d900      	bls.n	8006f02 <HAL_TIM_RegisterCallback+0x3e>
 8006f00:	e07d      	b.n	8006ffe <HAL_TIM_RegisterCallback+0x13a>
 8006f02:	009a      	lsls	r2, r3, #2
 8006f04:	4b6c      	ldr	r3, [pc, #432]	; (80070b8 <HAL_TIM_RegisterCallback+0x1f4>)
 8006f06:	18d3      	adds	r3, r2, r3
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8006f12:	e0ca      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8006f1a:	e0c6      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8006f22:	e0c2      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8006f2a:	e0be      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8006f32:	e0ba      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8006f3a:	e0b6      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8006f42:	e0b2      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8006f4a:	e0ae      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8006f52:	e0aa      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8006f5a:	e0a6      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8006f62:	e0a2      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8006f6a:	e09e      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8006f72:	e09a      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	687a      	ldr	r2, [r7, #4]
 8006f78:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8006f7a:	e096      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2180      	movs	r1, #128	; 0x80
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	505a      	str	r2, [r3, r1]
        break;
 8006f84:	e091      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2184      	movs	r1, #132	; 0x84
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	505a      	str	r2, [r3, r1]
        break;
 8006f8e:	e08c      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2188      	movs	r1, #136	; 0x88
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	505a      	str	r2, [r3, r1]
        break;
 8006f98:	e087      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	218c      	movs	r1, #140	; 0x8c
 8006f9e:	687a      	ldr	r2, [r7, #4]
 8006fa0:	505a      	str	r2, [r3, r1]
        break;
 8006fa2:	e082      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2190      	movs	r1, #144	; 0x90
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	505a      	str	r2, [r3, r1]
        break;
 8006fac:	e07d      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2194      	movs	r1, #148	; 0x94
 8006fb2:	687a      	ldr	r2, [r7, #4]
 8006fb4:	505a      	str	r2, [r3, r1]
        break;
 8006fb6:	e078      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2198      	movs	r1, #152	; 0x98
 8006fbc:	687a      	ldr	r2, [r7, #4]
 8006fbe:	505a      	str	r2, [r3, r1]
        break;
 8006fc0:	e073      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	219c      	movs	r1, #156	; 0x9c
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	505a      	str	r2, [r3, r1]
        break;
 8006fca:	e06e      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	21a0      	movs	r1, #160	; 0xa0
 8006fd0:	687a      	ldr	r2, [r7, #4]
 8006fd2:	505a      	str	r2, [r3, r1]
        break;
 8006fd4:	e069      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	21a4      	movs	r1, #164	; 0xa4
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	505a      	str	r2, [r3, r1]
        break;
 8006fde:	e064      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	21a8      	movs	r1, #168	; 0xa8
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	505a      	str	r2, [r3, r1]
        break;
 8006fe8:	e05f      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	21ac      	movs	r1, #172	; 0xac
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	505a      	str	r2, [r3, r1]
        break;
 8006ff2:	e05a      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	21b0      	movs	r1, #176	; 0xb0
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	505a      	str	r2, [r3, r1]
        break;
 8006ffc:	e055      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8006ffe:	2317      	movs	r3, #23
 8007000:	18fb      	adds	r3, r7, r3
 8007002:	2201      	movs	r2, #1
 8007004:	701a      	strb	r2, [r3, #0]
        break;
 8007006:	e050      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	223d      	movs	r2, #61	; 0x3d
 800700c:	5c9b      	ldrb	r3, [r3, r2]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	2b00      	cmp	r3, #0
 8007012:	d146      	bne.n	80070a2 <HAL_TIM_RegisterCallback+0x1de>
  {
    switch (CallbackID)
 8007014:	230b      	movs	r3, #11
 8007016:	18fb      	adds	r3, r7, r3
 8007018:	781b      	ldrb	r3, [r3, #0]
 800701a:	2b0d      	cmp	r3, #13
 800701c:	d83c      	bhi.n	8007098 <HAL_TIM_RegisterCallback+0x1d4>
 800701e:	009a      	lsls	r2, r3, #2
 8007020:	4b26      	ldr	r3, [pc, #152]	; (80070bc <HAL_TIM_RegisterCallback+0x1f8>)
 8007022:	18d3      	adds	r3, r2, r3
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	469f      	mov	pc, r3
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800702e:	e03c      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8007036:	e038      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	687a      	ldr	r2, [r7, #4]
 800703c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800703e:	e034      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	687a      	ldr	r2, [r7, #4]
 8007044:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8007046:	e030      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800704e:	e02c      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8007056:	e028      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800705e:	e024      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8007066:	e020      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800706e:	e01c      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	687a      	ldr	r2, [r7, #4]
 8007074:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8007076:	e018      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800707e:	e014      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8007086:	e010      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800708e:	e00c      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8007096:	e008      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007098:	2317      	movs	r3, #23
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	2201      	movs	r2, #1
 800709e:	701a      	strb	r2, [r3, #0]
        break;
 80070a0:	e003      	b.n	80070aa <HAL_TIM_RegisterCallback+0x1e6>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80070a2:	2317      	movs	r3, #23
 80070a4:	18fb      	adds	r3, r7, r3
 80070a6:	2201      	movs	r2, #1
 80070a8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80070aa:	2317      	movs	r3, #23
 80070ac:	18fb      	adds	r3, r7, r3
 80070ae:	781b      	ldrb	r3, [r3, #0]
}
 80070b0:	0018      	movs	r0, r3
 80070b2:	46bd      	mov	sp, r7
 80070b4:	b006      	add	sp, #24
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	0800ee10 	.word	0x0800ee10
 80070bc:	0800ee7c 	.word	0x0800ee7c

080070c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	4a34      	ldr	r2, [pc, #208]	; (80071a4 <TIM_Base_SetConfig+0xe4>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d008      	beq.n	80070ea <TIM_Base_SetConfig+0x2a>
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	2380      	movs	r3, #128	; 0x80
 80070dc:	05db      	lsls	r3, r3, #23
 80070de:	429a      	cmp	r2, r3
 80070e0:	d003      	beq.n	80070ea <TIM_Base_SetConfig+0x2a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a30      	ldr	r2, [pc, #192]	; (80071a8 <TIM_Base_SetConfig+0xe8>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d108      	bne.n	80070fc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2270      	movs	r2, #112	; 0x70
 80070ee:	4393      	bics	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a29      	ldr	r2, [pc, #164]	; (80071a4 <TIM_Base_SetConfig+0xe4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d018      	beq.n	8007136 <TIM_Base_SetConfig+0x76>
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	2380      	movs	r3, #128	; 0x80
 8007108:	05db      	lsls	r3, r3, #23
 800710a:	429a      	cmp	r2, r3
 800710c:	d013      	beq.n	8007136 <TIM_Base_SetConfig+0x76>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a25      	ldr	r2, [pc, #148]	; (80071a8 <TIM_Base_SetConfig+0xe8>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d00f      	beq.n	8007136 <TIM_Base_SetConfig+0x76>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a24      	ldr	r2, [pc, #144]	; (80071ac <TIM_Base_SetConfig+0xec>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d00b      	beq.n	8007136 <TIM_Base_SetConfig+0x76>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a23      	ldr	r2, [pc, #140]	; (80071b0 <TIM_Base_SetConfig+0xf0>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d007      	beq.n	8007136 <TIM_Base_SetConfig+0x76>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a22      	ldr	r2, [pc, #136]	; (80071b4 <TIM_Base_SetConfig+0xf4>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d003      	beq.n	8007136 <TIM_Base_SetConfig+0x76>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a21      	ldr	r2, [pc, #132]	; (80071b8 <TIM_Base_SetConfig+0xf8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d108      	bne.n	8007148 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4a20      	ldr	r2, [pc, #128]	; (80071bc <TIM_Base_SetConfig+0xfc>)
 800713a:	4013      	ands	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	68db      	ldr	r3, [r3, #12]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	4313      	orrs	r3, r2
 8007146:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	2280      	movs	r2, #128	; 0x80
 800714c:	4393      	bics	r3, r2
 800714e:	001a      	movs	r2, r3
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68fa      	ldr	r2, [r7, #12]
 800715c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a0c      	ldr	r2, [pc, #48]	; (80071a4 <TIM_Base_SetConfig+0xe4>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d00b      	beq.n	800718e <TIM_Base_SetConfig+0xce>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	4a0d      	ldr	r2, [pc, #52]	; (80071b0 <TIM_Base_SetConfig+0xf0>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d007      	beq.n	800718e <TIM_Base_SetConfig+0xce>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	4a0c      	ldr	r2, [pc, #48]	; (80071b4 <TIM_Base_SetConfig+0xf4>)
 8007182:	4293      	cmp	r3, r2
 8007184:	d003      	beq.n	800718e <TIM_Base_SetConfig+0xce>
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	4a0b      	ldr	r2, [pc, #44]	; (80071b8 <TIM_Base_SetConfig+0xf8>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d103      	bne.n	8007196 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	691a      	ldr	r2, [r3, #16]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2201      	movs	r2, #1
 800719a:	615a      	str	r2, [r3, #20]
}
 800719c:	46c0      	nop			; (mov r8, r8)
 800719e:	46bd      	mov	sp, r7
 80071a0:	b004      	add	sp, #16
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	40012c00 	.word	0x40012c00
 80071a8:	40000400 	.word	0x40000400
 80071ac:	40002000 	.word	0x40002000
 80071b0:	40014000 	.word	0x40014000
 80071b4:	40014400 	.word	0x40014400
 80071b8:	40014800 	.word	0x40014800
 80071bc:	fffffcff 	.word	0xfffffcff

080071c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a1b      	ldr	r3, [r3, #32]
 80071ce:	2201      	movs	r2, #1
 80071d0:	4393      	bics	r3, r2
 80071d2:	001a      	movs	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6a1b      	ldr	r3, [r3, #32]
 80071dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	699b      	ldr	r3, [r3, #24]
 80071e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2270      	movs	r2, #112	; 0x70
 80071ee:	4393      	bics	r3, r2
 80071f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2203      	movs	r2, #3
 80071f6:	4393      	bics	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4313      	orrs	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2202      	movs	r2, #2
 8007208:	4393      	bics	r3, r2
 800720a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4313      	orrs	r3, r2
 8007214:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a27      	ldr	r2, [pc, #156]	; (80072b8 <TIM_OC1_SetConfig+0xf8>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00b      	beq.n	8007236 <TIM_OC1_SetConfig+0x76>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a26      	ldr	r2, [pc, #152]	; (80072bc <TIM_OC1_SetConfig+0xfc>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d007      	beq.n	8007236 <TIM_OC1_SetConfig+0x76>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a25      	ldr	r2, [pc, #148]	; (80072c0 <TIM_OC1_SetConfig+0x100>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d003      	beq.n	8007236 <TIM_OC1_SetConfig+0x76>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4a24      	ldr	r2, [pc, #144]	; (80072c4 <TIM_OC1_SetConfig+0x104>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d10c      	bne.n	8007250 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	2208      	movs	r2, #8
 800723a:	4393      	bics	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	2204      	movs	r2, #4
 800724c:	4393      	bics	r3, r2
 800724e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a19      	ldr	r2, [pc, #100]	; (80072b8 <TIM_OC1_SetConfig+0xf8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00b      	beq.n	8007270 <TIM_OC1_SetConfig+0xb0>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a18      	ldr	r2, [pc, #96]	; (80072bc <TIM_OC1_SetConfig+0xfc>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d007      	beq.n	8007270 <TIM_OC1_SetConfig+0xb0>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a17      	ldr	r2, [pc, #92]	; (80072c0 <TIM_OC1_SetConfig+0x100>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_OC1_SetConfig+0xb0>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a16      	ldr	r2, [pc, #88]	; (80072c4 <TIM_OC1_SetConfig+0x104>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d111      	bne.n	8007294 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	4a15      	ldr	r2, [pc, #84]	; (80072c8 <TIM_OC1_SetConfig+0x108>)
 8007274:	4013      	ands	r3, r2
 8007276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	4a14      	ldr	r2, [pc, #80]	; (80072cc <TIM_OC1_SetConfig+0x10c>)
 800727c:	4013      	ands	r3, r2
 800727e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	4313      	orrs	r3, r2
 8007288:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	699b      	ldr	r3, [r3, #24]
 800728e:	693a      	ldr	r2, [r7, #16]
 8007290:	4313      	orrs	r3, r2
 8007292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68fa      	ldr	r2, [r7, #12]
 800729e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	685a      	ldr	r2, [r3, #4]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	697a      	ldr	r2, [r7, #20]
 80072ac:	621a      	str	r2, [r3, #32]
}
 80072ae:	46c0      	nop			; (mov r8, r8)
 80072b0:	46bd      	mov	sp, r7
 80072b2:	b006      	add	sp, #24
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			; (mov r8, r8)
 80072b8:	40012c00 	.word	0x40012c00
 80072bc:	40014000 	.word	0x40014000
 80072c0:	40014400 	.word	0x40014400
 80072c4:	40014800 	.word	0x40014800
 80072c8:	fffffeff 	.word	0xfffffeff
 80072cc:	fffffdff 	.word	0xfffffdff

080072d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
 80072d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6a1b      	ldr	r3, [r3, #32]
 80072de:	2210      	movs	r2, #16
 80072e0:	4393      	bics	r3, r2
 80072e2:	001a      	movs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6a1b      	ldr	r3, [r3, #32]
 80072ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	699b      	ldr	r3, [r3, #24]
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	4a2e      	ldr	r2, [pc, #184]	; (80073b8 <TIM_OC2_SetConfig+0xe8>)
 80072fe:	4013      	ands	r3, r2
 8007300:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	4a2d      	ldr	r2, [pc, #180]	; (80073bc <TIM_OC2_SetConfig+0xec>)
 8007306:	4013      	ands	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	021b      	lsls	r3, r3, #8
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4313      	orrs	r3, r2
 8007314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2220      	movs	r2, #32
 800731a:	4393      	bics	r3, r2
 800731c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	011b      	lsls	r3, r3, #4
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	4313      	orrs	r3, r2
 8007328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a24      	ldr	r2, [pc, #144]	; (80073c0 <TIM_OC2_SetConfig+0xf0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d10d      	bne.n	800734e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	2280      	movs	r2, #128	; 0x80
 8007336:	4393      	bics	r3, r2
 8007338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	011b      	lsls	r3, r3, #4
 8007340:	697a      	ldr	r2, [r7, #20]
 8007342:	4313      	orrs	r3, r2
 8007344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	2240      	movs	r2, #64	; 0x40
 800734a:	4393      	bics	r3, r2
 800734c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a1b      	ldr	r2, [pc, #108]	; (80073c0 <TIM_OC2_SetConfig+0xf0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d00b      	beq.n	800736e <TIM_OC2_SetConfig+0x9e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a1a      	ldr	r2, [pc, #104]	; (80073c4 <TIM_OC2_SetConfig+0xf4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d007      	beq.n	800736e <TIM_OC2_SetConfig+0x9e>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a19      	ldr	r2, [pc, #100]	; (80073c8 <TIM_OC2_SetConfig+0xf8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d003      	beq.n	800736e <TIM_OC2_SetConfig+0x9e>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a18      	ldr	r2, [pc, #96]	; (80073cc <TIM_OC2_SetConfig+0xfc>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d113      	bne.n	8007396 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	4a17      	ldr	r2, [pc, #92]	; (80073d0 <TIM_OC2_SetConfig+0x100>)
 8007372:	4013      	ands	r3, r2
 8007374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	4a16      	ldr	r2, [pc, #88]	; (80073d4 <TIM_OC2_SetConfig+0x104>)
 800737a:	4013      	ands	r3, r2
 800737c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	695b      	ldr	r3, [r3, #20]
 8007382:	009b      	lsls	r3, r3, #2
 8007384:	693a      	ldr	r2, [r7, #16]
 8007386:	4313      	orrs	r3, r2
 8007388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	699b      	ldr	r3, [r3, #24]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	693a      	ldr	r2, [r7, #16]
 800739a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	68fa      	ldr	r2, [r7, #12]
 80073a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	685a      	ldr	r2, [r3, #4]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	621a      	str	r2, [r3, #32]
}
 80073b0:	46c0      	nop			; (mov r8, r8)
 80073b2:	46bd      	mov	sp, r7
 80073b4:	b006      	add	sp, #24
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	ffff8fff 	.word	0xffff8fff
 80073bc:	fffffcff 	.word	0xfffffcff
 80073c0:	40012c00 	.word	0x40012c00
 80073c4:	40014000 	.word	0x40014000
 80073c8:	40014400 	.word	0x40014400
 80073cc:	40014800 	.word	0x40014800
 80073d0:	fffffbff 	.word	0xfffffbff
 80073d4:	fffff7ff 	.word	0xfffff7ff

080073d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b086      	sub	sp, #24
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
 80073e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6a1b      	ldr	r3, [r3, #32]
 80073e6:	4a35      	ldr	r2, [pc, #212]	; (80074bc <TIM_OC3_SetConfig+0xe4>)
 80073e8:	401a      	ands	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a1b      	ldr	r3, [r3, #32]
 80073f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	685b      	ldr	r3, [r3, #4]
 80073f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2270      	movs	r2, #112	; 0x70
 8007404:	4393      	bics	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2203      	movs	r2, #3
 800740c:	4393      	bics	r3, r2
 800740e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68fa      	ldr	r2, [r7, #12]
 8007416:	4313      	orrs	r3, r2
 8007418:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	4a28      	ldr	r2, [pc, #160]	; (80074c0 <TIM_OC3_SetConfig+0xe8>)
 800741e:	4013      	ands	r3, r2
 8007420:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	021b      	lsls	r3, r3, #8
 8007428:	697a      	ldr	r2, [r7, #20]
 800742a:	4313      	orrs	r3, r2
 800742c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a24      	ldr	r2, [pc, #144]	; (80074c4 <TIM_OC3_SetConfig+0xec>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d10d      	bne.n	8007452 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	4a23      	ldr	r2, [pc, #140]	; (80074c8 <TIM_OC3_SetConfig+0xf0>)
 800743a:	4013      	ands	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	021b      	lsls	r3, r3, #8
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4a1f      	ldr	r2, [pc, #124]	; (80074cc <TIM_OC3_SetConfig+0xf4>)
 800744e:	4013      	ands	r3, r2
 8007450:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a1b      	ldr	r2, [pc, #108]	; (80074c4 <TIM_OC3_SetConfig+0xec>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d00b      	beq.n	8007472 <TIM_OC3_SetConfig+0x9a>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a1c      	ldr	r2, [pc, #112]	; (80074d0 <TIM_OC3_SetConfig+0xf8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d007      	beq.n	8007472 <TIM_OC3_SetConfig+0x9a>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a1b      	ldr	r2, [pc, #108]	; (80074d4 <TIM_OC3_SetConfig+0xfc>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d003      	beq.n	8007472 <TIM_OC3_SetConfig+0x9a>
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	4a1a      	ldr	r2, [pc, #104]	; (80074d8 <TIM_OC3_SetConfig+0x100>)
 800746e:	4293      	cmp	r3, r2
 8007470:	d113      	bne.n	800749a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	4a19      	ldr	r2, [pc, #100]	; (80074dc <TIM_OC3_SetConfig+0x104>)
 8007476:	4013      	ands	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	4a18      	ldr	r2, [pc, #96]	; (80074e0 <TIM_OC3_SetConfig+0x108>)
 800747e:	4013      	ands	r3, r2
 8007480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	011b      	lsls	r3, r3, #4
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	4313      	orrs	r3, r2
 800748c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	699b      	ldr	r3, [r3, #24]
 8007492:	011b      	lsls	r3, r3, #4
 8007494:	693a      	ldr	r2, [r7, #16]
 8007496:	4313      	orrs	r3, r2
 8007498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	693a      	ldr	r2, [r7, #16]
 800749e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685a      	ldr	r2, [r3, #4]
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	621a      	str	r2, [r3, #32]
}
 80074b4:	46c0      	nop			; (mov r8, r8)
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b006      	add	sp, #24
 80074ba:	bd80      	pop	{r7, pc}
 80074bc:	fffffeff 	.word	0xfffffeff
 80074c0:	fffffdff 	.word	0xfffffdff
 80074c4:	40012c00 	.word	0x40012c00
 80074c8:	fffff7ff 	.word	0xfffff7ff
 80074cc:	fffffbff 	.word	0xfffffbff
 80074d0:	40014000 	.word	0x40014000
 80074d4:	40014400 	.word	0x40014400
 80074d8:	40014800 	.word	0x40014800
 80074dc:	ffffefff 	.word	0xffffefff
 80074e0:	ffffdfff 	.word	0xffffdfff

080074e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b086      	sub	sp, #24
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	4a28      	ldr	r2, [pc, #160]	; (8007594 <TIM_OC4_SetConfig+0xb0>)
 80074f4:	401a      	ands	r2, r3
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69db      	ldr	r3, [r3, #28]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	4a22      	ldr	r2, [pc, #136]	; (8007598 <TIM_OC4_SetConfig+0xb4>)
 8007510:	4013      	ands	r3, r2
 8007512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	4a21      	ldr	r2, [pc, #132]	; (800759c <TIM_OC4_SetConfig+0xb8>)
 8007518:	4013      	ands	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	4a1d      	ldr	r2, [pc, #116]	; (80075a0 <TIM_OC4_SetConfig+0xbc>)
 800752c:	4013      	ands	r3, r2
 800752e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	031b      	lsls	r3, r3, #12
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	4a19      	ldr	r2, [pc, #100]	; (80075a4 <TIM_OC4_SetConfig+0xc0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00b      	beq.n	800755c <TIM_OC4_SetConfig+0x78>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	4a18      	ldr	r2, [pc, #96]	; (80075a8 <TIM_OC4_SetConfig+0xc4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d007      	beq.n	800755c <TIM_OC4_SetConfig+0x78>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	4a17      	ldr	r2, [pc, #92]	; (80075ac <TIM_OC4_SetConfig+0xc8>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d003      	beq.n	800755c <TIM_OC4_SetConfig+0x78>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4a16      	ldr	r2, [pc, #88]	; (80075b0 <TIM_OC4_SetConfig+0xcc>)
 8007558:	4293      	cmp	r3, r2
 800755a:	d109      	bne.n	8007570 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	4a15      	ldr	r2, [pc, #84]	; (80075b4 <TIM_OC4_SetConfig+0xd0>)
 8007560:	4013      	ands	r3, r2
 8007562:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	695b      	ldr	r3, [r3, #20]
 8007568:	019b      	lsls	r3, r3, #6
 800756a:	697a      	ldr	r2, [r7, #20]
 800756c:	4313      	orrs	r3, r2
 800756e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	697a      	ldr	r2, [r7, #20]
 8007574:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	68fa      	ldr	r2, [r7, #12]
 800757a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	693a      	ldr	r2, [r7, #16]
 8007588:	621a      	str	r2, [r3, #32]
}
 800758a:	46c0      	nop			; (mov r8, r8)
 800758c:	46bd      	mov	sp, r7
 800758e:	b006      	add	sp, #24
 8007590:	bd80      	pop	{r7, pc}
 8007592:	46c0      	nop			; (mov r8, r8)
 8007594:	ffffefff 	.word	0xffffefff
 8007598:	ffff8fff 	.word	0xffff8fff
 800759c:	fffffcff 	.word	0xfffffcff
 80075a0:	ffffdfff 	.word	0xffffdfff
 80075a4:	40012c00 	.word	0x40012c00
 80075a8:	40014000 	.word	0x40014000
 80075ac:	40014400 	.word	0x40014400
 80075b0:	40014800 	.word	0x40014800
 80075b4:	ffffbfff 	.word	0xffffbfff

080075b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a1b      	ldr	r3, [r3, #32]
 80075ce:	2201      	movs	r2, #1
 80075d0:	4393      	bics	r3, r2
 80075d2:	001a      	movs	r2, r3
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	699b      	ldr	r3, [r3, #24]
 80075dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	22f0      	movs	r2, #240	; 0xf0
 80075e2:	4393      	bics	r3, r2
 80075e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	011b      	lsls	r3, r3, #4
 80075ea:	693a      	ldr	r2, [r7, #16]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	220a      	movs	r2, #10
 80075f4:	4393      	bics	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	697a      	ldr	r2, [r7, #20]
 800760a:	621a      	str	r2, [r3, #32]
}
 800760c:	46c0      	nop			; (mov r8, r8)
 800760e:	46bd      	mov	sp, r7
 8007610:	b006      	add	sp, #24
 8007612:	bd80      	pop	{r7, pc}

08007614 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	2210      	movs	r2, #16
 8007626:	4393      	bics	r3, r2
 8007628:	001a      	movs	r2, r3
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6a1b      	ldr	r3, [r3, #32]
 8007638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4a0d      	ldr	r2, [pc, #52]	; (8007674 <TIM_TI2_ConfigInputStage+0x60>)
 800763e:	4013      	ands	r3, r2
 8007640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	031b      	lsls	r3, r3, #12
 8007646:	697a      	ldr	r2, [r7, #20]
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	22a0      	movs	r2, #160	; 0xa0
 8007650:	4393      	bics	r3, r2
 8007652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	011b      	lsls	r3, r3, #4
 8007658:	693a      	ldr	r2, [r7, #16]
 800765a:	4313      	orrs	r3, r2
 800765c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	621a      	str	r2, [r3, #32]
}
 800766a:	46c0      	nop			; (mov r8, r8)
 800766c:	46bd      	mov	sp, r7
 800766e:	b006      	add	sp, #24
 8007670:	bd80      	pop	{r7, pc}
 8007672:	46c0      	nop			; (mov r8, r8)
 8007674:	ffff0fff 	.word	0xffff0fff

08007678 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
 8007680:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2270      	movs	r2, #112	; 0x70
 800768c:	4393      	bics	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	4313      	orrs	r3, r2
 8007696:	2207      	movs	r2, #7
 8007698:	4313      	orrs	r3, r2
 800769a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	68fa      	ldr	r2, [r7, #12]
 80076a0:	609a      	str	r2, [r3, #8]
}
 80076a2:	46c0      	nop			; (mov r8, r8)
 80076a4:	46bd      	mov	sp, r7
 80076a6:	b004      	add	sp, #16
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
 80076b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	4a09      	ldr	r2, [pc, #36]	; (80076e8 <TIM_ETR_SetConfig+0x3c>)
 80076c4:	4013      	ands	r3, r2
 80076c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	021a      	lsls	r2, r3, #8
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	431a      	orrs	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	4313      	orrs	r3, r2
 80076d4:	697a      	ldr	r2, [r7, #20]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	609a      	str	r2, [r3, #8]
}
 80076e0:	46c0      	nop			; (mov r8, r8)
 80076e2:	46bd      	mov	sp, r7
 80076e4:	b006      	add	sp, #24
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	ffff00ff 	.word	0xffff00ff

080076ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	221f      	movs	r2, #31
 80076fc:	4013      	ands	r3, r2
 80076fe:	2201      	movs	r2, #1
 8007700:	409a      	lsls	r2, r3
 8007702:	0013      	movs	r3, r2
 8007704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	43d2      	mvns	r2, r2
 800770e:	401a      	ands	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	6a1a      	ldr	r2, [r3, #32]
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	211f      	movs	r1, #31
 800771c:	400b      	ands	r3, r1
 800771e:	6879      	ldr	r1, [r7, #4]
 8007720:	4099      	lsls	r1, r3
 8007722:	000b      	movs	r3, r1
 8007724:	431a      	orrs	r2, r3
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	621a      	str	r2, [r3, #32]
}
 800772a:	46c0      	nop			; (mov r8, r8)
 800772c:	46bd      	mov	sp, r7
 800772e:	b006      	add	sp, #24
 8007730:	bd80      	pop	{r7, pc}
	...

08007734 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2180      	movs	r1, #128	; 0x80
 8007740:	4a1a      	ldr	r2, [pc, #104]	; (80077ac <TIM_ResetCallback+0x78>)
 8007742:	505a      	str	r2, [r3, r1]
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2184      	movs	r1, #132	; 0x84
 8007748:	4a19      	ldr	r2, [pc, #100]	; (80077b0 <TIM_ResetCallback+0x7c>)
 800774a:	505a      	str	r2, [r3, r1]
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2188      	movs	r1, #136	; 0x88
 8007750:	4a18      	ldr	r2, [pc, #96]	; (80077b4 <TIM_ResetCallback+0x80>)
 8007752:	505a      	str	r2, [r3, r1]
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	218c      	movs	r1, #140	; 0x8c
 8007758:	4a17      	ldr	r2, [pc, #92]	; (80077b8 <TIM_ResetCallback+0x84>)
 800775a:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2190      	movs	r1, #144	; 0x90
 8007760:	4a16      	ldr	r2, [pc, #88]	; (80077bc <TIM_ResetCallback+0x88>)
 8007762:	505a      	str	r2, [r3, r1]
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2194      	movs	r1, #148	; 0x94
 8007768:	4a15      	ldr	r2, [pc, #84]	; (80077c0 <TIM_ResetCallback+0x8c>)
 800776a:	505a      	str	r2, [r3, r1]
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2198      	movs	r1, #152	; 0x98
 8007770:	4a14      	ldr	r2, [pc, #80]	; (80077c4 <TIM_ResetCallback+0x90>)
 8007772:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	219c      	movs	r1, #156	; 0x9c
 8007778:	4a13      	ldr	r2, [pc, #76]	; (80077c8 <TIM_ResetCallback+0x94>)
 800777a:	505a      	str	r2, [r3, r1]
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	21a0      	movs	r1, #160	; 0xa0
 8007780:	4a12      	ldr	r2, [pc, #72]	; (80077cc <TIM_ResetCallback+0x98>)
 8007782:	505a      	str	r2, [r3, r1]
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	21a4      	movs	r1, #164	; 0xa4
 8007788:	4a11      	ldr	r2, [pc, #68]	; (80077d0 <TIM_ResetCallback+0x9c>)
 800778a:	505a      	str	r2, [r3, r1]
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	21a8      	movs	r1, #168	; 0xa8
 8007790:	4a10      	ldr	r2, [pc, #64]	; (80077d4 <TIM_ResetCallback+0xa0>)
 8007792:	505a      	str	r2, [r3, r1]
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	21ac      	movs	r1, #172	; 0xac
 8007798:	4a0f      	ldr	r2, [pc, #60]	; (80077d8 <TIM_ResetCallback+0xa4>)
 800779a:	505a      	str	r2, [r3, r1]
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	21b0      	movs	r1, #176	; 0xb0
 80077a0:	4a0e      	ldr	r2, [pc, #56]	; (80077dc <TIM_ResetCallback+0xa8>)
 80077a2:	505a      	str	r2, [r3, r1]
}
 80077a4:	46c0      	nop			; (mov r8, r8)
 80077a6:	46bd      	mov	sp, r7
 80077a8:	b002      	add	sp, #8
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	08006e25 	.word	0x08006e25
 80077b0:	08006e35 	.word	0x08006e35
 80077b4:	08006e95 	.word	0x08006e95
 80077b8:	08006ea5 	.word	0x08006ea5
 80077bc:	08006e55 	.word	0x08006e55
 80077c0:	08006e65 	.word	0x08006e65
 80077c4:	08006e45 	.word	0x08006e45
 80077c8:	08006e75 	.word	0x08006e75
 80077cc:	08006e85 	.word	0x08006e85
 80077d0:	08006eb5 	.word	0x08006eb5
 80077d4:	0800789d 	.word	0x0800789d
 80077d8:	080078ad 	.word	0x080078ad
 80077dc:	080078bd 	.word	0x080078bd

080077e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	223c      	movs	r2, #60	; 0x3c
 80077ee:	5c9b      	ldrb	r3, [r3, r2]
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e047      	b.n	8007888 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	223c      	movs	r2, #60	; 0x3c
 80077fc:	2101      	movs	r1, #1
 80077fe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	223d      	movs	r2, #61	; 0x3d
 8007804:	2102      	movs	r1, #2
 8007806:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2270      	movs	r2, #112	; 0x70
 800781c:	4393      	bics	r3, r2
 800781e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	4313      	orrs	r3, r2
 8007828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	68fa      	ldr	r2, [r7, #12]
 8007830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a16      	ldr	r2, [pc, #88]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d00f      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681a      	ldr	r2, [r3, #0]
 8007840:	2380      	movs	r3, #128	; 0x80
 8007842:	05db      	lsls	r3, r3, #23
 8007844:	429a      	cmp	r2, r3
 8007846:	d009      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a11      	ldr	r2, [pc, #68]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d004      	beq.n	800785c <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a10      	ldr	r2, [pc, #64]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d10c      	bne.n	8007876 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2280      	movs	r2, #128	; 0x80
 8007860:	4393      	bics	r3, r2
 8007862:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	68ba      	ldr	r2, [r7, #8]
 800786a:	4313      	orrs	r3, r2
 800786c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	223d      	movs	r2, #61	; 0x3d
 800787a:	2101      	movs	r1, #1
 800787c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	223c      	movs	r2, #60	; 0x3c
 8007882:	2100      	movs	r1, #0
 8007884:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	0018      	movs	r0, r3
 800788a:	46bd      	mov	sp, r7
 800788c:	b004      	add	sp, #16
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40012c00 	.word	0x40012c00
 8007894:	40000400 	.word	0x40000400
 8007898:	40014000 	.word	0x40014000

0800789c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078a4:	46c0      	nop			; (mov r8, r8)
 80078a6:	46bd      	mov	sp, r7
 80078a8:	b002      	add	sp, #8
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b082      	sub	sp, #8
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80078b4:	46c0      	nop			; (mov r8, r8)
 80078b6:	46bd      	mov	sp, r7
 80078b8:	b002      	add	sp, #8
 80078ba:	bd80      	pop	{r7, pc}

080078bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b082      	sub	sp, #8
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078c4:	46c0      	nop			; (mov r8, r8)
 80078c6:	46bd      	mov	sp, r7
 80078c8:	b002      	add	sp, #8
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d101      	bne.n	80078de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078da:	2301      	movs	r3, #1
 80078dc:	e044      	b.n	8007968 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d107      	bne.n	80078f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2278      	movs	r2, #120	; 0x78
 80078ea:	2100      	movs	r1, #0
 80078ec:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	0018      	movs	r0, r3
 80078f2:	f7fa f86f 	bl	80019d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2224      	movs	r2, #36	; 0x24
 80078fa:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2101      	movs	r1, #1
 8007908:	438a      	bics	r2, r1
 800790a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	0018      	movs	r0, r3
 8007910:	f000 f830 	bl	8007974 <UART_SetConfig>
 8007914:	0003      	movs	r3, r0
 8007916:	2b01      	cmp	r3, #1
 8007918:	d101      	bne.n	800791e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800791a:	2301      	movs	r3, #1
 800791c:	e024      	b.n	8007968 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	0018      	movs	r0, r3
 800792a:	f000 f9ab 	bl	8007c84 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	490d      	ldr	r1, [pc, #52]	; (8007970 <HAL_UART_Init+0xa4>)
 800793a:	400a      	ands	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689a      	ldr	r2, [r3, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	212a      	movs	r1, #42	; 0x2a
 800794a:	438a      	bics	r2, r1
 800794c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	2101      	movs	r1, #1
 800795a:	430a      	orrs	r2, r1
 800795c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	0018      	movs	r0, r3
 8007962:	f000 fa43 	bl	8007dec <UART_CheckIdleState>
 8007966:	0003      	movs	r3, r0
}
 8007968:	0018      	movs	r0, r3
 800796a:	46bd      	mov	sp, r7
 800796c:	b002      	add	sp, #8
 800796e:	bd80      	pop	{r7, pc}
 8007970:	ffffb7ff 	.word	0xffffb7ff

08007974 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800797c:	231e      	movs	r3, #30
 800797e:	18fb      	adds	r3, r7, r3
 8007980:	2200      	movs	r2, #0
 8007982:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	689a      	ldr	r2, [r3, #8]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	691b      	ldr	r3, [r3, #16]
 800798c:	431a      	orrs	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	431a      	orrs	r2, r3
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	69db      	ldr	r3, [r3, #28]
 8007998:	4313      	orrs	r3, r2
 800799a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4aaf      	ldr	r2, [pc, #700]	; (8007c60 <UART_SetConfig+0x2ec>)
 80079a4:	4013      	ands	r3, r2
 80079a6:	0019      	movs	r1, r3
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	430a      	orrs	r2, r1
 80079b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	4aaa      	ldr	r2, [pc, #680]	; (8007c64 <UART_SetConfig+0x2f0>)
 80079ba:	4013      	ands	r3, r2
 80079bc:	0019      	movs	r1, r3
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	4aa1      	ldr	r2, [pc, #644]	; (8007c68 <UART_SetConfig+0x2f4>)
 80079e2:	4013      	ands	r3, r2
 80079e4:	0019      	movs	r1, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	697a      	ldr	r2, [r7, #20]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a9d      	ldr	r2, [pc, #628]	; (8007c6c <UART_SetConfig+0x2f8>)
 80079f6:	4293      	cmp	r3, r2
 80079f8:	d127      	bne.n	8007a4a <UART_SetConfig+0xd6>
 80079fa:	4b9d      	ldr	r3, [pc, #628]	; (8007c70 <UART_SetConfig+0x2fc>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	2203      	movs	r2, #3
 8007a00:	4013      	ands	r3, r2
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d00d      	beq.n	8007a22 <UART_SetConfig+0xae>
 8007a06:	d81b      	bhi.n	8007a40 <UART_SetConfig+0xcc>
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d014      	beq.n	8007a36 <UART_SetConfig+0xc2>
 8007a0c:	d818      	bhi.n	8007a40 <UART_SetConfig+0xcc>
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d002      	beq.n	8007a18 <UART_SetConfig+0xa4>
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d00a      	beq.n	8007a2c <UART_SetConfig+0xb8>
 8007a16:	e013      	b.n	8007a40 <UART_SetConfig+0xcc>
 8007a18:	231f      	movs	r3, #31
 8007a1a:	18fb      	adds	r3, r7, r3
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	701a      	strb	r2, [r3, #0]
 8007a20:	e065      	b.n	8007aee <UART_SetConfig+0x17a>
 8007a22:	231f      	movs	r3, #31
 8007a24:	18fb      	adds	r3, r7, r3
 8007a26:	2202      	movs	r2, #2
 8007a28:	701a      	strb	r2, [r3, #0]
 8007a2a:	e060      	b.n	8007aee <UART_SetConfig+0x17a>
 8007a2c:	231f      	movs	r3, #31
 8007a2e:	18fb      	adds	r3, r7, r3
 8007a30:	2204      	movs	r2, #4
 8007a32:	701a      	strb	r2, [r3, #0]
 8007a34:	e05b      	b.n	8007aee <UART_SetConfig+0x17a>
 8007a36:	231f      	movs	r3, #31
 8007a38:	18fb      	adds	r3, r7, r3
 8007a3a:	2208      	movs	r2, #8
 8007a3c:	701a      	strb	r2, [r3, #0]
 8007a3e:	e056      	b.n	8007aee <UART_SetConfig+0x17a>
 8007a40:	231f      	movs	r3, #31
 8007a42:	18fb      	adds	r3, r7, r3
 8007a44:	2210      	movs	r2, #16
 8007a46:	701a      	strb	r2, [r3, #0]
 8007a48:	e051      	b.n	8007aee <UART_SetConfig+0x17a>
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a89      	ldr	r2, [pc, #548]	; (8007c74 <UART_SetConfig+0x300>)
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d134      	bne.n	8007abe <UART_SetConfig+0x14a>
 8007a54:	4b86      	ldr	r3, [pc, #536]	; (8007c70 <UART_SetConfig+0x2fc>)
 8007a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a58:	23c0      	movs	r3, #192	; 0xc0
 8007a5a:	029b      	lsls	r3, r3, #10
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	22c0      	movs	r2, #192	; 0xc0
 8007a60:	0292      	lsls	r2, r2, #10
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d017      	beq.n	8007a96 <UART_SetConfig+0x122>
 8007a66:	22c0      	movs	r2, #192	; 0xc0
 8007a68:	0292      	lsls	r2, r2, #10
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d822      	bhi.n	8007ab4 <UART_SetConfig+0x140>
 8007a6e:	2280      	movs	r2, #128	; 0x80
 8007a70:	0292      	lsls	r2, r2, #10
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d019      	beq.n	8007aaa <UART_SetConfig+0x136>
 8007a76:	2280      	movs	r2, #128	; 0x80
 8007a78:	0292      	lsls	r2, r2, #10
 8007a7a:	4293      	cmp	r3, r2
 8007a7c:	d81a      	bhi.n	8007ab4 <UART_SetConfig+0x140>
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d004      	beq.n	8007a8c <UART_SetConfig+0x118>
 8007a82:	2280      	movs	r2, #128	; 0x80
 8007a84:	0252      	lsls	r2, r2, #9
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d00a      	beq.n	8007aa0 <UART_SetConfig+0x12c>
 8007a8a:	e013      	b.n	8007ab4 <UART_SetConfig+0x140>
 8007a8c:	231f      	movs	r3, #31
 8007a8e:	18fb      	adds	r3, r7, r3
 8007a90:	2200      	movs	r2, #0
 8007a92:	701a      	strb	r2, [r3, #0]
 8007a94:	e02b      	b.n	8007aee <UART_SetConfig+0x17a>
 8007a96:	231f      	movs	r3, #31
 8007a98:	18fb      	adds	r3, r7, r3
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	701a      	strb	r2, [r3, #0]
 8007a9e:	e026      	b.n	8007aee <UART_SetConfig+0x17a>
 8007aa0:	231f      	movs	r3, #31
 8007aa2:	18fb      	adds	r3, r7, r3
 8007aa4:	2204      	movs	r2, #4
 8007aa6:	701a      	strb	r2, [r3, #0]
 8007aa8:	e021      	b.n	8007aee <UART_SetConfig+0x17a>
 8007aaa:	231f      	movs	r3, #31
 8007aac:	18fb      	adds	r3, r7, r3
 8007aae:	2208      	movs	r2, #8
 8007ab0:	701a      	strb	r2, [r3, #0]
 8007ab2:	e01c      	b.n	8007aee <UART_SetConfig+0x17a>
 8007ab4:	231f      	movs	r3, #31
 8007ab6:	18fb      	adds	r3, r7, r3
 8007ab8:	2210      	movs	r2, #16
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	e017      	b.n	8007aee <UART_SetConfig+0x17a>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a6d      	ldr	r2, [pc, #436]	; (8007c78 <UART_SetConfig+0x304>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d104      	bne.n	8007ad2 <UART_SetConfig+0x15e>
 8007ac8:	231f      	movs	r3, #31
 8007aca:	18fb      	adds	r3, r7, r3
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
 8007ad0:	e00d      	b.n	8007aee <UART_SetConfig+0x17a>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a69      	ldr	r2, [pc, #420]	; (8007c7c <UART_SetConfig+0x308>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d104      	bne.n	8007ae6 <UART_SetConfig+0x172>
 8007adc:	231f      	movs	r3, #31
 8007ade:	18fb      	adds	r3, r7, r3
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	701a      	strb	r2, [r3, #0]
 8007ae4:	e003      	b.n	8007aee <UART_SetConfig+0x17a>
 8007ae6:	231f      	movs	r3, #31
 8007ae8:	18fb      	adds	r3, r7, r3
 8007aea:	2210      	movs	r2, #16
 8007aec:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	69da      	ldr	r2, [r3, #28]
 8007af2:	2380      	movs	r3, #128	; 0x80
 8007af4:	021b      	lsls	r3, r3, #8
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d15c      	bne.n	8007bb4 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8007afa:	231f      	movs	r3, #31
 8007afc:	18fb      	adds	r3, r7, r3
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b08      	cmp	r3, #8
 8007b02:	d015      	beq.n	8007b30 <UART_SetConfig+0x1bc>
 8007b04:	dc18      	bgt.n	8007b38 <UART_SetConfig+0x1c4>
 8007b06:	2b04      	cmp	r3, #4
 8007b08:	d00d      	beq.n	8007b26 <UART_SetConfig+0x1b2>
 8007b0a:	dc15      	bgt.n	8007b38 <UART_SetConfig+0x1c4>
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d002      	beq.n	8007b16 <UART_SetConfig+0x1a2>
 8007b10:	2b02      	cmp	r3, #2
 8007b12:	d005      	beq.n	8007b20 <UART_SetConfig+0x1ac>
 8007b14:	e010      	b.n	8007b38 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b16:	f7fd fc4f 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8007b1a:	0003      	movs	r3, r0
 8007b1c:	61bb      	str	r3, [r7, #24]
        break;
 8007b1e:	e012      	b.n	8007b46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b20:	4b57      	ldr	r3, [pc, #348]	; (8007c80 <UART_SetConfig+0x30c>)
 8007b22:	61bb      	str	r3, [r7, #24]
        break;
 8007b24:	e00f      	b.n	8007b46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b26:	f7fd fbcb 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8007b2a:	0003      	movs	r3, r0
 8007b2c:	61bb      	str	r3, [r7, #24]
        break;
 8007b2e:	e00a      	b.n	8007b46 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b30:	2380      	movs	r3, #128	; 0x80
 8007b32:	021b      	lsls	r3, r3, #8
 8007b34:	61bb      	str	r3, [r7, #24]
        break;
 8007b36:	e006      	b.n	8007b46 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b3c:	231e      	movs	r3, #30
 8007b3e:	18fb      	adds	r3, r7, r3
 8007b40:	2201      	movs	r2, #1
 8007b42:	701a      	strb	r2, [r3, #0]
        break;
 8007b44:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007b46:	69bb      	ldr	r3, [r7, #24]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d100      	bne.n	8007b4e <UART_SetConfig+0x1da>
 8007b4c:	e07a      	b.n	8007c44 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	005a      	lsls	r2, r3, #1
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	085b      	lsrs	r3, r3, #1
 8007b58:	18d2      	adds	r2, r2, r3
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	0019      	movs	r1, r3
 8007b60:	0010      	movs	r0, r2
 8007b62:	f7f8 faed 	bl	8000140 <__udivsi3>
 8007b66:	0003      	movs	r3, r0
 8007b68:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	2b0f      	cmp	r3, #15
 8007b6e:	d91c      	bls.n	8007baa <UART_SetConfig+0x236>
 8007b70:	693a      	ldr	r2, [r7, #16]
 8007b72:	2380      	movs	r3, #128	; 0x80
 8007b74:	025b      	lsls	r3, r3, #9
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d217      	bcs.n	8007baa <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	b29a      	uxth	r2, r3
 8007b7e:	200e      	movs	r0, #14
 8007b80:	183b      	adds	r3, r7, r0
 8007b82:	210f      	movs	r1, #15
 8007b84:	438a      	bics	r2, r1
 8007b86:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	085b      	lsrs	r3, r3, #1
 8007b8c:	b29b      	uxth	r3, r3
 8007b8e:	2207      	movs	r2, #7
 8007b90:	4013      	ands	r3, r2
 8007b92:	b299      	uxth	r1, r3
 8007b94:	183b      	adds	r3, r7, r0
 8007b96:	183a      	adds	r2, r7, r0
 8007b98:	8812      	ldrh	r2, [r2, #0]
 8007b9a:	430a      	orrs	r2, r1
 8007b9c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	183a      	adds	r2, r7, r0
 8007ba4:	8812      	ldrh	r2, [r2, #0]
 8007ba6:	60da      	str	r2, [r3, #12]
 8007ba8:	e04c      	b.n	8007c44 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007baa:	231e      	movs	r3, #30
 8007bac:	18fb      	adds	r3, r7, r3
 8007bae:	2201      	movs	r2, #1
 8007bb0:	701a      	strb	r2, [r3, #0]
 8007bb2:	e047      	b.n	8007c44 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007bb4:	231f      	movs	r3, #31
 8007bb6:	18fb      	adds	r3, r7, r3
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	2b08      	cmp	r3, #8
 8007bbc:	d015      	beq.n	8007bea <UART_SetConfig+0x276>
 8007bbe:	dc18      	bgt.n	8007bf2 <UART_SetConfig+0x27e>
 8007bc0:	2b04      	cmp	r3, #4
 8007bc2:	d00d      	beq.n	8007be0 <UART_SetConfig+0x26c>
 8007bc4:	dc15      	bgt.n	8007bf2 <UART_SetConfig+0x27e>
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d002      	beq.n	8007bd0 <UART_SetConfig+0x25c>
 8007bca:	2b02      	cmp	r3, #2
 8007bcc:	d005      	beq.n	8007bda <UART_SetConfig+0x266>
 8007bce:	e010      	b.n	8007bf2 <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007bd0:	f7fd fbf2 	bl	80053b8 <HAL_RCC_GetPCLK1Freq>
 8007bd4:	0003      	movs	r3, r0
 8007bd6:	61bb      	str	r3, [r7, #24]
        break;
 8007bd8:	e012      	b.n	8007c00 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007bda:	4b29      	ldr	r3, [pc, #164]	; (8007c80 <UART_SetConfig+0x30c>)
 8007bdc:	61bb      	str	r3, [r7, #24]
        break;
 8007bde:	e00f      	b.n	8007c00 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007be0:	f7fd fb6e 	bl	80052c0 <HAL_RCC_GetSysClockFreq>
 8007be4:	0003      	movs	r3, r0
 8007be6:	61bb      	str	r3, [r7, #24]
        break;
 8007be8:	e00a      	b.n	8007c00 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007bea:	2380      	movs	r3, #128	; 0x80
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	61bb      	str	r3, [r7, #24]
        break;
 8007bf0:	e006      	b.n	8007c00 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007bf6:	231e      	movs	r3, #30
 8007bf8:	18fb      	adds	r3, r7, r3
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	701a      	strb	r2, [r3, #0]
        break;
 8007bfe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d01e      	beq.n	8007c44 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	085a      	lsrs	r2, r3, #1
 8007c0c:	69bb      	ldr	r3, [r7, #24]
 8007c0e:	18d2      	adds	r2, r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	685b      	ldr	r3, [r3, #4]
 8007c14:	0019      	movs	r1, r3
 8007c16:	0010      	movs	r0, r2
 8007c18:	f7f8 fa92 	bl	8000140 <__udivsi3>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	2b0f      	cmp	r3, #15
 8007c24:	d90a      	bls.n	8007c3c <UART_SetConfig+0x2c8>
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	2380      	movs	r3, #128	; 0x80
 8007c2a:	025b      	lsls	r3, r3, #9
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d205      	bcs.n	8007c3c <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	b29a      	uxth	r2, r3
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	e003      	b.n	8007c44 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8007c3c:	231e      	movs	r3, #30
 8007c3e:	18fb      	adds	r3, r7, r3
 8007c40:	2201      	movs	r2, #1
 8007c42:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007c50:	231e      	movs	r3, #30
 8007c52:	18fb      	adds	r3, r7, r3
 8007c54:	781b      	ldrb	r3, [r3, #0]
}
 8007c56:	0018      	movs	r0, r3
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	b008      	add	sp, #32
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	46c0      	nop			; (mov r8, r8)
 8007c60:	efff69f3 	.word	0xefff69f3
 8007c64:	ffffcfff 	.word	0xffffcfff
 8007c68:	fffff4ff 	.word	0xfffff4ff
 8007c6c:	40013800 	.word	0x40013800
 8007c70:	40021000 	.word	0x40021000
 8007c74:	40004400 	.word	0x40004400
 8007c78:	40004800 	.word	0x40004800
 8007c7c:	40004c00 	.word	0x40004c00
 8007c80:	007a1200 	.word	0x007a1200

08007c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	2201      	movs	r2, #1
 8007c92:	4013      	ands	r3, r2
 8007c94:	d00b      	beq.n	8007cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	685b      	ldr	r3, [r3, #4]
 8007c9c:	4a4a      	ldr	r2, [pc, #296]	; (8007dc8 <UART_AdvFeatureConfig+0x144>)
 8007c9e:	4013      	ands	r3, r2
 8007ca0:	0019      	movs	r1, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb2:	2202      	movs	r2, #2
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	d00b      	beq.n	8007cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	4a43      	ldr	r2, [pc, #268]	; (8007dcc <UART_AdvFeatureConfig+0x148>)
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	0019      	movs	r1, r3
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	430a      	orrs	r2, r1
 8007cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd4:	2204      	movs	r2, #4
 8007cd6:	4013      	ands	r3, r2
 8007cd8:	d00b      	beq.n	8007cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	4a3b      	ldr	r2, [pc, #236]	; (8007dd0 <UART_AdvFeatureConfig+0x14c>)
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	0019      	movs	r1, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	2208      	movs	r2, #8
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	4a34      	ldr	r2, [pc, #208]	; (8007dd4 <UART_AdvFeatureConfig+0x150>)
 8007d04:	4013      	ands	r3, r2
 8007d06:	0019      	movs	r1, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	430a      	orrs	r2, r1
 8007d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	2210      	movs	r2, #16
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	d00b      	beq.n	8007d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689b      	ldr	r3, [r3, #8]
 8007d24:	4a2c      	ldr	r2, [pc, #176]	; (8007dd8 <UART_AdvFeatureConfig+0x154>)
 8007d26:	4013      	ands	r3, r2
 8007d28:	0019      	movs	r1, r3
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	430a      	orrs	r2, r1
 8007d34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	d00b      	beq.n	8007d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	689b      	ldr	r3, [r3, #8]
 8007d46:	4a25      	ldr	r2, [pc, #148]	; (8007ddc <UART_AdvFeatureConfig+0x158>)
 8007d48:	4013      	ands	r3, r2
 8007d4a:	0019      	movs	r1, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	430a      	orrs	r2, r1
 8007d56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5c:	2240      	movs	r2, #64	; 0x40
 8007d5e:	4013      	ands	r3, r2
 8007d60:	d01d      	beq.n	8007d9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	4a1d      	ldr	r2, [pc, #116]	; (8007de0 <UART_AdvFeatureConfig+0x15c>)
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	0019      	movs	r1, r3
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d7e:	2380      	movs	r3, #128	; 0x80
 8007d80:	035b      	lsls	r3, r3, #13
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d10b      	bne.n	8007d9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	4a15      	ldr	r2, [pc, #84]	; (8007de4 <UART_AdvFeatureConfig+0x160>)
 8007d8e:	4013      	ands	r3, r2
 8007d90:	0019      	movs	r1, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	430a      	orrs	r2, r1
 8007d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007da2:	2280      	movs	r2, #128	; 0x80
 8007da4:	4013      	ands	r3, r2
 8007da6:	d00b      	beq.n	8007dc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	4a0e      	ldr	r2, [pc, #56]	; (8007de8 <UART_AdvFeatureConfig+0x164>)
 8007db0:	4013      	ands	r3, r2
 8007db2:	0019      	movs	r1, r3
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	430a      	orrs	r2, r1
 8007dbe:	605a      	str	r2, [r3, #4]
  }
}
 8007dc0:	46c0      	nop			; (mov r8, r8)
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	b002      	add	sp, #8
 8007dc6:	bd80      	pop	{r7, pc}
 8007dc8:	fffdffff 	.word	0xfffdffff
 8007dcc:	fffeffff 	.word	0xfffeffff
 8007dd0:	fffbffff 	.word	0xfffbffff
 8007dd4:	ffff7fff 	.word	0xffff7fff
 8007dd8:	ffffefff 	.word	0xffffefff
 8007ddc:	ffffdfff 	.word	0xffffdfff
 8007de0:	ffefffff 	.word	0xffefffff
 8007de4:	ff9fffff 	.word	0xff9fffff
 8007de8:	fff7ffff 	.word	0xfff7ffff

08007dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b092      	sub	sp, #72	; 0x48
 8007df0:	af02      	add	r7, sp, #8
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2284      	movs	r2, #132	; 0x84
 8007df8:	2100      	movs	r1, #0
 8007dfa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007dfc:	f7fa fc78 	bl	80026f0 <HAL_GetTick>
 8007e00:	0003      	movs	r3, r0
 8007e02:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2208      	movs	r2, #8
 8007e0c:	4013      	ands	r3, r2
 8007e0e:	2b08      	cmp	r3, #8
 8007e10:	d12c      	bne.n	8007e6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	0391      	lsls	r1, r2, #14
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4a46      	ldr	r2, [pc, #280]	; (8007f34 <UART_CheckIdleState+0x148>)
 8007e1c:	9200      	str	r2, [sp, #0]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f000 f88c 	bl	8007f3c <UART_WaitOnFlagUntilTimeout>
 8007e24:	1e03      	subs	r3, r0, #0
 8007e26:	d021      	beq.n	8007e6c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e28:	f3ef 8310 	mrs	r3, PRIMASK
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007e30:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e32:	2301      	movs	r3, #1
 8007e34:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e38:	f383 8810 	msr	PRIMASK, r3
}
 8007e3c:	46c0      	nop			; (mov r8, r8)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	2180      	movs	r1, #128	; 0x80
 8007e4a:	438a      	bics	r2, r1
 8007e4c:	601a      	str	r2, [r3, #0]
 8007e4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e54:	f383 8810 	msr	PRIMASK, r3
}
 8007e58:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2278      	movs	r2, #120	; 0x78
 8007e64:	2100      	movs	r1, #0
 8007e66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e05f      	b.n	8007f2c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2204      	movs	r2, #4
 8007e74:	4013      	ands	r3, r2
 8007e76:	2b04      	cmp	r3, #4
 8007e78:	d146      	bne.n	8007f08 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7c:	2280      	movs	r2, #128	; 0x80
 8007e7e:	03d1      	lsls	r1, r2, #15
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4a2c      	ldr	r2, [pc, #176]	; (8007f34 <UART_CheckIdleState+0x148>)
 8007e84:	9200      	str	r2, [sp, #0]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f000 f858 	bl	8007f3c <UART_WaitOnFlagUntilTimeout>
 8007e8c:	1e03      	subs	r3, r0, #0
 8007e8e:	d03b      	beq.n	8007f08 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e90:	f3ef 8310 	mrs	r3, PRIMASK
 8007e94:	60fb      	str	r3, [r7, #12]
  return(result);
 8007e96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e98:	637b      	str	r3, [r7, #52]	; 0x34
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f383 8810 	msr	PRIMASK, r3
}
 8007ea4:	46c0      	nop			; (mov r8, r8)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	681a      	ldr	r2, [r3, #0]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4921      	ldr	r1, [pc, #132]	; (8007f38 <UART_CheckIdleState+0x14c>)
 8007eb2:	400a      	ands	r2, r1
 8007eb4:	601a      	str	r2, [r3, #0]
 8007eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f383 8810 	msr	PRIMASK, r3
}
 8007ec0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec6:	61bb      	str	r3, [r7, #24]
  return(result);
 8007ec8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eca:	633b      	str	r3, [r7, #48]	; 0x30
 8007ecc:	2301      	movs	r3, #1
 8007ece:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f383 8810 	msr	PRIMASK, r3
}
 8007ed6:	46c0      	nop			; (mov r8, r8)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	438a      	bics	r2, r1
 8007ee6:	609a      	str	r2, [r3, #8]
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eec:	6a3b      	ldr	r3, [r7, #32]
 8007eee:	f383 8810 	msr	PRIMASK, r3
}
 8007ef2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	2120      	movs	r1, #32
 8007efa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2278      	movs	r2, #120	; 0x78
 8007f00:	2100      	movs	r1, #0
 8007f02:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f04:	2303      	movs	r3, #3
 8007f06:	e011      	b.n	8007f2c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2280      	movs	r2, #128	; 0x80
 8007f12:	2120      	movs	r1, #32
 8007f14:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	2200      	movs	r2, #0
 8007f20:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2278      	movs	r2, #120	; 0x78
 8007f26:	2100      	movs	r1, #0
 8007f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	b010      	add	sp, #64	; 0x40
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	01ffffff 	.word	0x01ffffff
 8007f38:	fffffedf 	.word	0xfffffedf

08007f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	60f8      	str	r0, [r7, #12]
 8007f44:	60b9      	str	r1, [r7, #8]
 8007f46:	603b      	str	r3, [r7, #0]
 8007f48:	1dfb      	adds	r3, r7, #7
 8007f4a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f4c:	e04b      	b.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	3301      	adds	r3, #1
 8007f52:	d048      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f54:	f7fa fbcc 	bl	80026f0 <HAL_GetTick>
 8007f58:	0002      	movs	r2, r0
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	1ad3      	subs	r3, r2, r3
 8007f5e:	69ba      	ldr	r2, [r7, #24]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d302      	bcc.n	8007f6a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007f64:	69bb      	ldr	r3, [r7, #24]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d101      	bne.n	8007f6e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e04b      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2204      	movs	r2, #4
 8007f76:	4013      	ands	r3, r2
 8007f78:	d035      	beq.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	2208      	movs	r2, #8
 8007f82:	4013      	ands	r3, r2
 8007f84:	2b08      	cmp	r3, #8
 8007f86:	d111      	bne.n	8007fac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2208      	movs	r2, #8
 8007f8e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	0018      	movs	r0, r3
 8007f94:	f000 f83c 	bl	8008010 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	2284      	movs	r2, #132	; 0x84
 8007f9c:	2108      	movs	r1, #8
 8007f9e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2278      	movs	r2, #120	; 0x78
 8007fa4:	2100      	movs	r1, #0
 8007fa6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e02c      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	69da      	ldr	r2, [r3, #28]
 8007fb2:	2380      	movs	r3, #128	; 0x80
 8007fb4:	011b      	lsls	r3, r3, #4
 8007fb6:	401a      	ands	r2, r3
 8007fb8:	2380      	movs	r3, #128	; 0x80
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	429a      	cmp	r2, r3
 8007fbe:	d112      	bne.n	8007fe6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	2280      	movs	r2, #128	; 0x80
 8007fc6:	0112      	lsls	r2, r2, #4
 8007fc8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f000 f81f 	bl	8008010 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2284      	movs	r2, #132	; 0x84
 8007fd6:	2120      	movs	r1, #32
 8007fd8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2278      	movs	r2, #120	; 0x78
 8007fde:	2100      	movs	r1, #0
 8007fe0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e00f      	b.n	8008006 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69db      	ldr	r3, [r3, #28]
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	4013      	ands	r3, r2
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	1ad3      	subs	r3, r2, r3
 8007ff4:	425a      	negs	r2, r3
 8007ff6:	4153      	adcs	r3, r2
 8007ff8:	b2db      	uxtb	r3, r3
 8007ffa:	001a      	movs	r2, r3
 8007ffc:	1dfb      	adds	r3, r7, #7
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	429a      	cmp	r2, r3
 8008002:	d0a4      	beq.n	8007f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008004:	2300      	movs	r3, #0
}
 8008006:	0018      	movs	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	b004      	add	sp, #16
 800800c:	bd80      	pop	{r7, pc}
	...

08008010 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08e      	sub	sp, #56	; 0x38
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008018:	f3ef 8310 	mrs	r3, PRIMASK
 800801c:	617b      	str	r3, [r7, #20]
  return(result);
 800801e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008020:	637b      	str	r3, [r7, #52]	; 0x34
 8008022:	2301      	movs	r3, #1
 8008024:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	f383 8810 	msr	PRIMASK, r3
}
 800802c:	46c0      	nop			; (mov r8, r8)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	681a      	ldr	r2, [r3, #0]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4926      	ldr	r1, [pc, #152]	; (80080d4 <UART_EndRxTransfer+0xc4>)
 800803a:	400a      	ands	r2, r1
 800803c:	601a      	str	r2, [r3, #0]
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008040:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	f383 8810 	msr	PRIMASK, r3
}
 8008048:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800804a:	f3ef 8310 	mrs	r3, PRIMASK
 800804e:	623b      	str	r3, [r7, #32]
  return(result);
 8008050:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008052:	633b      	str	r3, [r7, #48]	; 0x30
 8008054:	2301      	movs	r3, #1
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	f383 8810 	msr	PRIMASK, r3
}
 800805e:	46c0      	nop			; (mov r8, r8)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	689a      	ldr	r2, [r3, #8]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2101      	movs	r1, #1
 800806c:	438a      	bics	r2, r1
 800806e:	609a      	str	r2, [r3, #8]
 8008070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008072:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008076:	f383 8810 	msr	PRIMASK, r3
}
 800807a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008080:	2b01      	cmp	r3, #1
 8008082:	d118      	bne.n	80080b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008084:	f3ef 8310 	mrs	r3, PRIMASK
 8008088:	60bb      	str	r3, [r7, #8]
  return(result);
 800808a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800808c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800808e:	2301      	movs	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	f383 8810 	msr	PRIMASK, r3
}
 8008098:	46c0      	nop			; (mov r8, r8)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	2110      	movs	r1, #16
 80080a6:	438a      	bics	r2, r1
 80080a8:	601a      	str	r2, [r3, #0]
 80080aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ae:	693b      	ldr	r3, [r7, #16]
 80080b0:	f383 8810 	msr	PRIMASK, r3
}
 80080b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2280      	movs	r2, #128	; 0x80
 80080ba:	2120      	movs	r1, #32
 80080bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2200      	movs	r2, #0
 80080c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80080ca:	46c0      	nop			; (mov r8, r8)
 80080cc:	46bd      	mov	sp, r7
 80080ce:	b00e      	add	sp, #56	; 0x38
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	46c0      	nop			; (mov r8, r8)
 80080d4:	fffffedf 	.word	0xfffffedf

080080d8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2244      	movs	r2, #68	; 0x44
 80080e4:	2100      	movs	r1, #0
 80080e6:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80080e8:	4b05      	ldr	r3, [pc, #20]	; (8008100 <USB_EnableGlobalInt+0x28>)
 80080ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	b299      	uxth	r1, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2240      	movs	r2, #64	; 0x40
 80080f4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	0018      	movs	r0, r3
 80080fa:	46bd      	mov	sp, r7
 80080fc:	b004      	add	sp, #16
 80080fe:	bd80      	pop	{r7, pc}
 8008100:	0000bf80 	.word	0x0000bf80

08008104 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b084      	sub	sp, #16
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800810c:	4b09      	ldr	r3, [pc, #36]	; (8008134 <USB_DisableGlobalInt+0x30>)
 800810e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2240      	movs	r2, #64	; 0x40
 8008114:	5a9b      	ldrh	r3, [r3, r2]
 8008116:	b29b      	uxth	r3, r3
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	b292      	uxth	r2, r2
 800811c:	43d2      	mvns	r2, r2
 800811e:	b292      	uxth	r2, r2
 8008120:	4013      	ands	r3, r2
 8008122:	b299      	uxth	r1, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2240      	movs	r2, #64	; 0x40
 8008128:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800812a:	2300      	movs	r3, #0
}
 800812c:	0018      	movs	r0, r3
 800812e:	46bd      	mov	sp, r7
 8008130:	b004      	add	sp, #16
 8008132:	bd80      	pop	{r7, pc}
 8008134:	0000bf80 	.word	0x0000bf80

08008138 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8008138:	b084      	sub	sp, #16
 800813a:	b590      	push	{r4, r7, lr}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
 8008142:	2004      	movs	r0, #4
 8008144:	2410      	movs	r4, #16
 8008146:	1900      	adds	r0, r0, r4
 8008148:	2408      	movs	r4, #8
 800814a:	46a4      	mov	ip, r4
 800814c:	44bc      	add	ip, r7
 800814e:	4460      	add	r0, ip
 8008150:	6001      	str	r1, [r0, #0]
 8008152:	6042      	str	r2, [r0, #4]
 8008154:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2240      	movs	r2, #64	; 0x40
 800815a:	2101      	movs	r1, #1
 800815c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2240      	movs	r2, #64	; 0x40
 8008162:	2100      	movs	r1, #0
 8008164:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	2244      	movs	r2, #68	; 0x44
 800816a:	2100      	movs	r1, #0
 800816c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2250      	movs	r2, #80	; 0x50
 8008172:	2100      	movs	r1, #0
 8008174:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	0018      	movs	r0, r3
 800817a:	46bd      	mov	sp, r7
 800817c:	b003      	add	sp, #12
 800817e:	bc90      	pop	{r4, r7}
 8008180:	bc08      	pop	{r3}
 8008182:	b004      	add	sp, #16
 8008184:	4718      	bx	r3
	...

08008188 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b09c      	sub	sp, #112	; 0x70
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8008192:	236f      	movs	r3, #111	; 0x6f
 8008194:	18fb      	adds	r3, r7, r3
 8008196:	2200      	movs	r2, #0
 8008198:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800819a:	687a      	ldr	r2, [r7, #4]
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	009b      	lsls	r3, r3, #2
 80081a2:	18d3      	adds	r3, r2, r3
 80081a4:	881b      	ldrh	r3, [r3, #0]
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	236c      	movs	r3, #108	; 0x6c
 80081aa:	18fb      	adds	r3, r7, r3
 80081ac:	49a3      	ldr	r1, [pc, #652]	; (800843c <USB_ActivateEndpoint+0x2b4>)
 80081ae:	400a      	ands	r2, r1
 80081b0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	78db      	ldrb	r3, [r3, #3]
 80081b6:	2b03      	cmp	r3, #3
 80081b8:	d017      	beq.n	80081ea <USB_ActivateEndpoint+0x62>
 80081ba:	dc28      	bgt.n	800820e <USB_ActivateEndpoint+0x86>
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d00e      	beq.n	80081de <USB_ActivateEndpoint+0x56>
 80081c0:	dc25      	bgt.n	800820e <USB_ActivateEndpoint+0x86>
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d002      	beq.n	80081cc <USB_ActivateEndpoint+0x44>
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d018      	beq.n	80081fc <USB_ActivateEndpoint+0x74>
 80081ca:	e020      	b.n	800820e <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80081cc:	226c      	movs	r2, #108	; 0x6c
 80081ce:	18bb      	adds	r3, r7, r2
 80081d0:	18ba      	adds	r2, r7, r2
 80081d2:	8812      	ldrh	r2, [r2, #0]
 80081d4:	2180      	movs	r1, #128	; 0x80
 80081d6:	0089      	lsls	r1, r1, #2
 80081d8:	430a      	orrs	r2, r1
 80081da:	801a      	strh	r2, [r3, #0]
      break;
 80081dc:	e01c      	b.n	8008218 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80081de:	226c      	movs	r2, #108	; 0x6c
 80081e0:	18bb      	adds	r3, r7, r2
 80081e2:	18ba      	adds	r2, r7, r2
 80081e4:	8812      	ldrh	r2, [r2, #0]
 80081e6:	801a      	strh	r2, [r3, #0]
      break;
 80081e8:	e016      	b.n	8008218 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80081ea:	226c      	movs	r2, #108	; 0x6c
 80081ec:	18bb      	adds	r3, r7, r2
 80081ee:	18ba      	adds	r2, r7, r2
 80081f0:	8812      	ldrh	r2, [r2, #0]
 80081f2:	21c0      	movs	r1, #192	; 0xc0
 80081f4:	00c9      	lsls	r1, r1, #3
 80081f6:	430a      	orrs	r2, r1
 80081f8:	801a      	strh	r2, [r3, #0]
      break;
 80081fa:	e00d      	b.n	8008218 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80081fc:	226c      	movs	r2, #108	; 0x6c
 80081fe:	18bb      	adds	r3, r7, r2
 8008200:	18ba      	adds	r2, r7, r2
 8008202:	8812      	ldrh	r2, [r2, #0]
 8008204:	2180      	movs	r1, #128	; 0x80
 8008206:	00c9      	lsls	r1, r1, #3
 8008208:	430a      	orrs	r2, r1
 800820a:	801a      	strh	r2, [r3, #0]
      break;
 800820c:	e004      	b.n	8008218 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800820e:	236f      	movs	r3, #111	; 0x6f
 8008210:	18fb      	adds	r3, r7, r3
 8008212:	2201      	movs	r2, #1
 8008214:	701a      	strb	r2, [r3, #0]
      break;
 8008216:	46c0      	nop			; (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	18d3      	adds	r3, r2, r3
 8008222:	226c      	movs	r2, #108	; 0x6c
 8008224:	18ba      	adds	r2, r7, r2
 8008226:	8812      	ldrh	r2, [r2, #0]
 8008228:	4985      	ldr	r1, [pc, #532]	; (8008440 <USB_ActivateEndpoint+0x2b8>)
 800822a:	430a      	orrs	r2, r1
 800822c:	b292      	uxth	r2, r2
 800822e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008230:	687a      	ldr	r2, [r7, #4]
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	009b      	lsls	r3, r3, #2
 8008238:	18d3      	adds	r3, r2, r3
 800823a:	881b      	ldrh	r3, [r3, #0]
 800823c:	b29b      	uxth	r3, r3
 800823e:	b21b      	sxth	r3, r3
 8008240:	4a80      	ldr	r2, [pc, #512]	; (8008444 <USB_ActivateEndpoint+0x2bc>)
 8008242:	4013      	ands	r3, r2
 8008244:	b21a      	sxth	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	781b      	ldrb	r3, [r3, #0]
 800824a:	b21b      	sxth	r3, r3
 800824c:	4313      	orrs	r3, r2
 800824e:	b21a      	sxth	r2, r3
 8008250:	2166      	movs	r1, #102	; 0x66
 8008252:	187b      	adds	r3, r7, r1
 8008254:	801a      	strh	r2, [r3, #0]
 8008256:	687a      	ldr	r2, [r7, #4]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	781b      	ldrb	r3, [r3, #0]
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	18d3      	adds	r3, r2, r3
 8008260:	187a      	adds	r2, r7, r1
 8008262:	8812      	ldrh	r2, [r2, #0]
 8008264:	4976      	ldr	r1, [pc, #472]	; (8008440 <USB_ActivateEndpoint+0x2b8>)
 8008266:	430a      	orrs	r2, r1
 8008268:	b292      	uxth	r2, r2
 800826a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	7b1b      	ldrb	r3, [r3, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d000      	beq.n	8008276 <USB_ActivateEndpoint+0xee>
 8008274:	e178      	b.n	8008568 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d100      	bne.n	8008280 <USB_ActivateEndpoint+0xf8>
 800827e:	e07a      	b.n	8008376 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	61bb      	str	r3, [r7, #24]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2250      	movs	r2, #80	; 0x50
 8008288:	5a9b      	ldrh	r3, [r3, r2]
 800828a:	b29b      	uxth	r3, r3
 800828c:	001a      	movs	r2, r3
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	189b      	adds	r3, r3, r2
 8008292:	61bb      	str	r3, [r7, #24]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	00da      	lsls	r2, r3, #3
 800829a:	69bb      	ldr	r3, [r7, #24]
 800829c:	18d3      	adds	r3, r2, r3
 800829e:	2280      	movs	r2, #128	; 0x80
 80082a0:	00d2      	lsls	r2, r2, #3
 80082a2:	4694      	mov	ip, r2
 80082a4:	4463      	add	r3, ip
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	88db      	ldrh	r3, [r3, #6]
 80082ac:	085b      	lsrs	r3, r3, #1
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	18db      	adds	r3, r3, r3
 80082b2:	b29a      	uxth	r2, r3
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	18d2      	adds	r2, r2, r3
 80082c2:	2112      	movs	r1, #18
 80082c4:	187b      	adds	r3, r7, r1
 80082c6:	8812      	ldrh	r2, [r2, #0]
 80082c8:	801a      	strh	r2, [r3, #0]
 80082ca:	187b      	adds	r3, r7, r1
 80082cc:	881b      	ldrh	r3, [r3, #0]
 80082ce:	2240      	movs	r2, #64	; 0x40
 80082d0:	4013      	ands	r3, r2
 80082d2:	d016      	beq.n	8008302 <USB_ActivateEndpoint+0x17a>
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	18d3      	adds	r3, r2, r3
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29a      	uxth	r2, r3
 80082e2:	2010      	movs	r0, #16
 80082e4:	183b      	adds	r3, r7, r0
 80082e6:	4957      	ldr	r1, [pc, #348]	; (8008444 <USB_ActivateEndpoint+0x2bc>)
 80082e8:	400a      	ands	r2, r1
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	18d3      	adds	r3, r2, r3
 80082f6:	183a      	adds	r2, r7, r0
 80082f8:	8812      	ldrh	r2, [r2, #0]
 80082fa:	4953      	ldr	r1, [pc, #332]	; (8008448 <USB_ActivateEndpoint+0x2c0>)
 80082fc:	430a      	orrs	r2, r1
 80082fe:	b292      	uxth	r2, r2
 8008300:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	78db      	ldrb	r3, [r3, #3]
 8008306:	2b01      	cmp	r3, #1
 8008308:	d01d      	beq.n	8008346 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800830a:	687a      	ldr	r2, [r7, #4]
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	781b      	ldrb	r3, [r3, #0]
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	18d3      	adds	r3, r2, r3
 8008314:	881b      	ldrh	r3, [r3, #0]
 8008316:	b29a      	uxth	r2, r3
 8008318:	200c      	movs	r0, #12
 800831a:	183b      	adds	r3, r7, r0
 800831c:	494b      	ldr	r1, [pc, #300]	; (800844c <USB_ActivateEndpoint+0x2c4>)
 800831e:	400a      	ands	r2, r1
 8008320:	801a      	strh	r2, [r3, #0]
 8008322:	183b      	adds	r3, r7, r0
 8008324:	183a      	adds	r2, r7, r0
 8008326:	8812      	ldrh	r2, [r2, #0]
 8008328:	2120      	movs	r1, #32
 800832a:	404a      	eors	r2, r1
 800832c:	801a      	strh	r2, [r3, #0]
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	781b      	ldrb	r3, [r3, #0]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	18d3      	adds	r3, r2, r3
 8008338:	183a      	adds	r2, r7, r0
 800833a:	8812      	ldrh	r2, [r2, #0]
 800833c:	4940      	ldr	r1, [pc, #256]	; (8008440 <USB_ActivateEndpoint+0x2b8>)
 800833e:	430a      	orrs	r2, r1
 8008340:	b292      	uxth	r2, r2
 8008342:	801a      	strh	r2, [r3, #0]
 8008344:	e2b4      	b.n	80088b0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	781b      	ldrb	r3, [r3, #0]
 800834c:	009b      	lsls	r3, r3, #2
 800834e:	18d3      	adds	r3, r2, r3
 8008350:	881b      	ldrh	r3, [r3, #0]
 8008352:	b29a      	uxth	r2, r3
 8008354:	200e      	movs	r0, #14
 8008356:	183b      	adds	r3, r7, r0
 8008358:	493c      	ldr	r1, [pc, #240]	; (800844c <USB_ActivateEndpoint+0x2c4>)
 800835a:	400a      	ands	r2, r1
 800835c:	801a      	strh	r2, [r3, #0]
 800835e:	687a      	ldr	r2, [r7, #4]
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	18d3      	adds	r3, r2, r3
 8008368:	183a      	adds	r2, r7, r0
 800836a:	8812      	ldrh	r2, [r2, #0]
 800836c:	4934      	ldr	r1, [pc, #208]	; (8008440 <USB_ActivateEndpoint+0x2b8>)
 800836e:	430a      	orrs	r2, r1
 8008370:	b292      	uxth	r2, r2
 8008372:	801a      	strh	r2, [r3, #0]
 8008374:	e29c      	b.n	80088b0 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	633b      	str	r3, [r7, #48]	; 0x30
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2250      	movs	r2, #80	; 0x50
 800837e:	5a9b      	ldrh	r3, [r3, r2]
 8008380:	b29b      	uxth	r3, r3
 8008382:	001a      	movs	r2, r3
 8008384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008386:	189b      	adds	r3, r3, r2
 8008388:	633b      	str	r3, [r7, #48]	; 0x30
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	00da      	lsls	r2, r3, #3
 8008390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008392:	18d3      	adds	r3, r2, r3
 8008394:	4a2e      	ldr	r2, [pc, #184]	; (8008450 <USB_ActivateEndpoint+0x2c8>)
 8008396:	4694      	mov	ip, r2
 8008398:	4463      	add	r3, ip
 800839a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	88db      	ldrh	r3, [r3, #6]
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	b29b      	uxth	r3, r3
 80083a4:	18db      	adds	r3, r3, r3
 80083a6:	b29a      	uxth	r2, r3
 80083a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083aa:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2250      	movs	r2, #80	; 0x50
 80083b4:	5a9b      	ldrh	r3, [r3, r2]
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	001a      	movs	r2, r3
 80083ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083bc:	189b      	adds	r3, r3, r2
 80083be:	62bb      	str	r3, [r7, #40]	; 0x28
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	00da      	lsls	r2, r3, #3
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	18d3      	adds	r3, r2, r3
 80083ca:	4a22      	ldr	r2, [pc, #136]	; (8008454 <USB_ActivateEndpoint+0x2cc>)
 80083cc:	4694      	mov	ip, r2
 80083ce:	4463      	add	r3, ip
 80083d0:	627b      	str	r3, [r7, #36]	; 0x24
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	059b      	lsls	r3, r3, #22
 80083da:	0d9b      	lsrs	r3, r3, #22
 80083dc:	b29a      	uxth	r2, r3
 80083de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e0:	801a      	strh	r2, [r3, #0]
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	2b3e      	cmp	r3, #62	; 0x3e
 80083e8:	d91a      	bls.n	8008420 <USB_ActivateEndpoint+0x298>
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	095b      	lsrs	r3, r3, #5
 80083f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	691b      	ldr	r3, [r3, #16]
 80083f6:	221f      	movs	r2, #31
 80083f8:	4013      	ands	r3, r2
 80083fa:	d102      	bne.n	8008402 <USB_ActivateEndpoint+0x27a>
 80083fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80083fe:	3b01      	subs	r3, #1
 8008400:	66bb      	str	r3, [r7, #104]	; 0x68
 8008402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008404:	881b      	ldrh	r3, [r3, #0]
 8008406:	b29a      	uxth	r2, r3
 8008408:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800840a:	b29b      	uxth	r3, r3
 800840c:	029b      	lsls	r3, r3, #10
 800840e:	b29b      	uxth	r3, r3
 8008410:	4313      	orrs	r3, r2
 8008412:	b29b      	uxth	r3, r3
 8008414:	4a10      	ldr	r2, [pc, #64]	; (8008458 <USB_ActivateEndpoint+0x2d0>)
 8008416:	4313      	orrs	r3, r2
 8008418:	b29a      	uxth	r2, r3
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	801a      	strh	r2, [r3, #0]
 800841e:	e034      	b.n	800848a <USB_ActivateEndpoint+0x302>
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	691b      	ldr	r3, [r3, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d119      	bne.n	800845c <USB_ActivateEndpoint+0x2d4>
 8008428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800842a:	881b      	ldrh	r3, [r3, #0]
 800842c:	b29b      	uxth	r3, r3
 800842e:	4a0a      	ldr	r2, [pc, #40]	; (8008458 <USB_ActivateEndpoint+0x2d0>)
 8008430:	4313      	orrs	r3, r2
 8008432:	b29a      	uxth	r2, r3
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	801a      	strh	r2, [r3, #0]
 8008438:	e027      	b.n	800848a <USB_ActivateEndpoint+0x302>
 800843a:	46c0      	nop			; (mov r8, r8)
 800843c:	ffff898f 	.word	0xffff898f
 8008440:	ffff8080 	.word	0xffff8080
 8008444:	ffff8f8f 	.word	0xffff8f8f
 8008448:	ffff80c0 	.word	0xffff80c0
 800844c:	ffff8fbf 	.word	0xffff8fbf
 8008450:	00000404 	.word	0x00000404
 8008454:	00000406 	.word	0x00000406
 8008458:	ffff8000 	.word	0xffff8000
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	691b      	ldr	r3, [r3, #16]
 8008460:	085b      	lsrs	r3, r3, #1
 8008462:	66bb      	str	r3, [r7, #104]	; 0x68
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	2201      	movs	r2, #1
 800846a:	4013      	ands	r3, r2
 800846c:	d002      	beq.n	8008474 <USB_ActivateEndpoint+0x2ec>
 800846e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008470:	3301      	adds	r3, #1
 8008472:	66bb      	str	r3, [r7, #104]	; 0x68
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	881b      	ldrh	r3, [r3, #0]
 8008478:	b29a      	uxth	r2, r3
 800847a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800847c:	b29b      	uxth	r3, r3
 800847e:	029b      	lsls	r3, r3, #10
 8008480:	b29b      	uxth	r3, r3
 8008482:	4313      	orrs	r3, r2
 8008484:	b29a      	uxth	r2, r3
 8008486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008488:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800848a:	687a      	ldr	r2, [r7, #4]
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	009b      	lsls	r3, r3, #2
 8008492:	18d2      	adds	r2, r2, r3
 8008494:	2122      	movs	r1, #34	; 0x22
 8008496:	187b      	adds	r3, r7, r1
 8008498:	8812      	ldrh	r2, [r2, #0]
 800849a:	801a      	strh	r2, [r3, #0]
 800849c:	187b      	adds	r3, r7, r1
 800849e:	881a      	ldrh	r2, [r3, #0]
 80084a0:	2380      	movs	r3, #128	; 0x80
 80084a2:	01db      	lsls	r3, r3, #7
 80084a4:	4013      	ands	r3, r2
 80084a6:	d016      	beq.n	80084d6 <USB_ActivateEndpoint+0x34e>
 80084a8:	687a      	ldr	r2, [r7, #4]
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	009b      	lsls	r3, r3, #2
 80084b0:	18d3      	adds	r3, r2, r3
 80084b2:	881b      	ldrh	r3, [r3, #0]
 80084b4:	b29a      	uxth	r2, r3
 80084b6:	2020      	movs	r0, #32
 80084b8:	183b      	adds	r3, r7, r0
 80084ba:	49dd      	ldr	r1, [pc, #884]	; (8008830 <USB_ActivateEndpoint+0x6a8>)
 80084bc:	400a      	ands	r2, r1
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	18d3      	adds	r3, r2, r3
 80084ca:	183a      	adds	r2, r7, r0
 80084cc:	8812      	ldrh	r2, [r2, #0]
 80084ce:	49d9      	ldr	r1, [pc, #868]	; (8008834 <USB_ActivateEndpoint+0x6ac>)
 80084d0:	430a      	orrs	r2, r1
 80084d2:	b292      	uxth	r2, r2
 80084d4:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d125      	bne.n	800852a <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	18d3      	adds	r3, r2, r3
 80084e8:	881b      	ldrh	r3, [r3, #0]
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	201c      	movs	r0, #28
 80084ee:	183b      	adds	r3, r7, r0
 80084f0:	49d1      	ldr	r1, [pc, #836]	; (8008838 <USB_ActivateEndpoint+0x6b0>)
 80084f2:	400a      	ands	r2, r1
 80084f4:	801a      	strh	r2, [r3, #0]
 80084f6:	183b      	adds	r3, r7, r0
 80084f8:	183a      	adds	r2, r7, r0
 80084fa:	8812      	ldrh	r2, [r2, #0]
 80084fc:	2180      	movs	r1, #128	; 0x80
 80084fe:	0149      	lsls	r1, r1, #5
 8008500:	404a      	eors	r2, r1
 8008502:	801a      	strh	r2, [r3, #0]
 8008504:	183b      	adds	r3, r7, r0
 8008506:	183a      	adds	r2, r7, r0
 8008508:	8812      	ldrh	r2, [r2, #0]
 800850a:	2180      	movs	r1, #128	; 0x80
 800850c:	0189      	lsls	r1, r1, #6
 800850e:	404a      	eors	r2, r1
 8008510:	801a      	strh	r2, [r3, #0]
 8008512:	687a      	ldr	r2, [r7, #4]
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	781b      	ldrb	r3, [r3, #0]
 8008518:	009b      	lsls	r3, r3, #2
 800851a:	18d3      	adds	r3, r2, r3
 800851c:	183a      	adds	r2, r7, r0
 800851e:	8812      	ldrh	r2, [r2, #0]
 8008520:	49c6      	ldr	r1, [pc, #792]	; (800883c <USB_ActivateEndpoint+0x6b4>)
 8008522:	430a      	orrs	r2, r1
 8008524:	b292      	uxth	r2, r2
 8008526:	801a      	strh	r2, [r3, #0]
 8008528:	e1c2      	b.n	80088b0 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800852a:	687a      	ldr	r2, [r7, #4]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	009b      	lsls	r3, r3, #2
 8008532:	18d3      	adds	r3, r2, r3
 8008534:	881b      	ldrh	r3, [r3, #0]
 8008536:	b29a      	uxth	r2, r3
 8008538:	201e      	movs	r0, #30
 800853a:	183b      	adds	r3, r7, r0
 800853c:	49be      	ldr	r1, [pc, #760]	; (8008838 <USB_ActivateEndpoint+0x6b0>)
 800853e:	400a      	ands	r2, r1
 8008540:	801a      	strh	r2, [r3, #0]
 8008542:	183b      	adds	r3, r7, r0
 8008544:	183a      	adds	r2, r7, r0
 8008546:	8812      	ldrh	r2, [r2, #0]
 8008548:	2180      	movs	r1, #128	; 0x80
 800854a:	0189      	lsls	r1, r1, #6
 800854c:	404a      	eors	r2, r1
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	18d3      	adds	r3, r2, r3
 800855a:	183a      	adds	r2, r7, r0
 800855c:	8812      	ldrh	r2, [r2, #0]
 800855e:	49b7      	ldr	r1, [pc, #732]	; (800883c <USB_ActivateEndpoint+0x6b4>)
 8008560:	430a      	orrs	r2, r1
 8008562:	b292      	uxth	r2, r2
 8008564:	801a      	strh	r2, [r3, #0]
 8008566:	e1a3      	b.n	80088b0 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	78db      	ldrb	r3, [r3, #3]
 800856c:	2b02      	cmp	r3, #2
 800856e:	d117      	bne.n	80085a0 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	781b      	ldrb	r3, [r3, #0]
 8008576:	009b      	lsls	r3, r3, #2
 8008578:	18d3      	adds	r3, r2, r3
 800857a:	881b      	ldrh	r3, [r3, #0]
 800857c:	b29a      	uxth	r2, r3
 800857e:	2062      	movs	r0, #98	; 0x62
 8008580:	183b      	adds	r3, r7, r0
 8008582:	49ab      	ldr	r1, [pc, #684]	; (8008830 <USB_ActivateEndpoint+0x6a8>)
 8008584:	400a      	ands	r2, r1
 8008586:	801a      	strh	r2, [r3, #0]
 8008588:	687a      	ldr	r2, [r7, #4]
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	781b      	ldrb	r3, [r3, #0]
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	18d3      	adds	r3, r2, r3
 8008592:	183a      	adds	r2, r7, r0
 8008594:	8812      	ldrh	r2, [r2, #0]
 8008596:	49aa      	ldr	r1, [pc, #680]	; (8008840 <USB_ActivateEndpoint+0x6b8>)
 8008598:	430a      	orrs	r2, r1
 800859a:	b292      	uxth	r2, r2
 800859c:	801a      	strh	r2, [r3, #0]
 800859e:	e016      	b.n	80085ce <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	18d3      	adds	r3, r2, r3
 80085aa:	881b      	ldrh	r3, [r3, #0]
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	2064      	movs	r0, #100	; 0x64
 80085b0:	183b      	adds	r3, r7, r0
 80085b2:	49a4      	ldr	r1, [pc, #656]	; (8008844 <USB_ActivateEndpoint+0x6bc>)
 80085b4:	400a      	ands	r2, r1
 80085b6:	801a      	strh	r2, [r3, #0]
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	683b      	ldr	r3, [r7, #0]
 80085bc:	781b      	ldrb	r3, [r3, #0]
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	18d3      	adds	r3, r2, r3
 80085c2:	183a      	adds	r2, r7, r0
 80085c4:	8812      	ldrh	r2, [r2, #0]
 80085c6:	499d      	ldr	r1, [pc, #628]	; (800883c <USB_ActivateEndpoint+0x6b4>)
 80085c8:	430a      	orrs	r2, r1
 80085ca:	b292      	uxth	r2, r2
 80085cc:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2250      	movs	r2, #80	; 0x50
 80085d6:	5a9b      	ldrh	r3, [r3, r2]
 80085d8:	b29b      	uxth	r3, r3
 80085da:	001a      	movs	r2, r3
 80085dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085de:	189b      	adds	r3, r3, r2
 80085e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	00da      	lsls	r2, r3, #3
 80085e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80085ea:	18d3      	adds	r3, r2, r3
 80085ec:	2280      	movs	r2, #128	; 0x80
 80085ee:	00d2      	lsls	r2, r2, #3
 80085f0:	4694      	mov	ip, r2
 80085f2:	4463      	add	r3, ip
 80085f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	891b      	ldrh	r3, [r3, #8]
 80085fa:	085b      	lsrs	r3, r3, #1
 80085fc:	b29b      	uxth	r3, r3
 80085fe:	18db      	adds	r3, r3, r3
 8008600:	b29a      	uxth	r2, r3
 8008602:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008604:	801a      	strh	r2, [r3, #0]
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	657b      	str	r3, [r7, #84]	; 0x54
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2250      	movs	r2, #80	; 0x50
 800860e:	5a9b      	ldrh	r3, [r3, r2]
 8008610:	b29b      	uxth	r3, r3
 8008612:	001a      	movs	r2, r3
 8008614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008616:	189b      	adds	r3, r3, r2
 8008618:	657b      	str	r3, [r7, #84]	; 0x54
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	781b      	ldrb	r3, [r3, #0]
 800861e:	00da      	lsls	r2, r3, #3
 8008620:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008622:	18d3      	adds	r3, r2, r3
 8008624:	4a88      	ldr	r2, [pc, #544]	; (8008848 <USB_ActivateEndpoint+0x6c0>)
 8008626:	4694      	mov	ip, r2
 8008628:	4463      	add	r3, ip
 800862a:	653b      	str	r3, [r7, #80]	; 0x50
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	895b      	ldrh	r3, [r3, #10]
 8008630:	085b      	lsrs	r3, r3, #1
 8008632:	b29b      	uxth	r3, r3
 8008634:	18db      	adds	r3, r3, r3
 8008636:	b29a      	uxth	r2, r3
 8008638:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800863a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d000      	beq.n	8008646 <USB_ActivateEndpoint+0x4be>
 8008644:	e087      	b.n	8008756 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	781b      	ldrb	r3, [r3, #0]
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	18d2      	adds	r2, r2, r3
 8008650:	2140      	movs	r1, #64	; 0x40
 8008652:	187b      	adds	r3, r7, r1
 8008654:	8812      	ldrh	r2, [r2, #0]
 8008656:	801a      	strh	r2, [r3, #0]
 8008658:	187b      	adds	r3, r7, r1
 800865a:	881a      	ldrh	r2, [r3, #0]
 800865c:	2380      	movs	r3, #128	; 0x80
 800865e:	01db      	lsls	r3, r3, #7
 8008660:	4013      	ands	r3, r2
 8008662:	d016      	beq.n	8008692 <USB_ActivateEndpoint+0x50a>
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	781b      	ldrb	r3, [r3, #0]
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	18d3      	adds	r3, r2, r3
 800866e:	881b      	ldrh	r3, [r3, #0]
 8008670:	b29a      	uxth	r2, r3
 8008672:	203e      	movs	r0, #62	; 0x3e
 8008674:	183b      	adds	r3, r7, r0
 8008676:	496e      	ldr	r1, [pc, #440]	; (8008830 <USB_ActivateEndpoint+0x6a8>)
 8008678:	400a      	ands	r2, r1
 800867a:	801a      	strh	r2, [r3, #0]
 800867c:	687a      	ldr	r2, [r7, #4]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	781b      	ldrb	r3, [r3, #0]
 8008682:	009b      	lsls	r3, r3, #2
 8008684:	18d3      	adds	r3, r2, r3
 8008686:	183a      	adds	r2, r7, r0
 8008688:	8812      	ldrh	r2, [r2, #0]
 800868a:	496a      	ldr	r1, [pc, #424]	; (8008834 <USB_ActivateEndpoint+0x6ac>)
 800868c:	430a      	orrs	r2, r1
 800868e:	b292      	uxth	r2, r2
 8008690:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008692:	687a      	ldr	r2, [r7, #4]
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	18d2      	adds	r2, r2, r3
 800869c:	213c      	movs	r1, #60	; 0x3c
 800869e:	187b      	adds	r3, r7, r1
 80086a0:	8812      	ldrh	r2, [r2, #0]
 80086a2:	801a      	strh	r2, [r3, #0]
 80086a4:	187b      	adds	r3, r7, r1
 80086a6:	881b      	ldrh	r3, [r3, #0]
 80086a8:	2240      	movs	r2, #64	; 0x40
 80086aa:	4013      	ands	r3, r2
 80086ac:	d016      	beq.n	80086dc <USB_ActivateEndpoint+0x554>
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	009b      	lsls	r3, r3, #2
 80086b6:	18d3      	adds	r3, r2, r3
 80086b8:	881b      	ldrh	r3, [r3, #0]
 80086ba:	b29a      	uxth	r2, r3
 80086bc:	203a      	movs	r0, #58	; 0x3a
 80086be:	183b      	adds	r3, r7, r0
 80086c0:	495b      	ldr	r1, [pc, #364]	; (8008830 <USB_ActivateEndpoint+0x6a8>)
 80086c2:	400a      	ands	r2, r1
 80086c4:	801a      	strh	r2, [r3, #0]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	781b      	ldrb	r3, [r3, #0]
 80086cc:	009b      	lsls	r3, r3, #2
 80086ce:	18d3      	adds	r3, r2, r3
 80086d0:	183a      	adds	r2, r7, r0
 80086d2:	8812      	ldrh	r2, [r2, #0]
 80086d4:	495d      	ldr	r1, [pc, #372]	; (800884c <USB_ActivateEndpoint+0x6c4>)
 80086d6:	430a      	orrs	r2, r1
 80086d8:	b292      	uxth	r2, r2
 80086da:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	18d3      	adds	r3, r2, r3
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	b29a      	uxth	r2, r3
 80086ea:	2038      	movs	r0, #56	; 0x38
 80086ec:	183b      	adds	r3, r7, r0
 80086ee:	4952      	ldr	r1, [pc, #328]	; (8008838 <USB_ActivateEndpoint+0x6b0>)
 80086f0:	400a      	ands	r2, r1
 80086f2:	801a      	strh	r2, [r3, #0]
 80086f4:	183b      	adds	r3, r7, r0
 80086f6:	183a      	adds	r2, r7, r0
 80086f8:	8812      	ldrh	r2, [r2, #0]
 80086fa:	2180      	movs	r1, #128	; 0x80
 80086fc:	0149      	lsls	r1, r1, #5
 80086fe:	404a      	eors	r2, r1
 8008700:	801a      	strh	r2, [r3, #0]
 8008702:	183b      	adds	r3, r7, r0
 8008704:	183a      	adds	r2, r7, r0
 8008706:	8812      	ldrh	r2, [r2, #0]
 8008708:	2180      	movs	r1, #128	; 0x80
 800870a:	0189      	lsls	r1, r1, #6
 800870c:	404a      	eors	r2, r1
 800870e:	801a      	strh	r2, [r3, #0]
 8008710:	687a      	ldr	r2, [r7, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	781b      	ldrb	r3, [r3, #0]
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	18d3      	adds	r3, r2, r3
 800871a:	183a      	adds	r2, r7, r0
 800871c:	8812      	ldrh	r2, [r2, #0]
 800871e:	4947      	ldr	r1, [pc, #284]	; (800883c <USB_ActivateEndpoint+0x6b4>)
 8008720:	430a      	orrs	r2, r1
 8008722:	b292      	uxth	r2, r2
 8008724:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	18d3      	adds	r3, r2, r3
 8008730:	881b      	ldrh	r3, [r3, #0]
 8008732:	b29a      	uxth	r2, r3
 8008734:	2036      	movs	r0, #54	; 0x36
 8008736:	183b      	adds	r3, r7, r0
 8008738:	4945      	ldr	r1, [pc, #276]	; (8008850 <USB_ActivateEndpoint+0x6c8>)
 800873a:	400a      	ands	r2, r1
 800873c:	801a      	strh	r2, [r3, #0]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	781b      	ldrb	r3, [r3, #0]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	18d3      	adds	r3, r2, r3
 8008748:	183a      	adds	r2, r7, r0
 800874a:	8812      	ldrh	r2, [r2, #0]
 800874c:	493b      	ldr	r1, [pc, #236]	; (800883c <USB_ActivateEndpoint+0x6b4>)
 800874e:	430a      	orrs	r2, r1
 8008750:	b292      	uxth	r2, r2
 8008752:	801a      	strh	r2, [r3, #0]
 8008754:	e0ac      	b.n	80088b0 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	781b      	ldrb	r3, [r3, #0]
 800875c:	009b      	lsls	r3, r3, #2
 800875e:	18d2      	adds	r2, r2, r3
 8008760:	214e      	movs	r1, #78	; 0x4e
 8008762:	187b      	adds	r3, r7, r1
 8008764:	8812      	ldrh	r2, [r2, #0]
 8008766:	801a      	strh	r2, [r3, #0]
 8008768:	187b      	adds	r3, r7, r1
 800876a:	881a      	ldrh	r2, [r3, #0]
 800876c:	2380      	movs	r3, #128	; 0x80
 800876e:	01db      	lsls	r3, r3, #7
 8008770:	4013      	ands	r3, r2
 8008772:	d016      	beq.n	80087a2 <USB_ActivateEndpoint+0x61a>
 8008774:	687a      	ldr	r2, [r7, #4]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	781b      	ldrb	r3, [r3, #0]
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	18d3      	adds	r3, r2, r3
 800877e:	881b      	ldrh	r3, [r3, #0]
 8008780:	b29a      	uxth	r2, r3
 8008782:	204c      	movs	r0, #76	; 0x4c
 8008784:	183b      	adds	r3, r7, r0
 8008786:	492a      	ldr	r1, [pc, #168]	; (8008830 <USB_ActivateEndpoint+0x6a8>)
 8008788:	400a      	ands	r2, r1
 800878a:	801a      	strh	r2, [r3, #0]
 800878c:	687a      	ldr	r2, [r7, #4]
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	18d3      	adds	r3, r2, r3
 8008796:	183a      	adds	r2, r7, r0
 8008798:	8812      	ldrh	r2, [r2, #0]
 800879a:	4926      	ldr	r1, [pc, #152]	; (8008834 <USB_ActivateEndpoint+0x6ac>)
 800879c:	430a      	orrs	r2, r1
 800879e:	b292      	uxth	r2, r2
 80087a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	781b      	ldrb	r3, [r3, #0]
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	18d2      	adds	r2, r2, r3
 80087ac:	214a      	movs	r1, #74	; 0x4a
 80087ae:	187b      	adds	r3, r7, r1
 80087b0:	8812      	ldrh	r2, [r2, #0]
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	187b      	adds	r3, r7, r1
 80087b6:	881b      	ldrh	r3, [r3, #0]
 80087b8:	2240      	movs	r2, #64	; 0x40
 80087ba:	4013      	ands	r3, r2
 80087bc:	d016      	beq.n	80087ec <USB_ActivateEndpoint+0x664>
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	009b      	lsls	r3, r3, #2
 80087c6:	18d3      	adds	r3, r2, r3
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29a      	uxth	r2, r3
 80087cc:	2048      	movs	r0, #72	; 0x48
 80087ce:	183b      	adds	r3, r7, r0
 80087d0:	4917      	ldr	r1, [pc, #92]	; (8008830 <USB_ActivateEndpoint+0x6a8>)
 80087d2:	400a      	ands	r2, r1
 80087d4:	801a      	strh	r2, [r3, #0]
 80087d6:	687a      	ldr	r2, [r7, #4]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	009b      	lsls	r3, r3, #2
 80087de:	18d3      	adds	r3, r2, r3
 80087e0:	183a      	adds	r2, r7, r0
 80087e2:	8812      	ldrh	r2, [r2, #0]
 80087e4:	4919      	ldr	r1, [pc, #100]	; (800884c <USB_ActivateEndpoint+0x6c4>)
 80087e6:	430a      	orrs	r2, r1
 80087e8:	b292      	uxth	r2, r2
 80087ea:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	78db      	ldrb	r3, [r3, #3]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d02f      	beq.n	8008854 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80087f4:	687a      	ldr	r2, [r7, #4]
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	781b      	ldrb	r3, [r3, #0]
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	18d3      	adds	r3, r2, r3
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29a      	uxth	r2, r3
 8008802:	2044      	movs	r0, #68	; 0x44
 8008804:	183b      	adds	r3, r7, r0
 8008806:	4912      	ldr	r1, [pc, #72]	; (8008850 <USB_ActivateEndpoint+0x6c8>)
 8008808:	400a      	ands	r2, r1
 800880a:	801a      	strh	r2, [r3, #0]
 800880c:	183b      	adds	r3, r7, r0
 800880e:	183a      	adds	r2, r7, r0
 8008810:	8812      	ldrh	r2, [r2, #0]
 8008812:	2120      	movs	r1, #32
 8008814:	404a      	eors	r2, r1
 8008816:	801a      	strh	r2, [r3, #0]
 8008818:	687a      	ldr	r2, [r7, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	183a      	adds	r2, r7, r0
 8008824:	8812      	ldrh	r2, [r2, #0]
 8008826:	4905      	ldr	r1, [pc, #20]	; (800883c <USB_ActivateEndpoint+0x6b4>)
 8008828:	430a      	orrs	r2, r1
 800882a:	b292      	uxth	r2, r2
 800882c:	801a      	strh	r2, [r3, #0]
 800882e:	e028      	b.n	8008882 <USB_ActivateEndpoint+0x6fa>
 8008830:	ffff8f8f 	.word	0xffff8f8f
 8008834:	ffffc080 	.word	0xffffc080
 8008838:	ffffbf8f 	.word	0xffffbf8f
 800883c:	ffff8080 	.word	0xffff8080
 8008840:	ffff8180 	.word	0xffff8180
 8008844:	ffff8e8f 	.word	0xffff8e8f
 8008848:	00000404 	.word	0x00000404
 800884c:	ffff80c0 	.word	0xffff80c0
 8008850:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	781b      	ldrb	r3, [r3, #0]
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	18d3      	adds	r3, r2, r3
 800885e:	881b      	ldrh	r3, [r3, #0]
 8008860:	b29a      	uxth	r2, r3
 8008862:	2046      	movs	r0, #70	; 0x46
 8008864:	183b      	adds	r3, r7, r0
 8008866:	4916      	ldr	r1, [pc, #88]	; (80088c0 <USB_ActivateEndpoint+0x738>)
 8008868:	400a      	ands	r2, r1
 800886a:	801a      	strh	r2, [r3, #0]
 800886c:	687a      	ldr	r2, [r7, #4]
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	781b      	ldrb	r3, [r3, #0]
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	18d3      	adds	r3, r2, r3
 8008876:	183a      	adds	r2, r7, r0
 8008878:	8812      	ldrh	r2, [r2, #0]
 800887a:	4912      	ldr	r1, [pc, #72]	; (80088c4 <USB_ActivateEndpoint+0x73c>)
 800887c:	430a      	orrs	r2, r1
 800887e:	b292      	uxth	r2, r2
 8008880:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	683b      	ldr	r3, [r7, #0]
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	18d3      	adds	r3, r2, r3
 800888c:	881b      	ldrh	r3, [r3, #0]
 800888e:	b29a      	uxth	r2, r3
 8008890:	2042      	movs	r0, #66	; 0x42
 8008892:	183b      	adds	r3, r7, r0
 8008894:	490c      	ldr	r1, [pc, #48]	; (80088c8 <USB_ActivateEndpoint+0x740>)
 8008896:	400a      	ands	r2, r1
 8008898:	801a      	strh	r2, [r3, #0]
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	18d3      	adds	r3, r2, r3
 80088a4:	183a      	adds	r2, r7, r0
 80088a6:	8812      	ldrh	r2, [r2, #0]
 80088a8:	4906      	ldr	r1, [pc, #24]	; (80088c4 <USB_ActivateEndpoint+0x73c>)
 80088aa:	430a      	orrs	r2, r1
 80088ac:	b292      	uxth	r2, r2
 80088ae:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80088b0:	236f      	movs	r3, #111	; 0x6f
 80088b2:	18fb      	adds	r3, r7, r3
 80088b4:	781b      	ldrb	r3, [r3, #0]
}
 80088b6:	0018      	movs	r0, r3
 80088b8:	46bd      	mov	sp, r7
 80088ba:	b01c      	add	sp, #112	; 0x70
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	ffff8fbf 	.word	0xffff8fbf
 80088c4:	ffff8080 	.word	0xffff8080
 80088c8:	ffffbf8f 	.word	0xffffbf8f

080088cc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b08c      	sub	sp, #48	; 0x30
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	7b1b      	ldrb	r3, [r3, #12]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d000      	beq.n	80088e0 <USB_DeactivateEndpoint+0x14>
 80088de:	e07e      	b.n	80089de <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d03c      	beq.n	8008962 <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	009b      	lsls	r3, r3, #2
 80088f0:	18d2      	adds	r2, r2, r3
 80088f2:	210c      	movs	r1, #12
 80088f4:	187b      	adds	r3, r7, r1
 80088f6:	8812      	ldrh	r2, [r2, #0]
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	187b      	adds	r3, r7, r1
 80088fc:	881b      	ldrh	r3, [r3, #0]
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	4013      	ands	r3, r2
 8008902:	d016      	beq.n	8008932 <USB_DeactivateEndpoint+0x66>
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	009b      	lsls	r3, r3, #2
 800890c:	18d3      	adds	r3, r2, r3
 800890e:	881b      	ldrh	r3, [r3, #0]
 8008910:	b29a      	uxth	r2, r3
 8008912:	200a      	movs	r0, #10
 8008914:	183b      	adds	r3, r7, r0
 8008916:	49c7      	ldr	r1, [pc, #796]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008918:	400a      	ands	r2, r1
 800891a:	801a      	strh	r2, [r3, #0]
 800891c:	687a      	ldr	r2, [r7, #4]
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	781b      	ldrb	r3, [r3, #0]
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	18d3      	adds	r3, r2, r3
 8008926:	183a      	adds	r2, r7, r0
 8008928:	8812      	ldrh	r2, [r2, #0]
 800892a:	49c3      	ldr	r1, [pc, #780]	; (8008c38 <USB_DeactivateEndpoint+0x36c>)
 800892c:	430a      	orrs	r2, r1
 800892e:	b292      	uxth	r2, r2
 8008930:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	781b      	ldrb	r3, [r3, #0]
 8008938:	009b      	lsls	r3, r3, #2
 800893a:	18d3      	adds	r3, r2, r3
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	b29a      	uxth	r2, r3
 8008940:	2008      	movs	r0, #8
 8008942:	183b      	adds	r3, r7, r0
 8008944:	49bd      	ldr	r1, [pc, #756]	; (8008c3c <USB_DeactivateEndpoint+0x370>)
 8008946:	400a      	ands	r2, r1
 8008948:	801a      	strh	r2, [r3, #0]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	781b      	ldrb	r3, [r3, #0]
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	18d3      	adds	r3, r2, r3
 8008954:	183a      	adds	r2, r7, r0
 8008956:	8812      	ldrh	r2, [r2, #0]
 8008958:	49b9      	ldr	r1, [pc, #740]	; (8008c40 <USB_DeactivateEndpoint+0x374>)
 800895a:	430a      	orrs	r2, r1
 800895c:	b292      	uxth	r2, r2
 800895e:	801a      	strh	r2, [r3, #0]
 8008960:	e163      	b.n	8008c2a <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	18d2      	adds	r2, r2, r3
 800896c:	2112      	movs	r1, #18
 800896e:	187b      	adds	r3, r7, r1
 8008970:	8812      	ldrh	r2, [r2, #0]
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	187b      	adds	r3, r7, r1
 8008976:	881a      	ldrh	r2, [r3, #0]
 8008978:	2380      	movs	r3, #128	; 0x80
 800897a:	01db      	lsls	r3, r3, #7
 800897c:	4013      	ands	r3, r2
 800897e:	d016      	beq.n	80089ae <USB_DeactivateEndpoint+0xe2>
 8008980:	687a      	ldr	r2, [r7, #4]
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	18d3      	adds	r3, r2, r3
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	b29a      	uxth	r2, r3
 800898e:	2010      	movs	r0, #16
 8008990:	183b      	adds	r3, r7, r0
 8008992:	49a8      	ldr	r1, [pc, #672]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008994:	400a      	ands	r2, r1
 8008996:	801a      	strh	r2, [r3, #0]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	18d3      	adds	r3, r2, r3
 80089a2:	183a      	adds	r2, r7, r0
 80089a4:	8812      	ldrh	r2, [r2, #0]
 80089a6:	49a7      	ldr	r1, [pc, #668]	; (8008c44 <USB_DeactivateEndpoint+0x378>)
 80089a8:	430a      	orrs	r2, r1
 80089aa:	b292      	uxth	r2, r2
 80089ac:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	18d3      	adds	r3, r2, r3
 80089b8:	881b      	ldrh	r3, [r3, #0]
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	200e      	movs	r0, #14
 80089be:	183b      	adds	r3, r7, r0
 80089c0:	49a1      	ldr	r1, [pc, #644]	; (8008c48 <USB_DeactivateEndpoint+0x37c>)
 80089c2:	400a      	ands	r2, r1
 80089c4:	801a      	strh	r2, [r3, #0]
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	18d3      	adds	r3, r2, r3
 80089d0:	183a      	adds	r2, r7, r0
 80089d2:	8812      	ldrh	r2, [r2, #0]
 80089d4:	499a      	ldr	r1, [pc, #616]	; (8008c40 <USB_DeactivateEndpoint+0x374>)
 80089d6:	430a      	orrs	r2, r1
 80089d8:	b292      	uxth	r2, r2
 80089da:	801a      	strh	r2, [r3, #0]
 80089dc:	e125      	b.n	8008c2a <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	785b      	ldrb	r3, [r3, #1]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d000      	beq.n	80089e8 <USB_DeactivateEndpoint+0x11c>
 80089e6:	e090      	b.n	8008b0a <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	18d2      	adds	r2, r2, r3
 80089f2:	2120      	movs	r1, #32
 80089f4:	187b      	adds	r3, r7, r1
 80089f6:	8812      	ldrh	r2, [r2, #0]
 80089f8:	801a      	strh	r2, [r3, #0]
 80089fa:	187b      	adds	r3, r7, r1
 80089fc:	881a      	ldrh	r2, [r3, #0]
 80089fe:	2380      	movs	r3, #128	; 0x80
 8008a00:	01db      	lsls	r3, r3, #7
 8008a02:	4013      	ands	r3, r2
 8008a04:	d016      	beq.n	8008a34 <USB_DeactivateEndpoint+0x168>
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	18d3      	adds	r3, r2, r3
 8008a10:	881b      	ldrh	r3, [r3, #0]
 8008a12:	b29a      	uxth	r2, r3
 8008a14:	201e      	movs	r0, #30
 8008a16:	183b      	adds	r3, r7, r0
 8008a18:	4986      	ldr	r1, [pc, #536]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008a1a:	400a      	ands	r2, r1
 8008a1c:	801a      	strh	r2, [r3, #0]
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	18d3      	adds	r3, r2, r3
 8008a28:	183a      	adds	r2, r7, r0
 8008a2a:	8812      	ldrh	r2, [r2, #0]
 8008a2c:	4985      	ldr	r1, [pc, #532]	; (8008c44 <USB_DeactivateEndpoint+0x378>)
 8008a2e:	430a      	orrs	r2, r1
 8008a30:	b292      	uxth	r2, r2
 8008a32:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	781b      	ldrb	r3, [r3, #0]
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	18d2      	adds	r2, r2, r3
 8008a3e:	211c      	movs	r1, #28
 8008a40:	187b      	adds	r3, r7, r1
 8008a42:	8812      	ldrh	r2, [r2, #0]
 8008a44:	801a      	strh	r2, [r3, #0]
 8008a46:	187b      	adds	r3, r7, r1
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	2240      	movs	r2, #64	; 0x40
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	d016      	beq.n	8008a7e <USB_DeactivateEndpoint+0x1b2>
 8008a50:	687a      	ldr	r2, [r7, #4]
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	18d3      	adds	r3, r2, r3
 8008a5a:	881b      	ldrh	r3, [r3, #0]
 8008a5c:	b29a      	uxth	r2, r3
 8008a5e:	201a      	movs	r0, #26
 8008a60:	183b      	adds	r3, r7, r0
 8008a62:	4974      	ldr	r1, [pc, #464]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008a64:	400a      	ands	r2, r1
 8008a66:	801a      	strh	r2, [r3, #0]
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	18d3      	adds	r3, r2, r3
 8008a72:	183a      	adds	r2, r7, r0
 8008a74:	8812      	ldrh	r2, [r2, #0]
 8008a76:	4970      	ldr	r1, [pc, #448]	; (8008c38 <USB_DeactivateEndpoint+0x36c>)
 8008a78:	430a      	orrs	r2, r1
 8008a7a:	b292      	uxth	r2, r2
 8008a7c:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	18d3      	adds	r3, r2, r3
 8008a88:	881b      	ldrh	r3, [r3, #0]
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	2018      	movs	r0, #24
 8008a8e:	183b      	adds	r3, r7, r0
 8008a90:	4968      	ldr	r1, [pc, #416]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008a92:	400a      	ands	r2, r1
 8008a94:	801a      	strh	r2, [r3, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	781b      	ldrb	r3, [r3, #0]
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	18d3      	adds	r3, r2, r3
 8008aa0:	183a      	adds	r2, r7, r0
 8008aa2:	8812      	ldrh	r2, [r2, #0]
 8008aa4:	4964      	ldr	r1, [pc, #400]	; (8008c38 <USB_DeactivateEndpoint+0x36c>)
 8008aa6:	430a      	orrs	r2, r1
 8008aa8:	b292      	uxth	r2, r2
 8008aaa:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	781b      	ldrb	r3, [r3, #0]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	18d3      	adds	r3, r2, r3
 8008ab6:	881b      	ldrh	r3, [r3, #0]
 8008ab8:	b29a      	uxth	r2, r3
 8008aba:	2016      	movs	r0, #22
 8008abc:	183b      	adds	r3, r7, r0
 8008abe:	4962      	ldr	r1, [pc, #392]	; (8008c48 <USB_DeactivateEndpoint+0x37c>)
 8008ac0:	400a      	ands	r2, r1
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	781b      	ldrb	r3, [r3, #0]
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	18d3      	adds	r3, r2, r3
 8008ace:	183a      	adds	r2, r7, r0
 8008ad0:	8812      	ldrh	r2, [r2, #0]
 8008ad2:	495b      	ldr	r1, [pc, #364]	; (8008c40 <USB_DeactivateEndpoint+0x374>)
 8008ad4:	430a      	orrs	r2, r1
 8008ad6:	b292      	uxth	r2, r2
 8008ad8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	781b      	ldrb	r3, [r3, #0]
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	18d3      	adds	r3, r2, r3
 8008ae4:	881b      	ldrh	r3, [r3, #0]
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	2014      	movs	r0, #20
 8008aea:	183b      	adds	r3, r7, r0
 8008aec:	4953      	ldr	r1, [pc, #332]	; (8008c3c <USB_DeactivateEndpoint+0x370>)
 8008aee:	400a      	ands	r2, r1
 8008af0:	801a      	strh	r2, [r3, #0]
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	781b      	ldrb	r3, [r3, #0]
 8008af8:	009b      	lsls	r3, r3, #2
 8008afa:	18d3      	adds	r3, r2, r3
 8008afc:	183a      	adds	r2, r7, r0
 8008afe:	8812      	ldrh	r2, [r2, #0]
 8008b00:	494f      	ldr	r1, [pc, #316]	; (8008c40 <USB_DeactivateEndpoint+0x374>)
 8008b02:	430a      	orrs	r2, r1
 8008b04:	b292      	uxth	r2, r2
 8008b06:	801a      	strh	r2, [r3, #0]
 8008b08:	e08f      	b.n	8008c2a <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	18d2      	adds	r2, r2, r3
 8008b14:	212e      	movs	r1, #46	; 0x2e
 8008b16:	187b      	adds	r3, r7, r1
 8008b18:	8812      	ldrh	r2, [r2, #0]
 8008b1a:	801a      	strh	r2, [r3, #0]
 8008b1c:	187b      	adds	r3, r7, r1
 8008b1e:	881a      	ldrh	r2, [r3, #0]
 8008b20:	2380      	movs	r3, #128	; 0x80
 8008b22:	01db      	lsls	r3, r3, #7
 8008b24:	4013      	ands	r3, r2
 8008b26:	d016      	beq.n	8008b56 <USB_DeactivateEndpoint+0x28a>
 8008b28:	687a      	ldr	r2, [r7, #4]
 8008b2a:	683b      	ldr	r3, [r7, #0]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	18d3      	adds	r3, r2, r3
 8008b32:	881b      	ldrh	r3, [r3, #0]
 8008b34:	b29a      	uxth	r2, r3
 8008b36:	202c      	movs	r0, #44	; 0x2c
 8008b38:	183b      	adds	r3, r7, r0
 8008b3a:	493e      	ldr	r1, [pc, #248]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008b3c:	400a      	ands	r2, r1
 8008b3e:	801a      	strh	r2, [r3, #0]
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	009b      	lsls	r3, r3, #2
 8008b48:	18d3      	adds	r3, r2, r3
 8008b4a:	183a      	adds	r2, r7, r0
 8008b4c:	8812      	ldrh	r2, [r2, #0]
 8008b4e:	493d      	ldr	r1, [pc, #244]	; (8008c44 <USB_DeactivateEndpoint+0x378>)
 8008b50:	430a      	orrs	r2, r1
 8008b52:	b292      	uxth	r2, r2
 8008b54:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	009b      	lsls	r3, r3, #2
 8008b5e:	18d2      	adds	r2, r2, r3
 8008b60:	212a      	movs	r1, #42	; 0x2a
 8008b62:	187b      	adds	r3, r7, r1
 8008b64:	8812      	ldrh	r2, [r2, #0]
 8008b66:	801a      	strh	r2, [r3, #0]
 8008b68:	187b      	adds	r3, r7, r1
 8008b6a:	881b      	ldrh	r3, [r3, #0]
 8008b6c:	2240      	movs	r2, #64	; 0x40
 8008b6e:	4013      	ands	r3, r2
 8008b70:	d016      	beq.n	8008ba0 <USB_DeactivateEndpoint+0x2d4>
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	18d3      	adds	r3, r2, r3
 8008b7c:	881b      	ldrh	r3, [r3, #0]
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	2028      	movs	r0, #40	; 0x28
 8008b82:	183b      	adds	r3, r7, r0
 8008b84:	492b      	ldr	r1, [pc, #172]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008b86:	400a      	ands	r2, r1
 8008b88:	801a      	strh	r2, [r3, #0]
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	18d3      	adds	r3, r2, r3
 8008b94:	183a      	adds	r2, r7, r0
 8008b96:	8812      	ldrh	r2, [r2, #0]
 8008b98:	4927      	ldr	r1, [pc, #156]	; (8008c38 <USB_DeactivateEndpoint+0x36c>)
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	b292      	uxth	r2, r2
 8008b9e:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008ba0:	687a      	ldr	r2, [r7, #4]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	18d3      	adds	r3, r2, r3
 8008baa:	881b      	ldrh	r3, [r3, #0]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	2026      	movs	r0, #38	; 0x26
 8008bb0:	183b      	adds	r3, r7, r0
 8008bb2:	4920      	ldr	r1, [pc, #128]	; (8008c34 <USB_DeactivateEndpoint+0x368>)
 8008bb4:	400a      	ands	r2, r1
 8008bb6:	801a      	strh	r2, [r3, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	009b      	lsls	r3, r3, #2
 8008bc0:	18d3      	adds	r3, r2, r3
 8008bc2:	183a      	adds	r2, r7, r0
 8008bc4:	8812      	ldrh	r2, [r2, #0]
 8008bc6:	491f      	ldr	r1, [pc, #124]	; (8008c44 <USB_DeactivateEndpoint+0x378>)
 8008bc8:	430a      	orrs	r2, r1
 8008bca:	b292      	uxth	r2, r2
 8008bcc:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008bce:	687a      	ldr	r2, [r7, #4]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	009b      	lsls	r3, r3, #2
 8008bd6:	18d3      	adds	r3, r2, r3
 8008bd8:	881b      	ldrh	r3, [r3, #0]
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	2024      	movs	r0, #36	; 0x24
 8008bde:	183b      	adds	r3, r7, r0
 8008be0:	4916      	ldr	r1, [pc, #88]	; (8008c3c <USB_DeactivateEndpoint+0x370>)
 8008be2:	400a      	ands	r2, r1
 8008be4:	801a      	strh	r2, [r3, #0]
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	781b      	ldrb	r3, [r3, #0]
 8008bec:	009b      	lsls	r3, r3, #2
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	183a      	adds	r2, r7, r0
 8008bf2:	8812      	ldrh	r2, [r2, #0]
 8008bf4:	4912      	ldr	r1, [pc, #72]	; (8008c40 <USB_DeactivateEndpoint+0x374>)
 8008bf6:	430a      	orrs	r2, r1
 8008bf8:	b292      	uxth	r2, r2
 8008bfa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008bfc:	687a      	ldr	r2, [r7, #4]
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	781b      	ldrb	r3, [r3, #0]
 8008c02:	009b      	lsls	r3, r3, #2
 8008c04:	18d3      	adds	r3, r2, r3
 8008c06:	881b      	ldrh	r3, [r3, #0]
 8008c08:	b29a      	uxth	r2, r3
 8008c0a:	2022      	movs	r0, #34	; 0x22
 8008c0c:	183b      	adds	r3, r7, r0
 8008c0e:	490e      	ldr	r1, [pc, #56]	; (8008c48 <USB_DeactivateEndpoint+0x37c>)
 8008c10:	400a      	ands	r2, r1
 8008c12:	801a      	strh	r2, [r3, #0]
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	18d3      	adds	r3, r2, r3
 8008c1e:	183a      	adds	r2, r7, r0
 8008c20:	8812      	ldrh	r2, [r2, #0]
 8008c22:	4907      	ldr	r1, [pc, #28]	; (8008c40 <USB_DeactivateEndpoint+0x374>)
 8008c24:	430a      	orrs	r2, r1
 8008c26:	b292      	uxth	r2, r2
 8008c28:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008c2a:	2300      	movs	r3, #0
}
 8008c2c:	0018      	movs	r0, r3
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	b00c      	add	sp, #48	; 0x30
 8008c32:	bd80      	pop	{r7, pc}
 8008c34:	ffff8f8f 	.word	0xffff8f8f
 8008c38:	ffff80c0 	.word	0xffff80c0
 8008c3c:	ffff8fbf 	.word	0xffff8fbf
 8008c40:	ffff8080 	.word	0xffff8080
 8008c44:	ffffc080 	.word	0xffffc080
 8008c48:	ffffbf8f 	.word	0xffffbf8f

08008c4c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008c4c:	b590      	push	{r4, r7, lr}
 8008c4e:	b0c3      	sub	sp, #268	; 0x10c
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
 8008c54:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d001      	beq.n	8008c62 <USB_EPStartXfer+0x16>
 8008c5e:	f000 fd2d 	bl	80096bc <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	699a      	ldr	r2, [r3, #24]
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d905      	bls.n	8008c7a <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	691b      	ldr	r3, [r3, #16]
 8008c72:	1d7a      	adds	r2, r7, #5
 8008c74:	32ff      	adds	r2, #255	; 0xff
 8008c76:	6013      	str	r3, [r2, #0]
 8008c78:	e004      	b.n	8008c84 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	699b      	ldr	r3, [r3, #24]
 8008c7e:	1d7a      	adds	r2, r7, #5
 8008c80:	32ff      	adds	r2, #255	; 0xff
 8008c82:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	7b1b      	ldrb	r3, [r3, #12]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d125      	bne.n	8008cd8 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	6959      	ldr	r1, [r3, #20]
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	88da      	ldrh	r2, [r3, #6]
 8008c94:	1d7b      	adds	r3, r7, #5
 8008c96:	33ff      	adds	r3, #255	; 0xff
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f001 fa47 	bl	800a130 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	613b      	str	r3, [r7, #16]
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2250      	movs	r2, #80	; 0x50
 8008caa:	5a9b      	ldrh	r3, [r3, r2]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	001a      	movs	r2, r3
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	189b      	adds	r3, r3, r2
 8008cb4:	613b      	str	r3, [r7, #16]
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	781b      	ldrb	r3, [r3, #0]
 8008cba:	00da      	lsls	r2, r3, #3
 8008cbc:	693b      	ldr	r3, [r7, #16]
 8008cbe:	18d3      	adds	r3, r2, r3
 8008cc0:	4ad7      	ldr	r2, [pc, #860]	; (8009020 <USB_EPStartXfer+0x3d4>)
 8008cc2:	4694      	mov	ip, r2
 8008cc4:	4463      	add	r3, ip
 8008cc6:	60fb      	str	r3, [r7, #12]
 8008cc8:	1d7b      	adds	r3, r7, #5
 8008cca:	33ff      	adds	r3, #255	; 0xff
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	b29a      	uxth	r2, r3
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	801a      	strh	r2, [r3, #0]
 8008cd4:	f000 fccd 	bl	8009672 <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	78db      	ldrb	r3, [r3, #3]
 8008cdc:	2b02      	cmp	r3, #2
 8008cde:	d000      	beq.n	8008ce2 <USB_EPStartXfer+0x96>
 8008ce0:	e362      	b.n	80093a8 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	6a1a      	ldr	r2, [r3, #32]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	429a      	cmp	r2, r3
 8008cec:	d800      	bhi.n	8008cf0 <USB_EPStartXfer+0xa4>
 8008cee:	e309      	b.n	8009304 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	18d3      	adds	r3, r2, r3
 8008cfa:	881b      	ldrh	r3, [r3, #0]
 8008cfc:	b29a      	uxth	r2, r3
 8008cfe:	2056      	movs	r0, #86	; 0x56
 8008d00:	183b      	adds	r3, r7, r0
 8008d02:	49c8      	ldr	r1, [pc, #800]	; (8009024 <USB_EPStartXfer+0x3d8>)
 8008d04:	400a      	ands	r2, r1
 8008d06:	801a      	strh	r2, [r3, #0]
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	781b      	ldrb	r3, [r3, #0]
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	18d3      	adds	r3, r2, r3
 8008d12:	183a      	adds	r2, r7, r0
 8008d14:	8812      	ldrh	r2, [r2, #0]
 8008d16:	49c4      	ldr	r1, [pc, #784]	; (8009028 <USB_EPStartXfer+0x3dc>)
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	b292      	uxth	r2, r2
 8008d1c:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	6a1a      	ldr	r2, [r3, #32]
 8008d22:	1d7b      	adds	r3, r7, #5
 8008d24:	33ff      	adds	r3, #255	; 0xff
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	1ad2      	subs	r2, r2, r3
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d2e:	687a      	ldr	r2, [r7, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	009b      	lsls	r3, r3, #2
 8008d36:	18d3      	adds	r3, r2, r3
 8008d38:	881b      	ldrh	r3, [r3, #0]
 8008d3a:	b29b      	uxth	r3, r3
 8008d3c:	001a      	movs	r2, r3
 8008d3e:	2340      	movs	r3, #64	; 0x40
 8008d40:	4013      	ands	r3, r2
 8008d42:	d100      	bne.n	8008d46 <USB_EPStartXfer+0xfa>
 8008d44:	e176      	b.n	8009034 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	633b      	str	r3, [r7, #48]	; 0x30
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	785b      	ldrb	r3, [r3, #1]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d000      	beq.n	8008d54 <USB_EPStartXfer+0x108>
 8008d52:	e074      	b.n	8008e3e <USB_EPStartXfer+0x1f2>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2250      	movs	r2, #80	; 0x50
 8008d5c:	5a9b      	ldrh	r3, [r3, r2]
 8008d5e:	b29b      	uxth	r3, r3
 8008d60:	001a      	movs	r2, r3
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	189b      	adds	r3, r3, r2
 8008d66:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	00da      	lsls	r2, r3, #3
 8008d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d70:	18d3      	adds	r3, r2, r3
 8008d72:	4aae      	ldr	r2, [pc, #696]	; (800902c <USB_EPStartXfer+0x3e0>)
 8008d74:	4694      	mov	ip, r2
 8008d76:	4463      	add	r3, ip
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	881b      	ldrh	r3, [r3, #0]
 8008d7e:	b29b      	uxth	r3, r3
 8008d80:	059b      	lsls	r3, r3, #22
 8008d82:	0d9b      	lsrs	r3, r3, #22
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d88:	801a      	strh	r2, [r3, #0]
 8008d8a:	1d7b      	adds	r3, r7, #5
 8008d8c:	33ff      	adds	r3, #255	; 0xff
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	2b3e      	cmp	r3, #62	; 0x3e
 8008d92:	d924      	bls.n	8008dde <USB_EPStartXfer+0x192>
 8008d94:	1d7b      	adds	r3, r7, #5
 8008d96:	33ff      	adds	r3, #255	; 0xff
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	095b      	lsrs	r3, r3, #5
 8008d9c:	1c7a      	adds	r2, r7, #1
 8008d9e:	32ff      	adds	r2, #255	; 0xff
 8008da0:	6013      	str	r3, [r2, #0]
 8008da2:	1d7b      	adds	r3, r7, #5
 8008da4:	33ff      	adds	r3, #255	; 0xff
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	221f      	movs	r2, #31
 8008daa:	4013      	ands	r3, r2
 8008dac:	d106      	bne.n	8008dbc <USB_EPStartXfer+0x170>
 8008dae:	1c7b      	adds	r3, r7, #1
 8008db0:	33ff      	adds	r3, #255	; 0xff
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	3b01      	subs	r3, #1
 8008db6:	1c7a      	adds	r2, r7, #1
 8008db8:	32ff      	adds	r2, #255	; 0xff
 8008dba:	6013      	str	r3, [r2, #0]
 8008dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	1c7b      	adds	r3, r7, #1
 8008dc4:	33ff      	adds	r3, #255	; 0xff
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	029b      	lsls	r3, r3, #10
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	b29b      	uxth	r3, r3
 8008dd2:	4a97      	ldr	r2, [pc, #604]	; (8009030 <USB_EPStartXfer+0x3e4>)
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dda:	801a      	strh	r2, [r3, #0]
 8008ddc:	e04a      	b.n	8008e74 <USB_EPStartXfer+0x228>
 8008dde:	1d7b      	adds	r3, r7, #5
 8008de0:	33ff      	adds	r3, #255	; 0xff
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d108      	bne.n	8008dfa <USB_EPStartXfer+0x1ae>
 8008de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dea:	881b      	ldrh	r3, [r3, #0]
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	4a90      	ldr	r2, [pc, #576]	; (8009030 <USB_EPStartXfer+0x3e4>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	801a      	strh	r2, [r3, #0]
 8008df8:	e03c      	b.n	8008e74 <USB_EPStartXfer+0x228>
 8008dfa:	1d7b      	adds	r3, r7, #5
 8008dfc:	33ff      	adds	r3, #255	; 0xff
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	085b      	lsrs	r3, r3, #1
 8008e02:	1c7a      	adds	r2, r7, #1
 8008e04:	32ff      	adds	r2, #255	; 0xff
 8008e06:	6013      	str	r3, [r2, #0]
 8008e08:	1d7b      	adds	r3, r7, #5
 8008e0a:	33ff      	adds	r3, #255	; 0xff
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	4013      	ands	r3, r2
 8008e12:	d006      	beq.n	8008e22 <USB_EPStartXfer+0x1d6>
 8008e14:	1c7b      	adds	r3, r7, #1
 8008e16:	33ff      	adds	r3, #255	; 0xff
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3301      	adds	r3, #1
 8008e1c:	1c7a      	adds	r2, r7, #1
 8008e1e:	32ff      	adds	r2, #255	; 0xff
 8008e20:	6013      	str	r3, [r2, #0]
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	881b      	ldrh	r3, [r3, #0]
 8008e26:	b29a      	uxth	r2, r3
 8008e28:	1c7b      	adds	r3, r7, #1
 8008e2a:	33ff      	adds	r3, #255	; 0xff
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	801a      	strh	r2, [r3, #0]
 8008e3c:	e01a      	b.n	8008e74 <USB_EPStartXfer+0x228>
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	785b      	ldrb	r3, [r3, #1]
 8008e42:	2b01      	cmp	r3, #1
 8008e44:	d116      	bne.n	8008e74 <USB_EPStartXfer+0x228>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2250      	movs	r2, #80	; 0x50
 8008e4a:	5a9b      	ldrh	r3, [r3, r2]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	001a      	movs	r2, r3
 8008e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e52:	189b      	adds	r3, r3, r2
 8008e54:	633b      	str	r3, [r7, #48]	; 0x30
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	781b      	ldrb	r3, [r3, #0]
 8008e5a:	00da      	lsls	r2, r3, #3
 8008e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e5e:	18d3      	adds	r3, r2, r3
 8008e60:	4a72      	ldr	r2, [pc, #456]	; (800902c <USB_EPStartXfer+0x3e0>)
 8008e62:	4694      	mov	ip, r2
 8008e64:	4463      	add	r3, ip
 8008e66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e68:	1d7b      	adds	r3, r7, #5
 8008e6a:	33ff      	adds	r3, #255	; 0xff
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e72:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008e74:	2076      	movs	r0, #118	; 0x76
 8008e76:	183b      	adds	r3, r7, r0
 8008e78:	683a      	ldr	r2, [r7, #0]
 8008e7a:	8952      	ldrh	r2, [r2, #10]
 8008e7c:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	6959      	ldr	r1, [r3, #20]
 8008e82:	1d7b      	adds	r3, r7, #5
 8008e84:	33ff      	adds	r3, #255	; 0xff
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	b29c      	uxth	r4, r3
 8008e8a:	183b      	adds	r3, r7, r0
 8008e8c:	881a      	ldrh	r2, [r3, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	0023      	movs	r3, r4
 8008e92:	f001 f94d 	bl	800a130 <USB_WritePMA>
            ep->xfer_buff += len;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	695a      	ldr	r2, [r3, #20]
 8008e9a:	1d7b      	adds	r3, r7, #5
 8008e9c:	33ff      	adds	r3, #255	; 0xff
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	18d2      	adds	r2, r2, r3
 8008ea2:	683b      	ldr	r3, [r7, #0]
 8008ea4:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	6a1a      	ldr	r2, [r3, #32]
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	429a      	cmp	r2, r3
 8008eb0:	d908      	bls.n	8008ec4 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6a1a      	ldr	r2, [r3, #32]
 8008eb6:	1d7b      	adds	r3, r7, #5
 8008eb8:	33ff      	adds	r3, #255	; 0xff
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	1ad2      	subs	r2, r2, r3
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	621a      	str	r2, [r3, #32]
 8008ec2:	e007      	b.n	8008ed4 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	1d7a      	adds	r2, r7, #5
 8008eca:	32ff      	adds	r2, #255	; 0xff
 8008ecc:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	785b      	ldrb	r3, [r3, #1]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d000      	beq.n	8008ede <USB_EPStartXfer+0x292>
 8008edc:	e070      	b.n	8008fc0 <USB_EPStartXfer+0x374>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	61bb      	str	r3, [r7, #24]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2250      	movs	r2, #80	; 0x50
 8008ee6:	5a9b      	ldrh	r3, [r3, r2]
 8008ee8:	b29b      	uxth	r3, r3
 8008eea:	001a      	movs	r2, r3
 8008eec:	69bb      	ldr	r3, [r7, #24]
 8008eee:	189b      	adds	r3, r3, r2
 8008ef0:	61bb      	str	r3, [r7, #24]
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	00da      	lsls	r2, r3, #3
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	18d3      	adds	r3, r2, r3
 8008efc:	4a48      	ldr	r2, [pc, #288]	; (8009020 <USB_EPStartXfer+0x3d4>)
 8008efe:	4694      	mov	ip, r2
 8008f00:	4463      	add	r3, ip
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	697b      	ldr	r3, [r7, #20]
 8008f06:	881b      	ldrh	r3, [r3, #0]
 8008f08:	b29b      	uxth	r3, r3
 8008f0a:	059b      	lsls	r3, r3, #22
 8008f0c:	0d9b      	lsrs	r3, r3, #22
 8008f0e:	b29a      	uxth	r2, r3
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	801a      	strh	r2, [r3, #0]
 8008f14:	1d7b      	adds	r3, r7, #5
 8008f16:	33ff      	adds	r3, #255	; 0xff
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f1c:	d922      	bls.n	8008f64 <USB_EPStartXfer+0x318>
 8008f1e:	1d7b      	adds	r3, r7, #5
 8008f20:	33ff      	adds	r3, #255	; 0xff
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	095b      	lsrs	r3, r3, #5
 8008f26:	21fc      	movs	r1, #252	; 0xfc
 8008f28:	187a      	adds	r2, r7, r1
 8008f2a:	6013      	str	r3, [r2, #0]
 8008f2c:	1d7b      	adds	r3, r7, #5
 8008f2e:	33ff      	adds	r3, #255	; 0xff
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	221f      	movs	r2, #31
 8008f34:	4013      	ands	r3, r2
 8008f36:	d104      	bne.n	8008f42 <USB_EPStartXfer+0x2f6>
 8008f38:	187b      	adds	r3, r7, r1
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	187a      	adds	r2, r7, r1
 8008f40:	6013      	str	r3, [r2, #0]
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	23fc      	movs	r3, #252	; 0xfc
 8008f4a:	18fb      	adds	r3, r7, r3
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	b29b      	uxth	r3, r3
 8008f50:	029b      	lsls	r3, r3, #10
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	4313      	orrs	r3, r2
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	4a35      	ldr	r2, [pc, #212]	; (8009030 <USB_EPStartXfer+0x3e4>)
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	b29a      	uxth	r2, r3
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	801a      	strh	r2, [r3, #0]
 8008f62:	e04a      	b.n	8008ffa <USB_EPStartXfer+0x3ae>
 8008f64:	1d7b      	adds	r3, r7, #5
 8008f66:	33ff      	adds	r3, #255	; 0xff
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d108      	bne.n	8008f80 <USB_EPStartXfer+0x334>
 8008f6e:	697b      	ldr	r3, [r7, #20]
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	4a2e      	ldr	r2, [pc, #184]	; (8009030 <USB_EPStartXfer+0x3e4>)
 8008f76:	4313      	orrs	r3, r2
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	801a      	strh	r2, [r3, #0]
 8008f7e:	e03c      	b.n	8008ffa <USB_EPStartXfer+0x3ae>
 8008f80:	1d7b      	adds	r3, r7, #5
 8008f82:	33ff      	adds	r3, #255	; 0xff
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	085b      	lsrs	r3, r3, #1
 8008f88:	21fc      	movs	r1, #252	; 0xfc
 8008f8a:	187a      	adds	r2, r7, r1
 8008f8c:	6013      	str	r3, [r2, #0]
 8008f8e:	1d7b      	adds	r3, r7, #5
 8008f90:	33ff      	adds	r3, #255	; 0xff
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	2201      	movs	r2, #1
 8008f96:	4013      	ands	r3, r2
 8008f98:	d004      	beq.n	8008fa4 <USB_EPStartXfer+0x358>
 8008f9a:	187b      	adds	r3, r7, r1
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	3301      	adds	r3, #1
 8008fa0:	187a      	adds	r2, r7, r1
 8008fa2:	6013      	str	r3, [r2, #0]
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	23fc      	movs	r3, #252	; 0xfc
 8008fac:	18fb      	adds	r3, r7, r3
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	029b      	lsls	r3, r3, #10
 8008fb4:	b29b      	uxth	r3, r3
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	b29a      	uxth	r2, r3
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	801a      	strh	r2, [r3, #0]
 8008fbe:	e01c      	b.n	8008ffa <USB_EPStartXfer+0x3ae>
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	785b      	ldrb	r3, [r3, #1]
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d118      	bne.n	8008ffa <USB_EPStartXfer+0x3ae>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	623b      	str	r3, [r7, #32]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2250      	movs	r2, #80	; 0x50
 8008fd0:	5a9b      	ldrh	r3, [r3, r2]
 8008fd2:	b29b      	uxth	r3, r3
 8008fd4:	001a      	movs	r2, r3
 8008fd6:	6a3b      	ldr	r3, [r7, #32]
 8008fd8:	189b      	adds	r3, r3, r2
 8008fda:	623b      	str	r3, [r7, #32]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	00da      	lsls	r2, r3, #3
 8008fe2:	6a3b      	ldr	r3, [r7, #32]
 8008fe4:	18d3      	adds	r3, r2, r3
 8008fe6:	4a0e      	ldr	r2, [pc, #56]	; (8009020 <USB_EPStartXfer+0x3d4>)
 8008fe8:	4694      	mov	ip, r2
 8008fea:	4463      	add	r3, ip
 8008fec:	61fb      	str	r3, [r7, #28]
 8008fee:	1d7b      	adds	r3, r7, #5
 8008ff0:	33ff      	adds	r3, #255	; 0xff
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	b29a      	uxth	r2, r3
 8008ff6:	69fb      	ldr	r3, [r7, #28]
 8008ff8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ffa:	2076      	movs	r0, #118	; 0x76
 8008ffc:	183b      	adds	r3, r7, r0
 8008ffe:	683a      	ldr	r2, [r7, #0]
 8009000:	8912      	ldrh	r2, [r2, #8]
 8009002:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	6959      	ldr	r1, [r3, #20]
 8009008:	1d7b      	adds	r3, r7, #5
 800900a:	33ff      	adds	r3, #255	; 0xff
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	b29c      	uxth	r4, r3
 8009010:	183b      	adds	r3, r7, r0
 8009012:	881a      	ldrh	r2, [r3, #0]
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	0023      	movs	r3, r4
 8009018:	f001 f88a 	bl	800a130 <USB_WritePMA>
 800901c:	e329      	b.n	8009672 <USB_EPStartXfer+0xa26>
 800901e:	46c0      	nop			; (mov r8, r8)
 8009020:	00000402 	.word	0x00000402
 8009024:	ffff8f8f 	.word	0xffff8f8f
 8009028:	ffff8180 	.word	0xffff8180
 800902c:	00000406 	.word	0x00000406
 8009030:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	785b      	ldrb	r3, [r3, #1]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d000      	beq.n	800903e <USB_EPStartXfer+0x3f2>
 800903c:	e070      	b.n	8009120 <USB_EPStartXfer+0x4d4>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	64bb      	str	r3, [r7, #72]	; 0x48
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2250      	movs	r2, #80	; 0x50
 8009046:	5a9b      	ldrh	r3, [r3, r2]
 8009048:	b29b      	uxth	r3, r3
 800904a:	001a      	movs	r2, r3
 800904c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800904e:	189b      	adds	r3, r3, r2
 8009050:	64bb      	str	r3, [r7, #72]	; 0x48
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	00da      	lsls	r2, r3, #3
 8009058:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800905a:	18d3      	adds	r3, r2, r3
 800905c:	4acd      	ldr	r2, [pc, #820]	; (8009394 <USB_EPStartXfer+0x748>)
 800905e:	4694      	mov	ip, r2
 8009060:	4463      	add	r3, ip
 8009062:	647b      	str	r3, [r7, #68]	; 0x44
 8009064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009066:	881b      	ldrh	r3, [r3, #0]
 8009068:	b29b      	uxth	r3, r3
 800906a:	059b      	lsls	r3, r3, #22
 800906c:	0d9b      	lsrs	r3, r3, #22
 800906e:	b29a      	uxth	r2, r3
 8009070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	1d7b      	adds	r3, r7, #5
 8009076:	33ff      	adds	r3, #255	; 0xff
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b3e      	cmp	r3, #62	; 0x3e
 800907c:	d922      	bls.n	80090c4 <USB_EPStartXfer+0x478>
 800907e:	1d7b      	adds	r3, r7, #5
 8009080:	33ff      	adds	r3, #255	; 0xff
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	095b      	lsrs	r3, r3, #5
 8009086:	21f8      	movs	r1, #248	; 0xf8
 8009088:	187a      	adds	r2, r7, r1
 800908a:	6013      	str	r3, [r2, #0]
 800908c:	1d7b      	adds	r3, r7, #5
 800908e:	33ff      	adds	r3, #255	; 0xff
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	221f      	movs	r2, #31
 8009094:	4013      	ands	r3, r2
 8009096:	d104      	bne.n	80090a2 <USB_EPStartXfer+0x456>
 8009098:	187b      	adds	r3, r7, r1
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	3b01      	subs	r3, #1
 800909e:	187a      	adds	r2, r7, r1
 80090a0:	6013      	str	r3, [r2, #0]
 80090a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29a      	uxth	r2, r3
 80090a8:	23f8      	movs	r3, #248	; 0xf8
 80090aa:	18fb      	adds	r3, r7, r3
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	029b      	lsls	r3, r3, #10
 80090b2:	b29b      	uxth	r3, r3
 80090b4:	4313      	orrs	r3, r2
 80090b6:	b29b      	uxth	r3, r3
 80090b8:	4ab7      	ldr	r2, [pc, #732]	; (8009398 <USB_EPStartXfer+0x74c>)
 80090ba:	4313      	orrs	r3, r2
 80090bc:	b29a      	uxth	r2, r3
 80090be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090c0:	801a      	strh	r2, [r3, #0]
 80090c2:	e04a      	b.n	800915a <USB_EPStartXfer+0x50e>
 80090c4:	1d7b      	adds	r3, r7, #5
 80090c6:	33ff      	adds	r3, #255	; 0xff
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d108      	bne.n	80090e0 <USB_EPStartXfer+0x494>
 80090ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090d0:	881b      	ldrh	r3, [r3, #0]
 80090d2:	b29b      	uxth	r3, r3
 80090d4:	4ab0      	ldr	r2, [pc, #704]	; (8009398 <USB_EPStartXfer+0x74c>)
 80090d6:	4313      	orrs	r3, r2
 80090d8:	b29a      	uxth	r2, r3
 80090da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80090dc:	801a      	strh	r2, [r3, #0]
 80090de:	e03c      	b.n	800915a <USB_EPStartXfer+0x50e>
 80090e0:	1d7b      	adds	r3, r7, #5
 80090e2:	33ff      	adds	r3, #255	; 0xff
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	085b      	lsrs	r3, r3, #1
 80090e8:	21f8      	movs	r1, #248	; 0xf8
 80090ea:	187a      	adds	r2, r7, r1
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	1d7b      	adds	r3, r7, #5
 80090f0:	33ff      	adds	r3, #255	; 0xff
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	2201      	movs	r2, #1
 80090f6:	4013      	ands	r3, r2
 80090f8:	d004      	beq.n	8009104 <USB_EPStartXfer+0x4b8>
 80090fa:	187b      	adds	r3, r7, r1
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3301      	adds	r3, #1
 8009100:	187a      	adds	r2, r7, r1
 8009102:	6013      	str	r3, [r2, #0]
 8009104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009106:	881b      	ldrh	r3, [r3, #0]
 8009108:	b29a      	uxth	r2, r3
 800910a:	23f8      	movs	r3, #248	; 0xf8
 800910c:	18fb      	adds	r3, r7, r3
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	b29b      	uxth	r3, r3
 8009112:	029b      	lsls	r3, r3, #10
 8009114:	b29b      	uxth	r3, r3
 8009116:	4313      	orrs	r3, r2
 8009118:	b29a      	uxth	r2, r3
 800911a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800911c:	801a      	strh	r2, [r3, #0]
 800911e:	e01c      	b.n	800915a <USB_EPStartXfer+0x50e>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	785b      	ldrb	r3, [r3, #1]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d118      	bne.n	800915a <USB_EPStartXfer+0x50e>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	653b      	str	r3, [r7, #80]	; 0x50
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2250      	movs	r2, #80	; 0x50
 8009130:	5a9b      	ldrh	r3, [r3, r2]
 8009132:	b29b      	uxth	r3, r3
 8009134:	001a      	movs	r2, r3
 8009136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009138:	189b      	adds	r3, r3, r2
 800913a:	653b      	str	r3, [r7, #80]	; 0x50
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	00da      	lsls	r2, r3, #3
 8009142:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009144:	18d3      	adds	r3, r2, r3
 8009146:	4a93      	ldr	r2, [pc, #588]	; (8009394 <USB_EPStartXfer+0x748>)
 8009148:	4694      	mov	ip, r2
 800914a:	4463      	add	r3, ip
 800914c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800914e:	1d7b      	adds	r3, r7, #5
 8009150:	33ff      	adds	r3, #255	; 0xff
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	b29a      	uxth	r2, r3
 8009156:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009158:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800915a:	2076      	movs	r0, #118	; 0x76
 800915c:	183b      	adds	r3, r7, r0
 800915e:	683a      	ldr	r2, [r7, #0]
 8009160:	8912      	ldrh	r2, [r2, #8]
 8009162:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	6959      	ldr	r1, [r3, #20]
 8009168:	1d7b      	adds	r3, r7, #5
 800916a:	33ff      	adds	r3, #255	; 0xff
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	b29c      	uxth	r4, r3
 8009170:	183b      	adds	r3, r7, r0
 8009172:	881a      	ldrh	r2, [r3, #0]
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	0023      	movs	r3, r4
 8009178:	f000 ffda 	bl	800a130 <USB_WritePMA>
            ep->xfer_buff += len;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	695a      	ldr	r2, [r3, #20]
 8009180:	1d7b      	adds	r3, r7, #5
 8009182:	33ff      	adds	r3, #255	; 0xff
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	18d2      	adds	r2, r2, r3
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	6a1a      	ldr	r2, [r3, #32]
 8009190:	683b      	ldr	r3, [r7, #0]
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	429a      	cmp	r2, r3
 8009196:	d908      	bls.n	80091aa <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	6a1a      	ldr	r2, [r3, #32]
 800919c:	1d7b      	adds	r3, r7, #5
 800919e:	33ff      	adds	r3, #255	; 0xff
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	1ad2      	subs	r2, r2, r3
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	621a      	str	r2, [r3, #32]
 80091a8:	e007      	b.n	80091ba <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	1d7a      	adds	r2, r7, #5
 80091b0:	32ff      	adds	r2, #255	; 0xff
 80091b2:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	2200      	movs	r2, #0
 80091b8:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	643b      	str	r3, [r7, #64]	; 0x40
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	785b      	ldrb	r3, [r3, #1]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d000      	beq.n	80091c8 <USB_EPStartXfer+0x57c>
 80091c6:	e070      	b.n	80092aa <USB_EPStartXfer+0x65e>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2250      	movs	r2, #80	; 0x50
 80091d0:	5a9b      	ldrh	r3, [r3, r2]
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	001a      	movs	r2, r3
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	189b      	adds	r3, r3, r2
 80091da:	63bb      	str	r3, [r7, #56]	; 0x38
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	00da      	lsls	r2, r3, #3
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	18d3      	adds	r3, r2, r3
 80091e6:	4a6d      	ldr	r2, [pc, #436]	; (800939c <USB_EPStartXfer+0x750>)
 80091e8:	4694      	mov	ip, r2
 80091ea:	4463      	add	r3, ip
 80091ec:	637b      	str	r3, [r7, #52]	; 0x34
 80091ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091f0:	881b      	ldrh	r3, [r3, #0]
 80091f2:	b29b      	uxth	r3, r3
 80091f4:	059b      	lsls	r3, r3, #22
 80091f6:	0d9b      	lsrs	r3, r3, #22
 80091f8:	b29a      	uxth	r2, r3
 80091fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091fc:	801a      	strh	r2, [r3, #0]
 80091fe:	1d7b      	adds	r3, r7, #5
 8009200:	33ff      	adds	r3, #255	; 0xff
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	2b3e      	cmp	r3, #62	; 0x3e
 8009206:	d922      	bls.n	800924e <USB_EPStartXfer+0x602>
 8009208:	1d7b      	adds	r3, r7, #5
 800920a:	33ff      	adds	r3, #255	; 0xff
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	095b      	lsrs	r3, r3, #5
 8009210:	21f4      	movs	r1, #244	; 0xf4
 8009212:	187a      	adds	r2, r7, r1
 8009214:	6013      	str	r3, [r2, #0]
 8009216:	1d7b      	adds	r3, r7, #5
 8009218:	33ff      	adds	r3, #255	; 0xff
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	221f      	movs	r2, #31
 800921e:	4013      	ands	r3, r2
 8009220:	d104      	bne.n	800922c <USB_EPStartXfer+0x5e0>
 8009222:	187b      	adds	r3, r7, r1
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	3b01      	subs	r3, #1
 8009228:	187a      	adds	r2, r7, r1
 800922a:	6013      	str	r3, [r2, #0]
 800922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	b29a      	uxth	r2, r3
 8009232:	23f4      	movs	r3, #244	; 0xf4
 8009234:	18fb      	adds	r3, r7, r3
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	b29b      	uxth	r3, r3
 800923a:	029b      	lsls	r3, r3, #10
 800923c:	b29b      	uxth	r3, r3
 800923e:	4313      	orrs	r3, r2
 8009240:	b29b      	uxth	r3, r3
 8009242:	4a55      	ldr	r2, [pc, #340]	; (8009398 <USB_EPStartXfer+0x74c>)
 8009244:	4313      	orrs	r3, r2
 8009246:	b29a      	uxth	r2, r3
 8009248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924a:	801a      	strh	r2, [r3, #0]
 800924c:	e048      	b.n	80092e0 <USB_EPStartXfer+0x694>
 800924e:	1d7b      	adds	r3, r7, #5
 8009250:	33ff      	adds	r3, #255	; 0xff
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d108      	bne.n	800926a <USB_EPStartXfer+0x61e>
 8009258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29b      	uxth	r3, r3
 800925e:	4a4e      	ldr	r2, [pc, #312]	; (8009398 <USB_EPStartXfer+0x74c>)
 8009260:	4313      	orrs	r3, r2
 8009262:	b29a      	uxth	r2, r3
 8009264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009266:	801a      	strh	r2, [r3, #0]
 8009268:	e03a      	b.n	80092e0 <USB_EPStartXfer+0x694>
 800926a:	1d7b      	adds	r3, r7, #5
 800926c:	33ff      	adds	r3, #255	; 0xff
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	085b      	lsrs	r3, r3, #1
 8009272:	21f4      	movs	r1, #244	; 0xf4
 8009274:	187a      	adds	r2, r7, r1
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	1d7b      	adds	r3, r7, #5
 800927a:	33ff      	adds	r3, #255	; 0xff
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2201      	movs	r2, #1
 8009280:	4013      	ands	r3, r2
 8009282:	d004      	beq.n	800928e <USB_EPStartXfer+0x642>
 8009284:	187b      	adds	r3, r7, r1
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	3301      	adds	r3, #1
 800928a:	187a      	adds	r2, r7, r1
 800928c:	6013      	str	r3, [r2, #0]
 800928e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009290:	881b      	ldrh	r3, [r3, #0]
 8009292:	b29a      	uxth	r2, r3
 8009294:	23f4      	movs	r3, #244	; 0xf4
 8009296:	18fb      	adds	r3, r7, r3
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	029b      	lsls	r3, r3, #10
 800929e:	b29b      	uxth	r3, r3
 80092a0:	4313      	orrs	r3, r2
 80092a2:	b29a      	uxth	r2, r3
 80092a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a6:	801a      	strh	r2, [r3, #0]
 80092a8:	e01a      	b.n	80092e0 <USB_EPStartXfer+0x694>
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	785b      	ldrb	r3, [r3, #1]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d116      	bne.n	80092e0 <USB_EPStartXfer+0x694>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2250      	movs	r2, #80	; 0x50
 80092b6:	5a9b      	ldrh	r3, [r3, r2]
 80092b8:	b29b      	uxth	r3, r3
 80092ba:	001a      	movs	r2, r3
 80092bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092be:	189b      	adds	r3, r3, r2
 80092c0:	643b      	str	r3, [r7, #64]	; 0x40
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	00da      	lsls	r2, r3, #3
 80092c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092ca:	18d3      	adds	r3, r2, r3
 80092cc:	4a33      	ldr	r2, [pc, #204]	; (800939c <USB_EPStartXfer+0x750>)
 80092ce:	4694      	mov	ip, r2
 80092d0:	4463      	add	r3, ip
 80092d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d4:	1d7b      	adds	r3, r7, #5
 80092d6:	33ff      	adds	r3, #255	; 0xff
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	b29a      	uxth	r2, r3
 80092dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80092e0:	2076      	movs	r0, #118	; 0x76
 80092e2:	183b      	adds	r3, r7, r0
 80092e4:	683a      	ldr	r2, [r7, #0]
 80092e6:	8952      	ldrh	r2, [r2, #10]
 80092e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	6959      	ldr	r1, [r3, #20]
 80092ee:	1d7b      	adds	r3, r7, #5
 80092f0:	33ff      	adds	r3, #255	; 0xff
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	b29c      	uxth	r4, r3
 80092f6:	183b      	adds	r3, r7, r0
 80092f8:	881a      	ldrh	r2, [r3, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	0023      	movs	r3, r4
 80092fe:	f000 ff17 	bl	800a130 <USB_WritePMA>
 8009302:	e1b6      	b.n	8009672 <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	6a1b      	ldr	r3, [r3, #32]
 8009308:	1d7a      	adds	r2, r7, #5
 800930a:	32ff      	adds	r2, #255	; 0xff
 800930c:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800930e:	687a      	ldr	r2, [r7, #4]
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	781b      	ldrb	r3, [r3, #0]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	18d3      	adds	r3, r2, r3
 8009318:	881b      	ldrh	r3, [r3, #0]
 800931a:	b29a      	uxth	r2, r3
 800931c:	2062      	movs	r0, #98	; 0x62
 800931e:	183b      	adds	r3, r7, r0
 8009320:	491f      	ldr	r1, [pc, #124]	; (80093a0 <USB_EPStartXfer+0x754>)
 8009322:	400a      	ands	r2, r1
 8009324:	801a      	strh	r2, [r3, #0]
 8009326:	687a      	ldr	r2, [r7, #4]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	781b      	ldrb	r3, [r3, #0]
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	18d3      	adds	r3, r2, r3
 8009330:	183a      	adds	r2, r7, r0
 8009332:	8812      	ldrh	r2, [r2, #0]
 8009334:	491b      	ldr	r1, [pc, #108]	; (80093a4 <USB_EPStartXfer+0x758>)
 8009336:	430a      	orrs	r2, r1
 8009338:	b292      	uxth	r2, r2
 800933a:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2250      	movs	r2, #80	; 0x50
 8009344:	5a9b      	ldrh	r3, [r3, r2]
 8009346:	b29b      	uxth	r3, r3
 8009348:	001a      	movs	r2, r3
 800934a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800934c:	189b      	adds	r3, r3, r2
 800934e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	781b      	ldrb	r3, [r3, #0]
 8009354:	00da      	lsls	r2, r3, #3
 8009356:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009358:	18d3      	adds	r3, r2, r3
 800935a:	4a0e      	ldr	r2, [pc, #56]	; (8009394 <USB_EPStartXfer+0x748>)
 800935c:	4694      	mov	ip, r2
 800935e:	4463      	add	r3, ip
 8009360:	65bb      	str	r3, [r7, #88]	; 0x58
 8009362:	1d7b      	adds	r3, r7, #5
 8009364:	33ff      	adds	r3, #255	; 0xff
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	b29a      	uxth	r2, r3
 800936a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800936c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800936e:	2076      	movs	r0, #118	; 0x76
 8009370:	183b      	adds	r3, r7, r0
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	8912      	ldrh	r2, [r2, #8]
 8009376:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	6959      	ldr	r1, [r3, #20]
 800937c:	1d7b      	adds	r3, r7, #5
 800937e:	33ff      	adds	r3, #255	; 0xff
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	b29c      	uxth	r4, r3
 8009384:	183b      	adds	r3, r7, r0
 8009386:	881a      	ldrh	r2, [r3, #0]
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	0023      	movs	r3, r4
 800938c:	f000 fed0 	bl	800a130 <USB_WritePMA>
 8009390:	e16f      	b.n	8009672 <USB_EPStartXfer+0xa26>
 8009392:	46c0      	nop			; (mov r8, r8)
 8009394:	00000402 	.word	0x00000402
 8009398:	ffff8000 	.word	0xffff8000
 800939c:	00000406 	.word	0x00000406
 80093a0:	ffff8e8f 	.word	0xffff8e8f
 80093a4:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80093a8:	683b      	ldr	r3, [r7, #0]
 80093aa:	6a1a      	ldr	r2, [r3, #32]
 80093ac:	1d7b      	adds	r3, r7, #5
 80093ae:	33ff      	adds	r3, #255	; 0xff
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	1ad2      	subs	r2, r2, r3
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	781b      	ldrb	r3, [r3, #0]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	18d3      	adds	r3, r2, r3
 80093c2:	881b      	ldrh	r3, [r3, #0]
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	001a      	movs	r2, r3
 80093c8:	2340      	movs	r3, #64	; 0x40
 80093ca:	4013      	ands	r3, r2
 80093cc:	d100      	bne.n	80093d0 <USB_EPStartXfer+0x784>
 80093ce:	e0a4      	b.n	800951a <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	673b      	str	r3, [r7, #112]	; 0x70
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	785b      	ldrb	r3, [r3, #1]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d000      	beq.n	80093de <USB_EPStartXfer+0x792>
 80093dc:	e070      	b.n	80094c0 <USB_EPStartXfer+0x874>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	2250      	movs	r2, #80	; 0x50
 80093e6:	5a9b      	ldrh	r3, [r3, r2]
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	001a      	movs	r2, r3
 80093ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093ee:	189b      	adds	r3, r3, r2
 80093f0:	66bb      	str	r3, [r7, #104]	; 0x68
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	781b      	ldrb	r3, [r3, #0]
 80093f6:	00da      	lsls	r2, r3, #3
 80093f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80093fa:	18d3      	adds	r3, r2, r3
 80093fc:	4abc      	ldr	r2, [pc, #752]	; (80096f0 <USB_EPStartXfer+0xaa4>)
 80093fe:	4694      	mov	ip, r2
 8009400:	4463      	add	r3, ip
 8009402:	667b      	str	r3, [r7, #100]	; 0x64
 8009404:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009406:	881b      	ldrh	r3, [r3, #0]
 8009408:	b29b      	uxth	r3, r3
 800940a:	059b      	lsls	r3, r3, #22
 800940c:	0d9b      	lsrs	r3, r3, #22
 800940e:	b29a      	uxth	r2, r3
 8009410:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009412:	801a      	strh	r2, [r3, #0]
 8009414:	1d7b      	adds	r3, r7, #5
 8009416:	33ff      	adds	r3, #255	; 0xff
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2b3e      	cmp	r3, #62	; 0x3e
 800941c:	d922      	bls.n	8009464 <USB_EPStartXfer+0x818>
 800941e:	1d7b      	adds	r3, r7, #5
 8009420:	33ff      	adds	r3, #255	; 0xff
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	095b      	lsrs	r3, r3, #5
 8009426:	21f0      	movs	r1, #240	; 0xf0
 8009428:	187a      	adds	r2, r7, r1
 800942a:	6013      	str	r3, [r2, #0]
 800942c:	1d7b      	adds	r3, r7, #5
 800942e:	33ff      	adds	r3, #255	; 0xff
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	221f      	movs	r2, #31
 8009434:	4013      	ands	r3, r2
 8009436:	d104      	bne.n	8009442 <USB_EPStartXfer+0x7f6>
 8009438:	187b      	adds	r3, r7, r1
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	3b01      	subs	r3, #1
 800943e:	187a      	adds	r2, r7, r1
 8009440:	6013      	str	r3, [r2, #0]
 8009442:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009444:	881b      	ldrh	r3, [r3, #0]
 8009446:	b29a      	uxth	r2, r3
 8009448:	23f0      	movs	r3, #240	; 0xf0
 800944a:	18fb      	adds	r3, r7, r3
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	b29b      	uxth	r3, r3
 8009450:	029b      	lsls	r3, r3, #10
 8009452:	b29b      	uxth	r3, r3
 8009454:	4313      	orrs	r3, r2
 8009456:	b29b      	uxth	r3, r3
 8009458:	4aa6      	ldr	r2, [pc, #664]	; (80096f4 <USB_EPStartXfer+0xaa8>)
 800945a:	4313      	orrs	r3, r2
 800945c:	b29a      	uxth	r2, r3
 800945e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009460:	801a      	strh	r2, [r3, #0]
 8009462:	e048      	b.n	80094f6 <USB_EPStartXfer+0x8aa>
 8009464:	1d7b      	adds	r3, r7, #5
 8009466:	33ff      	adds	r3, #255	; 0xff
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d108      	bne.n	8009480 <USB_EPStartXfer+0x834>
 800946e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009470:	881b      	ldrh	r3, [r3, #0]
 8009472:	b29b      	uxth	r3, r3
 8009474:	4a9f      	ldr	r2, [pc, #636]	; (80096f4 <USB_EPStartXfer+0xaa8>)
 8009476:	4313      	orrs	r3, r2
 8009478:	b29a      	uxth	r2, r3
 800947a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800947c:	801a      	strh	r2, [r3, #0]
 800947e:	e03a      	b.n	80094f6 <USB_EPStartXfer+0x8aa>
 8009480:	1d7b      	adds	r3, r7, #5
 8009482:	33ff      	adds	r3, #255	; 0xff
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	21f0      	movs	r1, #240	; 0xf0
 800948a:	187a      	adds	r2, r7, r1
 800948c:	6013      	str	r3, [r2, #0]
 800948e:	1d7b      	adds	r3, r7, #5
 8009490:	33ff      	adds	r3, #255	; 0xff
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2201      	movs	r2, #1
 8009496:	4013      	ands	r3, r2
 8009498:	d004      	beq.n	80094a4 <USB_EPStartXfer+0x858>
 800949a:	187b      	adds	r3, r7, r1
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	187a      	adds	r2, r7, r1
 80094a2:	6013      	str	r3, [r2, #0]
 80094a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29a      	uxth	r2, r3
 80094aa:	23f0      	movs	r3, #240	; 0xf0
 80094ac:	18fb      	adds	r3, r7, r3
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	029b      	lsls	r3, r3, #10
 80094b4:	b29b      	uxth	r3, r3
 80094b6:	4313      	orrs	r3, r2
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80094bc:	801a      	strh	r2, [r3, #0]
 80094be:	e01a      	b.n	80094f6 <USB_EPStartXfer+0x8aa>
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	785b      	ldrb	r3, [r3, #1]
 80094c4:	2b01      	cmp	r3, #1
 80094c6:	d116      	bne.n	80094f6 <USB_EPStartXfer+0x8aa>
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2250      	movs	r2, #80	; 0x50
 80094cc:	5a9b      	ldrh	r3, [r3, r2]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	001a      	movs	r2, r3
 80094d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094d4:	189b      	adds	r3, r3, r2
 80094d6:	673b      	str	r3, [r7, #112]	; 0x70
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	00da      	lsls	r2, r3, #3
 80094de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80094e0:	18d3      	adds	r3, r2, r3
 80094e2:	4a83      	ldr	r2, [pc, #524]	; (80096f0 <USB_EPStartXfer+0xaa4>)
 80094e4:	4694      	mov	ip, r2
 80094e6:	4463      	add	r3, ip
 80094e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80094ea:	1d7b      	adds	r3, r7, #5
 80094ec:	33ff      	adds	r3, #255	; 0xff
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094f4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80094f6:	2076      	movs	r0, #118	; 0x76
 80094f8:	183b      	adds	r3, r7, r0
 80094fa:	683a      	ldr	r2, [r7, #0]
 80094fc:	8952      	ldrh	r2, [r2, #10]
 80094fe:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	6959      	ldr	r1, [r3, #20]
 8009504:	1d7b      	adds	r3, r7, #5
 8009506:	33ff      	adds	r3, #255	; 0xff
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	b29c      	uxth	r4, r3
 800950c:	183b      	adds	r3, r7, r0
 800950e:	881a      	ldrh	r2, [r3, #0]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	0023      	movs	r3, r4
 8009514:	f000 fe0c 	bl	800a130 <USB_WritePMA>
 8009518:	e0ab      	b.n	8009672 <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	785b      	ldrb	r3, [r3, #1]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d000      	beq.n	8009524 <USB_EPStartXfer+0x8d8>
 8009522:	e070      	b.n	8009606 <USB_EPStartXfer+0x9ba>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2250      	movs	r2, #80	; 0x50
 800952c:	5a9b      	ldrh	r3, [r3, r2]
 800952e:	b29b      	uxth	r3, r3
 8009530:	001a      	movs	r2, r3
 8009532:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009534:	189b      	adds	r3, r3, r2
 8009536:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	00da      	lsls	r2, r3, #3
 800953e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009540:	18d3      	adds	r3, r2, r3
 8009542:	4a6d      	ldr	r2, [pc, #436]	; (80096f8 <USB_EPStartXfer+0xaac>)
 8009544:	4694      	mov	ip, r2
 8009546:	4463      	add	r3, ip
 8009548:	67bb      	str	r3, [r7, #120]	; 0x78
 800954a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800954c:	881b      	ldrh	r3, [r3, #0]
 800954e:	b29b      	uxth	r3, r3
 8009550:	059b      	lsls	r3, r3, #22
 8009552:	0d9b      	lsrs	r3, r3, #22
 8009554:	b29a      	uxth	r2, r3
 8009556:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009558:	801a      	strh	r2, [r3, #0]
 800955a:	1d7b      	adds	r3, r7, #5
 800955c:	33ff      	adds	r3, #255	; 0xff
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	2b3e      	cmp	r3, #62	; 0x3e
 8009562:	d922      	bls.n	80095aa <USB_EPStartXfer+0x95e>
 8009564:	1d7b      	adds	r3, r7, #5
 8009566:	33ff      	adds	r3, #255	; 0xff
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	095b      	lsrs	r3, r3, #5
 800956c:	21ec      	movs	r1, #236	; 0xec
 800956e:	187a      	adds	r2, r7, r1
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	1d7b      	adds	r3, r7, #5
 8009574:	33ff      	adds	r3, #255	; 0xff
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	221f      	movs	r2, #31
 800957a:	4013      	ands	r3, r2
 800957c:	d104      	bne.n	8009588 <USB_EPStartXfer+0x93c>
 800957e:	187b      	adds	r3, r7, r1
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	3b01      	subs	r3, #1
 8009584:	187a      	adds	r2, r7, r1
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800958a:	881b      	ldrh	r3, [r3, #0]
 800958c:	b29a      	uxth	r2, r3
 800958e:	23ec      	movs	r3, #236	; 0xec
 8009590:	18fb      	adds	r3, r7, r3
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	b29b      	uxth	r3, r3
 8009596:	029b      	lsls	r3, r3, #10
 8009598:	b29b      	uxth	r3, r3
 800959a:	4313      	orrs	r3, r2
 800959c:	b29b      	uxth	r3, r3
 800959e:	4a55      	ldr	r2, [pc, #340]	; (80096f4 <USB_EPStartXfer+0xaa8>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	b29a      	uxth	r2, r3
 80095a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095a6:	801a      	strh	r2, [r3, #0]
 80095a8:	e052      	b.n	8009650 <USB_EPStartXfer+0xa04>
 80095aa:	1d7b      	adds	r3, r7, #5
 80095ac:	33ff      	adds	r3, #255	; 0xff
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d108      	bne.n	80095c6 <USB_EPStartXfer+0x97a>
 80095b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095b6:	881b      	ldrh	r3, [r3, #0]
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	4a4e      	ldr	r2, [pc, #312]	; (80096f4 <USB_EPStartXfer+0xaa8>)
 80095bc:	4313      	orrs	r3, r2
 80095be:	b29a      	uxth	r2, r3
 80095c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095c2:	801a      	strh	r2, [r3, #0]
 80095c4:	e044      	b.n	8009650 <USB_EPStartXfer+0xa04>
 80095c6:	1d7b      	adds	r3, r7, #5
 80095c8:	33ff      	adds	r3, #255	; 0xff
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	085b      	lsrs	r3, r3, #1
 80095ce:	21ec      	movs	r1, #236	; 0xec
 80095d0:	187a      	adds	r2, r7, r1
 80095d2:	6013      	str	r3, [r2, #0]
 80095d4:	1d7b      	adds	r3, r7, #5
 80095d6:	33ff      	adds	r3, #255	; 0xff
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2201      	movs	r2, #1
 80095dc:	4013      	ands	r3, r2
 80095de:	d004      	beq.n	80095ea <USB_EPStartXfer+0x99e>
 80095e0:	187b      	adds	r3, r7, r1
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3301      	adds	r3, #1
 80095e6:	187a      	adds	r2, r7, r1
 80095e8:	6013      	str	r3, [r2, #0]
 80095ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095ec:	881b      	ldrh	r3, [r3, #0]
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	23ec      	movs	r3, #236	; 0xec
 80095f2:	18fb      	adds	r3, r7, r3
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	029b      	lsls	r3, r3, #10
 80095fa:	b29b      	uxth	r3, r3
 80095fc:	4313      	orrs	r3, r2
 80095fe:	b29a      	uxth	r2, r3
 8009600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009602:	801a      	strh	r2, [r3, #0]
 8009604:	e024      	b.n	8009650 <USB_EPStartXfer+0xa04>
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d120      	bne.n	8009650 <USB_EPStartXfer+0xa04>
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	2184      	movs	r1, #132	; 0x84
 8009612:	187a      	adds	r2, r7, r1
 8009614:	6013      	str	r3, [r2, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2250      	movs	r2, #80	; 0x50
 800961a:	5a9b      	ldrh	r3, [r3, r2]
 800961c:	b29b      	uxth	r3, r3
 800961e:	001a      	movs	r2, r3
 8009620:	187b      	adds	r3, r7, r1
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	189b      	adds	r3, r3, r2
 8009626:	187a      	adds	r2, r7, r1
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	00da      	lsls	r2, r3, #3
 8009630:	187b      	adds	r3, r7, r1
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	18d3      	adds	r3, r2, r3
 8009636:	4a30      	ldr	r2, [pc, #192]	; (80096f8 <USB_EPStartXfer+0xaac>)
 8009638:	4694      	mov	ip, r2
 800963a:	4463      	add	r3, ip
 800963c:	2180      	movs	r1, #128	; 0x80
 800963e:	187a      	adds	r2, r7, r1
 8009640:	6013      	str	r3, [r2, #0]
 8009642:	1d7b      	adds	r3, r7, #5
 8009644:	33ff      	adds	r3, #255	; 0xff
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	b29a      	uxth	r2, r3
 800964a:	187b      	adds	r3, r7, r1
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009650:	2076      	movs	r0, #118	; 0x76
 8009652:	183b      	adds	r3, r7, r0
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	8912      	ldrh	r2, [r2, #8]
 8009658:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	6959      	ldr	r1, [r3, #20]
 800965e:	1d7b      	adds	r3, r7, #5
 8009660:	33ff      	adds	r3, #255	; 0xff
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	b29c      	uxth	r4, r3
 8009666:	183b      	adds	r3, r7, r0
 8009668:	881a      	ldrh	r2, [r3, #0]
 800966a:	6878      	ldr	r0, [r7, #4]
 800966c:	0023      	movs	r3, r4
 800966e:	f000 fd5f 	bl	800a130 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	781b      	ldrb	r3, [r3, #0]
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	18d3      	adds	r3, r2, r3
 800967c:	881b      	ldrh	r3, [r3, #0]
 800967e:	b29a      	uxth	r2, r3
 8009680:	200a      	movs	r0, #10
 8009682:	183b      	adds	r3, r7, r0
 8009684:	491d      	ldr	r1, [pc, #116]	; (80096fc <USB_EPStartXfer+0xab0>)
 8009686:	400a      	ands	r2, r1
 8009688:	801a      	strh	r2, [r3, #0]
 800968a:	183b      	adds	r3, r7, r0
 800968c:	183a      	adds	r2, r7, r0
 800968e:	8812      	ldrh	r2, [r2, #0]
 8009690:	2110      	movs	r1, #16
 8009692:	404a      	eors	r2, r1
 8009694:	801a      	strh	r2, [r3, #0]
 8009696:	183b      	adds	r3, r7, r0
 8009698:	183a      	adds	r2, r7, r0
 800969a:	8812      	ldrh	r2, [r2, #0]
 800969c:	2120      	movs	r1, #32
 800969e:	404a      	eors	r2, r1
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	687a      	ldr	r2, [r7, #4]
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	781b      	ldrb	r3, [r3, #0]
 80096a8:	009b      	lsls	r3, r3, #2
 80096aa:	18d3      	adds	r3, r2, r3
 80096ac:	183a      	adds	r2, r7, r0
 80096ae:	8812      	ldrh	r2, [r2, #0]
 80096b0:	4913      	ldr	r1, [pc, #76]	; (8009700 <USB_EPStartXfer+0xab4>)
 80096b2:	430a      	orrs	r2, r1
 80096b4:	b292      	uxth	r2, r2
 80096b6:	801a      	strh	r2, [r3, #0]
 80096b8:	f000 fbf4 	bl	8009ea4 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	7b1b      	ldrb	r3, [r3, #12]
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d000      	beq.n	80096c6 <USB_EPStartXfer+0xa7a>
 80096c4:	e0a9      	b.n	800981a <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	699a      	ldr	r2, [r3, #24]
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d918      	bls.n	8009704 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	1d7a      	adds	r2, r7, #5
 80096d8:	32ff      	adds	r2, #255	; 0xff
 80096da:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	699a      	ldr	r2, [r3, #24]
 80096e0:	1d7b      	adds	r3, r7, #5
 80096e2:	33ff      	adds	r3, #255	; 0xff
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	1ad2      	subs	r2, r2, r3
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	619a      	str	r2, [r3, #24]
 80096ec:	e012      	b.n	8009714 <USB_EPStartXfer+0xac8>
 80096ee:	46c0      	nop			; (mov r8, r8)
 80096f0:	00000406 	.word	0x00000406
 80096f4:	ffff8000 	.word	0xffff8000
 80096f8:	00000402 	.word	0x00000402
 80096fc:	ffff8fbf 	.word	0xffff8fbf
 8009700:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	699b      	ldr	r3, [r3, #24]
 8009708:	1d7a      	adds	r2, r7, #5
 800970a:	32ff      	adds	r2, #255	; 0xff
 800970c:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800970e:	683b      	ldr	r3, [r7, #0]
 8009710:	2200      	movs	r2, #0
 8009712:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2190      	movs	r1, #144	; 0x90
 8009718:	187a      	adds	r2, r7, r1
 800971a:	6013      	str	r3, [r2, #0]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2250      	movs	r2, #80	; 0x50
 8009720:	5a9b      	ldrh	r3, [r3, r2]
 8009722:	b29b      	uxth	r3, r3
 8009724:	001a      	movs	r2, r3
 8009726:	187b      	adds	r3, r7, r1
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	189b      	adds	r3, r3, r2
 800972c:	187a      	adds	r2, r7, r1
 800972e:	6013      	str	r3, [r2, #0]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	00da      	lsls	r2, r3, #3
 8009736:	187b      	adds	r3, r7, r1
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	18d3      	adds	r3, r2, r3
 800973c:	4acf      	ldr	r2, [pc, #828]	; (8009a7c <USB_EPStartXfer+0xe30>)
 800973e:	4694      	mov	ip, r2
 8009740:	4463      	add	r3, ip
 8009742:	218c      	movs	r1, #140	; 0x8c
 8009744:	187a      	adds	r2, r7, r1
 8009746:	6013      	str	r3, [r2, #0]
 8009748:	187b      	adds	r3, r7, r1
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	881b      	ldrh	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	059b      	lsls	r3, r3, #22
 8009752:	0d9b      	lsrs	r3, r3, #22
 8009754:	b29a      	uxth	r2, r3
 8009756:	187b      	adds	r3, r7, r1
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	801a      	strh	r2, [r3, #0]
 800975c:	1d7b      	adds	r3, r7, #5
 800975e:	33ff      	adds	r3, #255	; 0xff
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b3e      	cmp	r3, #62	; 0x3e
 8009764:	d925      	bls.n	80097b2 <USB_EPStartXfer+0xb66>
 8009766:	1d7b      	adds	r3, r7, #5
 8009768:	33ff      	adds	r3, #255	; 0xff
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	095b      	lsrs	r3, r3, #5
 800976e:	21e8      	movs	r1, #232	; 0xe8
 8009770:	187a      	adds	r2, r7, r1
 8009772:	6013      	str	r3, [r2, #0]
 8009774:	1d7b      	adds	r3, r7, #5
 8009776:	33ff      	adds	r3, #255	; 0xff
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	221f      	movs	r2, #31
 800977c:	4013      	ands	r3, r2
 800977e:	d104      	bne.n	800978a <USB_EPStartXfer+0xb3e>
 8009780:	187b      	adds	r3, r7, r1
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	3b01      	subs	r3, #1
 8009786:	187a      	adds	r2, r7, r1
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	218c      	movs	r1, #140	; 0x8c
 800978c:	187b      	adds	r3, r7, r1
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	881b      	ldrh	r3, [r3, #0]
 8009792:	b29a      	uxth	r2, r3
 8009794:	23e8      	movs	r3, #232	; 0xe8
 8009796:	18fb      	adds	r3, r7, r3
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	b29b      	uxth	r3, r3
 800979c:	029b      	lsls	r3, r3, #10
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4313      	orrs	r3, r2
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	4ab6      	ldr	r2, [pc, #728]	; (8009a80 <USB_EPStartXfer+0xe34>)
 80097a6:	4313      	orrs	r3, r2
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	187b      	adds	r3, r7, r1
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	801a      	strh	r2, [r3, #0]
 80097b0:	e353      	b.n	8009e5a <USB_EPStartXfer+0x120e>
 80097b2:	1d7b      	adds	r3, r7, #5
 80097b4:	33ff      	adds	r3, #255	; 0xff
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10b      	bne.n	80097d4 <USB_EPStartXfer+0xb88>
 80097bc:	218c      	movs	r1, #140	; 0x8c
 80097be:	187b      	adds	r3, r7, r1
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	4aae      	ldr	r2, [pc, #696]	; (8009a80 <USB_EPStartXfer+0xe34>)
 80097c8:	4313      	orrs	r3, r2
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	187b      	adds	r3, r7, r1
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	e342      	b.n	8009e5a <USB_EPStartXfer+0x120e>
 80097d4:	1d7b      	adds	r3, r7, #5
 80097d6:	33ff      	adds	r3, #255	; 0xff
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	085b      	lsrs	r3, r3, #1
 80097dc:	21e8      	movs	r1, #232	; 0xe8
 80097de:	187a      	adds	r2, r7, r1
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	1d7b      	adds	r3, r7, #5
 80097e4:	33ff      	adds	r3, #255	; 0xff
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2201      	movs	r2, #1
 80097ea:	4013      	ands	r3, r2
 80097ec:	d004      	beq.n	80097f8 <USB_EPStartXfer+0xbac>
 80097ee:	187b      	adds	r3, r7, r1
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3301      	adds	r3, #1
 80097f4:	187a      	adds	r2, r7, r1
 80097f6:	6013      	str	r3, [r2, #0]
 80097f8:	218c      	movs	r1, #140	; 0x8c
 80097fa:	187b      	adds	r3, r7, r1
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	881b      	ldrh	r3, [r3, #0]
 8009800:	b29a      	uxth	r2, r3
 8009802:	23e8      	movs	r3, #232	; 0xe8
 8009804:	18fb      	adds	r3, r7, r3
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	b29b      	uxth	r3, r3
 800980a:	029b      	lsls	r3, r3, #10
 800980c:	b29b      	uxth	r3, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	b29a      	uxth	r2, r3
 8009812:	187b      	adds	r3, r7, r1
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	801a      	strh	r2, [r3, #0]
 8009818:	e31f      	b.n	8009e5a <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	78db      	ldrb	r3, [r3, #3]
 800981e:	2b02      	cmp	r3, #2
 8009820:	d000      	beq.n	8009824 <USB_EPStartXfer+0xbd8>
 8009822:	e191      	b.n	8009b48 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	785b      	ldrb	r3, [r3, #1]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d000      	beq.n	800982e <USB_EPStartXfer+0xbe2>
 800982c:	e07c      	b.n	8009928 <USB_EPStartXfer+0xcdc>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	21ac      	movs	r1, #172	; 0xac
 8009832:	187a      	adds	r2, r7, r1
 8009834:	6013      	str	r3, [r2, #0]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2250      	movs	r2, #80	; 0x50
 800983a:	5a9b      	ldrh	r3, [r3, r2]
 800983c:	b29b      	uxth	r3, r3
 800983e:	001a      	movs	r2, r3
 8009840:	187b      	adds	r3, r7, r1
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	189b      	adds	r3, r3, r2
 8009846:	187a      	adds	r2, r7, r1
 8009848:	6013      	str	r3, [r2, #0]
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	00da      	lsls	r2, r3, #3
 8009850:	187b      	adds	r3, r7, r1
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	18d3      	adds	r3, r2, r3
 8009856:	4a8b      	ldr	r2, [pc, #556]	; (8009a84 <USB_EPStartXfer+0xe38>)
 8009858:	4694      	mov	ip, r2
 800985a:	4463      	add	r3, ip
 800985c:	21a8      	movs	r1, #168	; 0xa8
 800985e:	187a      	adds	r2, r7, r1
 8009860:	6013      	str	r3, [r2, #0]
 8009862:	187b      	adds	r3, r7, r1
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	881b      	ldrh	r3, [r3, #0]
 8009868:	b29b      	uxth	r3, r3
 800986a:	059b      	lsls	r3, r3, #22
 800986c:	0d9b      	lsrs	r3, r3, #22
 800986e:	b29a      	uxth	r2, r3
 8009870:	187b      	adds	r3, r7, r1
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	801a      	strh	r2, [r3, #0]
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b3e      	cmp	r3, #62	; 0x3e
 800987c:	d923      	bls.n	80098c6 <USB_EPStartXfer+0xc7a>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	095b      	lsrs	r3, r3, #5
 8009884:	21e4      	movs	r1, #228	; 0xe4
 8009886:	187a      	adds	r2, r7, r1
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	221f      	movs	r2, #31
 8009890:	4013      	ands	r3, r2
 8009892:	d104      	bne.n	800989e <USB_EPStartXfer+0xc52>
 8009894:	187b      	adds	r3, r7, r1
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3b01      	subs	r3, #1
 800989a:	187a      	adds	r2, r7, r1
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	21a8      	movs	r1, #168	; 0xa8
 80098a0:	187b      	adds	r3, r7, r1
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	881b      	ldrh	r3, [r3, #0]
 80098a6:	b29a      	uxth	r2, r3
 80098a8:	23e4      	movs	r3, #228	; 0xe4
 80098aa:	18fb      	adds	r3, r7, r3
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	029b      	lsls	r3, r3, #10
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	4313      	orrs	r3, r2
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4a71      	ldr	r2, [pc, #452]	; (8009a80 <USB_EPStartXfer+0xe34>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	b29a      	uxth	r2, r3
 80098be:	187b      	adds	r3, r7, r1
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	801a      	strh	r2, [r3, #0]
 80098c4:	e054      	b.n	8009970 <USB_EPStartXfer+0xd24>
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	691b      	ldr	r3, [r3, #16]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10b      	bne.n	80098e6 <USB_EPStartXfer+0xc9a>
 80098ce:	21a8      	movs	r1, #168	; 0xa8
 80098d0:	187b      	adds	r3, r7, r1
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	881b      	ldrh	r3, [r3, #0]
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4a69      	ldr	r2, [pc, #420]	; (8009a80 <USB_EPStartXfer+0xe34>)
 80098da:	4313      	orrs	r3, r2
 80098dc:	b29a      	uxth	r2, r3
 80098de:	187b      	adds	r3, r7, r1
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	e044      	b.n	8009970 <USB_EPStartXfer+0xd24>
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	691b      	ldr	r3, [r3, #16]
 80098ea:	085b      	lsrs	r3, r3, #1
 80098ec:	21e4      	movs	r1, #228	; 0xe4
 80098ee:	187a      	adds	r2, r7, r1
 80098f0:	6013      	str	r3, [r2, #0]
 80098f2:	683b      	ldr	r3, [r7, #0]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	2201      	movs	r2, #1
 80098f8:	4013      	ands	r3, r2
 80098fa:	d004      	beq.n	8009906 <USB_EPStartXfer+0xcba>
 80098fc:	187b      	adds	r3, r7, r1
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	3301      	adds	r3, #1
 8009902:	187a      	adds	r2, r7, r1
 8009904:	6013      	str	r3, [r2, #0]
 8009906:	21a8      	movs	r1, #168	; 0xa8
 8009908:	187b      	adds	r3, r7, r1
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	881b      	ldrh	r3, [r3, #0]
 800990e:	b29a      	uxth	r2, r3
 8009910:	23e4      	movs	r3, #228	; 0xe4
 8009912:	18fb      	adds	r3, r7, r3
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	b29b      	uxth	r3, r3
 8009918:	029b      	lsls	r3, r3, #10
 800991a:	b29b      	uxth	r3, r3
 800991c:	4313      	orrs	r3, r2
 800991e:	b29a      	uxth	r2, r3
 8009920:	187b      	adds	r3, r7, r1
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	801a      	strh	r2, [r3, #0]
 8009926:	e023      	b.n	8009970 <USB_EPStartXfer+0xd24>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	785b      	ldrb	r3, [r3, #1]
 800992c:	2b01      	cmp	r3, #1
 800992e:	d11f      	bne.n	8009970 <USB_EPStartXfer+0xd24>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	21b4      	movs	r1, #180	; 0xb4
 8009934:	187a      	adds	r2, r7, r1
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2250      	movs	r2, #80	; 0x50
 800993c:	5a9b      	ldrh	r3, [r3, r2]
 800993e:	b29b      	uxth	r3, r3
 8009940:	001a      	movs	r2, r3
 8009942:	187b      	adds	r3, r7, r1
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	189b      	adds	r3, r3, r2
 8009948:	187a      	adds	r2, r7, r1
 800994a:	6013      	str	r3, [r2, #0]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	00da      	lsls	r2, r3, #3
 8009952:	187b      	adds	r3, r7, r1
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	18d3      	adds	r3, r2, r3
 8009958:	4a4a      	ldr	r2, [pc, #296]	; (8009a84 <USB_EPStartXfer+0xe38>)
 800995a:	4694      	mov	ip, r2
 800995c:	4463      	add	r3, ip
 800995e:	21b0      	movs	r1, #176	; 0xb0
 8009960:	187a      	adds	r2, r7, r1
 8009962:	6013      	str	r3, [r2, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	b29a      	uxth	r2, r3
 800996a:	187b      	adds	r3, r7, r1
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	801a      	strh	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	22a4      	movs	r2, #164	; 0xa4
 8009974:	18ba      	adds	r2, r7, r2
 8009976:	6013      	str	r3, [r2, #0]
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d000      	beq.n	8009982 <USB_EPStartXfer+0xd36>
 8009980:	e082      	b.n	8009a88 <USB_EPStartXfer+0xe3c>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	219c      	movs	r1, #156	; 0x9c
 8009986:	187a      	adds	r2, r7, r1
 8009988:	6013      	str	r3, [r2, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2250      	movs	r2, #80	; 0x50
 800998e:	5a9b      	ldrh	r3, [r3, r2]
 8009990:	b29b      	uxth	r3, r3
 8009992:	001a      	movs	r2, r3
 8009994:	187b      	adds	r3, r7, r1
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	189b      	adds	r3, r3, r2
 800999a:	187a      	adds	r2, r7, r1
 800999c:	6013      	str	r3, [r2, #0]
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	00da      	lsls	r2, r3, #3
 80099a4:	187b      	adds	r3, r7, r1
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	18d3      	adds	r3, r2, r3
 80099aa:	4a34      	ldr	r2, [pc, #208]	; (8009a7c <USB_EPStartXfer+0xe30>)
 80099ac:	4694      	mov	ip, r2
 80099ae:	4463      	add	r3, ip
 80099b0:	2198      	movs	r1, #152	; 0x98
 80099b2:	187a      	adds	r2, r7, r1
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	187b      	adds	r3, r7, r1
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	881b      	ldrh	r3, [r3, #0]
 80099bc:	b29b      	uxth	r3, r3
 80099be:	059b      	lsls	r3, r3, #22
 80099c0:	0d9b      	lsrs	r3, r3, #22
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	187b      	adds	r3, r7, r1
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	801a      	strh	r2, [r3, #0]
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	2b3e      	cmp	r3, #62	; 0x3e
 80099d0:	d923      	bls.n	8009a1a <USB_EPStartXfer+0xdce>
 80099d2:	683b      	ldr	r3, [r7, #0]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	095b      	lsrs	r3, r3, #5
 80099d8:	21e0      	movs	r1, #224	; 0xe0
 80099da:	187a      	adds	r2, r7, r1
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	691b      	ldr	r3, [r3, #16]
 80099e2:	221f      	movs	r2, #31
 80099e4:	4013      	ands	r3, r2
 80099e6:	d104      	bne.n	80099f2 <USB_EPStartXfer+0xda6>
 80099e8:	187b      	adds	r3, r7, r1
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	3b01      	subs	r3, #1
 80099ee:	187a      	adds	r2, r7, r1
 80099f0:	6013      	str	r3, [r2, #0]
 80099f2:	2198      	movs	r1, #152	; 0x98
 80099f4:	187b      	adds	r3, r7, r1
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	b29a      	uxth	r2, r3
 80099fc:	23e0      	movs	r3, #224	; 0xe0
 80099fe:	18fb      	adds	r3, r7, r3
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	b29b      	uxth	r3, r3
 8009a04:	029b      	lsls	r3, r3, #10
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	4a1c      	ldr	r2, [pc, #112]	; (8009a80 <USB_EPStartXfer+0xe34>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	187b      	adds	r3, r7, r1
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	801a      	strh	r2, [r3, #0]
 8009a18:	e057      	b.n	8009aca <USB_EPStartXfer+0xe7e>
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10b      	bne.n	8009a3a <USB_EPStartXfer+0xdee>
 8009a22:	2198      	movs	r1, #152	; 0x98
 8009a24:	187b      	adds	r3, r7, r1
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	881b      	ldrh	r3, [r3, #0]
 8009a2a:	b29b      	uxth	r3, r3
 8009a2c:	4a14      	ldr	r2, [pc, #80]	; (8009a80 <USB_EPStartXfer+0xe34>)
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	b29a      	uxth	r2, r3
 8009a32:	187b      	adds	r3, r7, r1
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	801a      	strh	r2, [r3, #0]
 8009a38:	e047      	b.n	8009aca <USB_EPStartXfer+0xe7e>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	085b      	lsrs	r3, r3, #1
 8009a40:	21e0      	movs	r1, #224	; 0xe0
 8009a42:	187a      	adds	r2, r7, r1
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	691b      	ldr	r3, [r3, #16]
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	4013      	ands	r3, r2
 8009a4e:	d004      	beq.n	8009a5a <USB_EPStartXfer+0xe0e>
 8009a50:	187b      	adds	r3, r7, r1
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	3301      	adds	r3, #1
 8009a56:	187a      	adds	r2, r7, r1
 8009a58:	6013      	str	r3, [r2, #0]
 8009a5a:	2198      	movs	r1, #152	; 0x98
 8009a5c:	187b      	adds	r3, r7, r1
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	b29a      	uxth	r2, r3
 8009a64:	23e0      	movs	r3, #224	; 0xe0
 8009a66:	18fb      	adds	r3, r7, r3
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	029b      	lsls	r3, r3, #10
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	4313      	orrs	r3, r2
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	187b      	adds	r3, r7, r1
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	801a      	strh	r2, [r3, #0]
 8009a7a:	e026      	b.n	8009aca <USB_EPStartXfer+0xe7e>
 8009a7c:	00000406 	.word	0x00000406
 8009a80:	ffff8000 	.word	0xffff8000
 8009a84:	00000402 	.word	0x00000402
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	785b      	ldrb	r3, [r3, #1]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d11c      	bne.n	8009aca <USB_EPStartXfer+0xe7e>
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2250      	movs	r2, #80	; 0x50
 8009a94:	5a9b      	ldrh	r3, [r3, r2]
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	001a      	movs	r2, r3
 8009a9a:	21a4      	movs	r1, #164	; 0xa4
 8009a9c:	187b      	adds	r3, r7, r1
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	189b      	adds	r3, r3, r2
 8009aa2:	187a      	adds	r2, r7, r1
 8009aa4:	6013      	str	r3, [r2, #0]
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	781b      	ldrb	r3, [r3, #0]
 8009aaa:	00da      	lsls	r2, r3, #3
 8009aac:	187b      	adds	r3, r7, r1
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	18d3      	adds	r3, r2, r3
 8009ab2:	4ad2      	ldr	r2, [pc, #840]	; (8009dfc <USB_EPStartXfer+0x11b0>)
 8009ab4:	4694      	mov	ip, r2
 8009ab6:	4463      	add	r3, ip
 8009ab8:	21a0      	movs	r1, #160	; 0xa0
 8009aba:	187a      	adds	r2, r7, r1
 8009abc:	6013      	str	r3, [r2, #0]
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	691b      	ldr	r3, [r3, #16]
 8009ac2:	b29a      	uxth	r2, r3
 8009ac4:	187b      	adds	r3, r7, r1
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	69db      	ldr	r3, [r3, #28]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d100      	bne.n	8009ad4 <USB_EPStartXfer+0xe88>
 8009ad2:	e1c2      	b.n	8009e5a <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	683b      	ldr	r3, [r7, #0]
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	18d2      	adds	r2, r2, r3
 8009ade:	2196      	movs	r1, #150	; 0x96
 8009ae0:	187b      	adds	r3, r7, r1
 8009ae2:	8812      	ldrh	r2, [r2, #0]
 8009ae4:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009ae6:	187b      	adds	r3, r7, r1
 8009ae8:	881a      	ldrh	r2, [r3, #0]
 8009aea:	2380      	movs	r3, #128	; 0x80
 8009aec:	01db      	lsls	r3, r3, #7
 8009aee:	4013      	ands	r3, r2
 8009af0:	d004      	beq.n	8009afc <USB_EPStartXfer+0xeb0>
 8009af2:	187b      	adds	r3, r7, r1
 8009af4:	881b      	ldrh	r3, [r3, #0]
 8009af6:	2240      	movs	r2, #64	; 0x40
 8009af8:	4013      	ands	r3, r2
 8009afa:	d10d      	bne.n	8009b18 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009afc:	2196      	movs	r1, #150	; 0x96
 8009afe:	187b      	adds	r3, r7, r1
 8009b00:	881a      	ldrh	r2, [r3, #0]
 8009b02:	2380      	movs	r3, #128	; 0x80
 8009b04:	01db      	lsls	r3, r3, #7
 8009b06:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b08:	d000      	beq.n	8009b0c <USB_EPStartXfer+0xec0>
 8009b0a:	e1a6      	b.n	8009e5a <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b0c:	187b      	adds	r3, r7, r1
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	2240      	movs	r2, #64	; 0x40
 8009b12:	4013      	ands	r3, r2
 8009b14:	d000      	beq.n	8009b18 <USB_EPStartXfer+0xecc>
 8009b16:	e1a0      	b.n	8009e5a <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	781b      	ldrb	r3, [r3, #0]
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	18d3      	adds	r3, r2, r3
 8009b22:	881b      	ldrh	r3, [r3, #0]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	2094      	movs	r0, #148	; 0x94
 8009b28:	183b      	adds	r3, r7, r0
 8009b2a:	49b5      	ldr	r1, [pc, #724]	; (8009e00 <USB_EPStartXfer+0x11b4>)
 8009b2c:	400a      	ands	r2, r1
 8009b2e:	801a      	strh	r2, [r3, #0]
 8009b30:	687a      	ldr	r2, [r7, #4]
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	18d3      	adds	r3, r2, r3
 8009b3a:	183a      	adds	r2, r7, r0
 8009b3c:	8812      	ldrh	r2, [r2, #0]
 8009b3e:	49b1      	ldr	r1, [pc, #708]	; (8009e04 <USB_EPStartXfer+0x11b8>)
 8009b40:	430a      	orrs	r2, r1
 8009b42:	b292      	uxth	r2, r2
 8009b44:	801a      	strh	r2, [r3, #0]
 8009b46:	e188      	b.n	8009e5a <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	78db      	ldrb	r3, [r3, #3]
 8009b4c:	2b01      	cmp	r3, #1
 8009b4e:	d000      	beq.n	8009b52 <USB_EPStartXfer+0xf06>
 8009b50:	e181      	b.n	8009e56 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	699a      	ldr	r2, [r3, #24]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	691b      	ldr	r3, [r3, #16]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d90d      	bls.n	8009b7a <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	1d7a      	adds	r2, r7, #5
 8009b64:	32ff      	adds	r2, #255	; 0xff
 8009b66:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	699a      	ldr	r2, [r3, #24]
 8009b6c:	1d7b      	adds	r3, r7, #5
 8009b6e:	33ff      	adds	r3, #255	; 0xff
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	1ad2      	subs	r2, r2, r3
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	619a      	str	r2, [r3, #24]
 8009b78:	e007      	b.n	8009b8a <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	1d7a      	adds	r2, r7, #5
 8009b80:	32ff      	adds	r2, #255	; 0xff
 8009b82:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8009b84:	683b      	ldr	r3, [r7, #0]
 8009b86:	2200      	movs	r2, #0
 8009b88:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	785b      	ldrb	r3, [r3, #1]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d000      	beq.n	8009b94 <USB_EPStartXfer+0xf48>
 8009b92:	e082      	b.n	8009c9a <USB_EPStartXfer+0x104e>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	21cc      	movs	r1, #204	; 0xcc
 8009b98:	187a      	adds	r2, r7, r1
 8009b9a:	6013      	str	r3, [r2, #0]
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2250      	movs	r2, #80	; 0x50
 8009ba0:	5a9b      	ldrh	r3, [r3, r2]
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	001a      	movs	r2, r3
 8009ba6:	187b      	adds	r3, r7, r1
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	189b      	adds	r3, r3, r2
 8009bac:	187a      	adds	r2, r7, r1
 8009bae:	6013      	str	r3, [r2, #0]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	00da      	lsls	r2, r3, #3
 8009bb6:	187b      	adds	r3, r7, r1
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	18d3      	adds	r3, r2, r3
 8009bbc:	4a92      	ldr	r2, [pc, #584]	; (8009e08 <USB_EPStartXfer+0x11bc>)
 8009bbe:	4694      	mov	ip, r2
 8009bc0:	4463      	add	r3, ip
 8009bc2:	21c8      	movs	r1, #200	; 0xc8
 8009bc4:	187a      	adds	r2, r7, r1
 8009bc6:	6013      	str	r3, [r2, #0]
 8009bc8:	187b      	adds	r3, r7, r1
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	881b      	ldrh	r3, [r3, #0]
 8009bce:	b29b      	uxth	r3, r3
 8009bd0:	059b      	lsls	r3, r3, #22
 8009bd2:	0d9b      	lsrs	r3, r3, #22
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	187b      	adds	r3, r7, r1
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	801a      	strh	r2, [r3, #0]
 8009bdc:	1d7b      	adds	r3, r7, #5
 8009bde:	33ff      	adds	r3, #255	; 0xff
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2b3e      	cmp	r3, #62	; 0x3e
 8009be4:	d925      	bls.n	8009c32 <USB_EPStartXfer+0xfe6>
 8009be6:	1d7b      	adds	r3, r7, #5
 8009be8:	33ff      	adds	r3, #255	; 0xff
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	21dc      	movs	r1, #220	; 0xdc
 8009bf0:	187a      	adds	r2, r7, r1
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	1d7b      	adds	r3, r7, #5
 8009bf6:	33ff      	adds	r3, #255	; 0xff
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	221f      	movs	r2, #31
 8009bfc:	4013      	ands	r3, r2
 8009bfe:	d104      	bne.n	8009c0a <USB_EPStartXfer+0xfbe>
 8009c00:	187b      	adds	r3, r7, r1
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3b01      	subs	r3, #1
 8009c06:	187a      	adds	r2, r7, r1
 8009c08:	6013      	str	r3, [r2, #0]
 8009c0a:	21c8      	movs	r1, #200	; 0xc8
 8009c0c:	187b      	adds	r3, r7, r1
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	881b      	ldrh	r3, [r3, #0]
 8009c12:	b29a      	uxth	r2, r3
 8009c14:	23dc      	movs	r3, #220	; 0xdc
 8009c16:	18fb      	adds	r3, r7, r3
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	b29b      	uxth	r3, r3
 8009c1c:	029b      	lsls	r3, r3, #10
 8009c1e:	b29b      	uxth	r3, r3
 8009c20:	4313      	orrs	r3, r2
 8009c22:	b29b      	uxth	r3, r3
 8009c24:	4a79      	ldr	r2, [pc, #484]	; (8009e0c <USB_EPStartXfer+0x11c0>)
 8009c26:	4313      	orrs	r3, r2
 8009c28:	b29a      	uxth	r2, r3
 8009c2a:	187b      	adds	r3, r7, r1
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	801a      	strh	r2, [r3, #0]
 8009c30:	e058      	b.n	8009ce4 <USB_EPStartXfer+0x1098>
 8009c32:	1d7b      	adds	r3, r7, #5
 8009c34:	33ff      	adds	r3, #255	; 0xff
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d10b      	bne.n	8009c54 <USB_EPStartXfer+0x1008>
 8009c3c:	21c8      	movs	r1, #200	; 0xc8
 8009c3e:	187b      	adds	r3, r7, r1
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	4a71      	ldr	r2, [pc, #452]	; (8009e0c <USB_EPStartXfer+0x11c0>)
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	b29a      	uxth	r2, r3
 8009c4c:	187b      	adds	r3, r7, r1
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	801a      	strh	r2, [r3, #0]
 8009c52:	e047      	b.n	8009ce4 <USB_EPStartXfer+0x1098>
 8009c54:	1d7b      	adds	r3, r7, #5
 8009c56:	33ff      	adds	r3, #255	; 0xff
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	085b      	lsrs	r3, r3, #1
 8009c5c:	21dc      	movs	r1, #220	; 0xdc
 8009c5e:	187a      	adds	r2, r7, r1
 8009c60:	6013      	str	r3, [r2, #0]
 8009c62:	1d7b      	adds	r3, r7, #5
 8009c64:	33ff      	adds	r3, #255	; 0xff
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2201      	movs	r2, #1
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	d004      	beq.n	8009c78 <USB_EPStartXfer+0x102c>
 8009c6e:	187b      	adds	r3, r7, r1
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3301      	adds	r3, #1
 8009c74:	187a      	adds	r2, r7, r1
 8009c76:	6013      	str	r3, [r2, #0]
 8009c78:	21c8      	movs	r1, #200	; 0xc8
 8009c7a:	187b      	adds	r3, r7, r1
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	881b      	ldrh	r3, [r3, #0]
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	23dc      	movs	r3, #220	; 0xdc
 8009c84:	18fb      	adds	r3, r7, r3
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	029b      	lsls	r3, r3, #10
 8009c8c:	b29b      	uxth	r3, r3
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	b29a      	uxth	r2, r3
 8009c92:	187b      	adds	r3, r7, r1
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	801a      	strh	r2, [r3, #0]
 8009c98:	e024      	b.n	8009ce4 <USB_EPStartXfer+0x1098>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	785b      	ldrb	r3, [r3, #1]
 8009c9e:	2b01      	cmp	r3, #1
 8009ca0:	d120      	bne.n	8009ce4 <USB_EPStartXfer+0x1098>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	21d4      	movs	r1, #212	; 0xd4
 8009ca6:	187a      	adds	r2, r7, r1
 8009ca8:	6013      	str	r3, [r2, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	2250      	movs	r2, #80	; 0x50
 8009cae:	5a9b      	ldrh	r3, [r3, r2]
 8009cb0:	b29b      	uxth	r3, r3
 8009cb2:	001a      	movs	r2, r3
 8009cb4:	187b      	adds	r3, r7, r1
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	189b      	adds	r3, r3, r2
 8009cba:	187a      	adds	r2, r7, r1
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	781b      	ldrb	r3, [r3, #0]
 8009cc2:	00da      	lsls	r2, r3, #3
 8009cc4:	187b      	adds	r3, r7, r1
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	18d3      	adds	r3, r2, r3
 8009cca:	4a4f      	ldr	r2, [pc, #316]	; (8009e08 <USB_EPStartXfer+0x11bc>)
 8009ccc:	4694      	mov	ip, r2
 8009cce:	4463      	add	r3, ip
 8009cd0:	21d0      	movs	r1, #208	; 0xd0
 8009cd2:	187a      	adds	r2, r7, r1
 8009cd4:	6013      	str	r3, [r2, #0]
 8009cd6:	1d7b      	adds	r3, r7, #5
 8009cd8:	33ff      	adds	r3, #255	; 0xff
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	b29a      	uxth	r2, r3
 8009cde:	187b      	adds	r3, r7, r1
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	801a      	strh	r2, [r3, #0]
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	22c4      	movs	r2, #196	; 0xc4
 8009ce8:	18ba      	adds	r2, r7, r2
 8009cea:	6013      	str	r3, [r2, #0]
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	785b      	ldrb	r3, [r3, #1]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d000      	beq.n	8009cf6 <USB_EPStartXfer+0x10aa>
 8009cf4:	e08c      	b.n	8009e10 <USB_EPStartXfer+0x11c4>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	21bc      	movs	r1, #188	; 0xbc
 8009cfa:	187a      	adds	r2, r7, r1
 8009cfc:	6013      	str	r3, [r2, #0]
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2250      	movs	r2, #80	; 0x50
 8009d02:	5a9b      	ldrh	r3, [r3, r2]
 8009d04:	b29b      	uxth	r3, r3
 8009d06:	001a      	movs	r2, r3
 8009d08:	187b      	adds	r3, r7, r1
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	189b      	adds	r3, r3, r2
 8009d0e:	187a      	adds	r2, r7, r1
 8009d10:	6013      	str	r3, [r2, #0]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	00da      	lsls	r2, r3, #3
 8009d18:	187b      	adds	r3, r7, r1
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	18d3      	adds	r3, r2, r3
 8009d1e:	4a37      	ldr	r2, [pc, #220]	; (8009dfc <USB_EPStartXfer+0x11b0>)
 8009d20:	4694      	mov	ip, r2
 8009d22:	4463      	add	r3, ip
 8009d24:	21b8      	movs	r1, #184	; 0xb8
 8009d26:	187a      	adds	r2, r7, r1
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	187b      	adds	r3, r7, r1
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	881b      	ldrh	r3, [r3, #0]
 8009d30:	b29b      	uxth	r3, r3
 8009d32:	059b      	lsls	r3, r3, #22
 8009d34:	0d9b      	lsrs	r3, r3, #22
 8009d36:	b29a      	uxth	r2, r3
 8009d38:	187b      	adds	r3, r7, r1
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	801a      	strh	r2, [r3, #0]
 8009d3e:	1d7b      	adds	r3, r7, #5
 8009d40:	33ff      	adds	r3, #255	; 0xff
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	2b3e      	cmp	r3, #62	; 0x3e
 8009d46:	d925      	bls.n	8009d94 <USB_EPStartXfer+0x1148>
 8009d48:	1d7b      	adds	r3, r7, #5
 8009d4a:	33ff      	adds	r3, #255	; 0xff
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	095b      	lsrs	r3, r3, #5
 8009d50:	21d8      	movs	r1, #216	; 0xd8
 8009d52:	187a      	adds	r2, r7, r1
 8009d54:	6013      	str	r3, [r2, #0]
 8009d56:	1d7b      	adds	r3, r7, #5
 8009d58:	33ff      	adds	r3, #255	; 0xff
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	221f      	movs	r2, #31
 8009d5e:	4013      	ands	r3, r2
 8009d60:	d104      	bne.n	8009d6c <USB_EPStartXfer+0x1120>
 8009d62:	187b      	adds	r3, r7, r1
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3b01      	subs	r3, #1
 8009d68:	187a      	adds	r2, r7, r1
 8009d6a:	6013      	str	r3, [r2, #0]
 8009d6c:	21b8      	movs	r1, #184	; 0xb8
 8009d6e:	187b      	adds	r3, r7, r1
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	b29a      	uxth	r2, r3
 8009d76:	23d8      	movs	r3, #216	; 0xd8
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	b29b      	uxth	r3, r3
 8009d7e:	029b      	lsls	r3, r3, #10
 8009d80:	b29b      	uxth	r3, r3
 8009d82:	4313      	orrs	r3, r2
 8009d84:	b29b      	uxth	r3, r3
 8009d86:	4a21      	ldr	r2, [pc, #132]	; (8009e0c <USB_EPStartXfer+0x11c0>)
 8009d88:	4313      	orrs	r3, r2
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	187b      	adds	r3, r7, r1
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	801a      	strh	r2, [r3, #0]
 8009d92:	e062      	b.n	8009e5a <USB_EPStartXfer+0x120e>
 8009d94:	1d7b      	adds	r3, r7, #5
 8009d96:	33ff      	adds	r3, #255	; 0xff
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d10b      	bne.n	8009db6 <USB_EPStartXfer+0x116a>
 8009d9e:	21b8      	movs	r1, #184	; 0xb8
 8009da0:	187b      	adds	r3, r7, r1
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	881b      	ldrh	r3, [r3, #0]
 8009da6:	b29b      	uxth	r3, r3
 8009da8:	4a18      	ldr	r2, [pc, #96]	; (8009e0c <USB_EPStartXfer+0x11c0>)
 8009daa:	4313      	orrs	r3, r2
 8009dac:	b29a      	uxth	r2, r3
 8009dae:	187b      	adds	r3, r7, r1
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	801a      	strh	r2, [r3, #0]
 8009db4:	e051      	b.n	8009e5a <USB_EPStartXfer+0x120e>
 8009db6:	1d7b      	adds	r3, r7, #5
 8009db8:	33ff      	adds	r3, #255	; 0xff
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	085b      	lsrs	r3, r3, #1
 8009dbe:	21d8      	movs	r1, #216	; 0xd8
 8009dc0:	187a      	adds	r2, r7, r1
 8009dc2:	6013      	str	r3, [r2, #0]
 8009dc4:	1d7b      	adds	r3, r7, #5
 8009dc6:	33ff      	adds	r3, #255	; 0xff
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2201      	movs	r2, #1
 8009dcc:	4013      	ands	r3, r2
 8009dce:	d004      	beq.n	8009dda <USB_EPStartXfer+0x118e>
 8009dd0:	187b      	adds	r3, r7, r1
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	187a      	adds	r2, r7, r1
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	21b8      	movs	r1, #184	; 0xb8
 8009ddc:	187b      	adds	r3, r7, r1
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	23d8      	movs	r3, #216	; 0xd8
 8009de6:	18fb      	adds	r3, r7, r3
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	029b      	lsls	r3, r3, #10
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	4313      	orrs	r3, r2
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	187b      	adds	r3, r7, r1
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	801a      	strh	r2, [r3, #0]
 8009dfa:	e02e      	b.n	8009e5a <USB_EPStartXfer+0x120e>
 8009dfc:	00000406 	.word	0x00000406
 8009e00:	ffff8f8f 	.word	0xffff8f8f
 8009e04:	ffff80c0 	.word	0xffff80c0
 8009e08:	00000402 	.word	0x00000402
 8009e0c:	ffff8000 	.word	0xffff8000
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	785b      	ldrb	r3, [r3, #1]
 8009e14:	2b01      	cmp	r3, #1
 8009e16:	d120      	bne.n	8009e5a <USB_EPStartXfer+0x120e>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2250      	movs	r2, #80	; 0x50
 8009e1c:	5a9b      	ldrh	r3, [r3, r2]
 8009e1e:	b29b      	uxth	r3, r3
 8009e20:	001a      	movs	r2, r3
 8009e22:	21c4      	movs	r1, #196	; 0xc4
 8009e24:	187b      	adds	r3, r7, r1
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	189b      	adds	r3, r3, r2
 8009e2a:	187a      	adds	r2, r7, r1
 8009e2c:	6013      	str	r3, [r2, #0]
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	00da      	lsls	r2, r3, #3
 8009e34:	187b      	adds	r3, r7, r1
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	18d3      	adds	r3, r2, r3
 8009e3a:	4a1d      	ldr	r2, [pc, #116]	; (8009eb0 <USB_EPStartXfer+0x1264>)
 8009e3c:	4694      	mov	ip, r2
 8009e3e:	4463      	add	r3, ip
 8009e40:	21c0      	movs	r1, #192	; 0xc0
 8009e42:	187a      	adds	r2, r7, r1
 8009e44:	6013      	str	r3, [r2, #0]
 8009e46:	1d7b      	adds	r3, r7, #5
 8009e48:	33ff      	adds	r3, #255	; 0xff
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	187b      	adds	r3, r7, r1
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	801a      	strh	r2, [r3, #0]
 8009e54:	e001      	b.n	8009e5a <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e025      	b.n	8009ea6 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e5a:	687a      	ldr	r2, [r7, #4]
 8009e5c:	683b      	ldr	r3, [r7, #0]
 8009e5e:	781b      	ldrb	r3, [r3, #0]
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	18d3      	adds	r3, r2, r3
 8009e64:	881b      	ldrh	r3, [r3, #0]
 8009e66:	b29a      	uxth	r2, r3
 8009e68:	208a      	movs	r0, #138	; 0x8a
 8009e6a:	183b      	adds	r3, r7, r0
 8009e6c:	4911      	ldr	r1, [pc, #68]	; (8009eb4 <USB_EPStartXfer+0x1268>)
 8009e6e:	400a      	ands	r2, r1
 8009e70:	801a      	strh	r2, [r3, #0]
 8009e72:	183b      	adds	r3, r7, r0
 8009e74:	183a      	adds	r2, r7, r0
 8009e76:	8812      	ldrh	r2, [r2, #0]
 8009e78:	2180      	movs	r1, #128	; 0x80
 8009e7a:	0149      	lsls	r1, r1, #5
 8009e7c:	404a      	eors	r2, r1
 8009e7e:	801a      	strh	r2, [r3, #0]
 8009e80:	183b      	adds	r3, r7, r0
 8009e82:	183a      	adds	r2, r7, r0
 8009e84:	8812      	ldrh	r2, [r2, #0]
 8009e86:	2180      	movs	r1, #128	; 0x80
 8009e88:	0189      	lsls	r1, r1, #6
 8009e8a:	404a      	eors	r2, r1
 8009e8c:	801a      	strh	r2, [r3, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	781b      	ldrb	r3, [r3, #0]
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	18d3      	adds	r3, r2, r3
 8009e98:	183a      	adds	r2, r7, r0
 8009e9a:	8812      	ldrh	r2, [r2, #0]
 8009e9c:	4906      	ldr	r1, [pc, #24]	; (8009eb8 <USB_EPStartXfer+0x126c>)
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	b292      	uxth	r2, r2
 8009ea2:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009ea4:	2300      	movs	r3, #0
}
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	b043      	add	sp, #268	; 0x10c
 8009eac:	bd90      	pop	{r4, r7, pc}
 8009eae:	46c0      	nop			; (mov r8, r8)
 8009eb0:	00000406 	.word	0x00000406
 8009eb4:	ffffbf8f 	.word	0xffffbf8f
 8009eb8:	ffff8080 	.word	0xffff8080

08009ebc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	785b      	ldrb	r3, [r3, #1]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d01d      	beq.n	8009f0a <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009ece:	687a      	ldr	r2, [r7, #4]
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	781b      	ldrb	r3, [r3, #0]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	18d3      	adds	r3, r2, r3
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29a      	uxth	r2, r3
 8009edc:	200c      	movs	r0, #12
 8009ede:	183b      	adds	r3, r7, r0
 8009ee0:	491b      	ldr	r1, [pc, #108]	; (8009f50 <USB_EPSetStall+0x94>)
 8009ee2:	400a      	ands	r2, r1
 8009ee4:	801a      	strh	r2, [r3, #0]
 8009ee6:	183b      	adds	r3, r7, r0
 8009ee8:	183a      	adds	r2, r7, r0
 8009eea:	8812      	ldrh	r2, [r2, #0]
 8009eec:	2110      	movs	r1, #16
 8009eee:	404a      	eors	r2, r1
 8009ef0:	801a      	strh	r2, [r3, #0]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	009b      	lsls	r3, r3, #2
 8009efa:	18d3      	adds	r3, r2, r3
 8009efc:	183a      	adds	r2, r7, r0
 8009efe:	8812      	ldrh	r2, [r2, #0]
 8009f00:	4914      	ldr	r1, [pc, #80]	; (8009f54 <USB_EPSetStall+0x98>)
 8009f02:	430a      	orrs	r2, r1
 8009f04:	b292      	uxth	r2, r2
 8009f06:	801a      	strh	r2, [r3, #0]
 8009f08:	e01d      	b.n	8009f46 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	18d3      	adds	r3, r2, r3
 8009f14:	881b      	ldrh	r3, [r3, #0]
 8009f16:	b29a      	uxth	r2, r3
 8009f18:	200e      	movs	r0, #14
 8009f1a:	183b      	adds	r3, r7, r0
 8009f1c:	490e      	ldr	r1, [pc, #56]	; (8009f58 <USB_EPSetStall+0x9c>)
 8009f1e:	400a      	ands	r2, r1
 8009f20:	801a      	strh	r2, [r3, #0]
 8009f22:	183b      	adds	r3, r7, r0
 8009f24:	183a      	adds	r2, r7, r0
 8009f26:	8812      	ldrh	r2, [r2, #0]
 8009f28:	2180      	movs	r1, #128	; 0x80
 8009f2a:	0149      	lsls	r1, r1, #5
 8009f2c:	404a      	eors	r2, r1
 8009f2e:	801a      	strh	r2, [r3, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	18d3      	adds	r3, r2, r3
 8009f3a:	183a      	adds	r2, r7, r0
 8009f3c:	8812      	ldrh	r2, [r2, #0]
 8009f3e:	4905      	ldr	r1, [pc, #20]	; (8009f54 <USB_EPSetStall+0x98>)
 8009f40:	430a      	orrs	r2, r1
 8009f42:	b292      	uxth	r2, r2
 8009f44:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8009f46:	2300      	movs	r3, #0
}
 8009f48:	0018      	movs	r0, r3
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	b004      	add	sp, #16
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	ffff8fbf 	.word	0xffff8fbf
 8009f54:	ffff8080 	.word	0xffff8080
 8009f58:	ffffbf8f 	.word	0xffffbf8f

08009f5c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	7b1b      	ldrb	r3, [r3, #12]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d000      	beq.n	8009f70 <USB_EPClearStall+0x14>
 8009f6e:	e095      	b.n	800a09c <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	785b      	ldrb	r3, [r3, #1]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d046      	beq.n	800a006 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	18d2      	adds	r2, r2, r3
 8009f82:	2110      	movs	r1, #16
 8009f84:	187b      	adds	r3, r7, r1
 8009f86:	8812      	ldrh	r2, [r2, #0]
 8009f88:	801a      	strh	r2, [r3, #0]
 8009f8a:	187b      	adds	r3, r7, r1
 8009f8c:	881b      	ldrh	r3, [r3, #0]
 8009f8e:	2240      	movs	r2, #64	; 0x40
 8009f90:	4013      	ands	r3, r2
 8009f92:	d016      	beq.n	8009fc2 <USB_EPClearStall+0x66>
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	781b      	ldrb	r3, [r3, #0]
 8009f9a:	009b      	lsls	r3, r3, #2
 8009f9c:	18d3      	adds	r3, r2, r3
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	b29a      	uxth	r2, r3
 8009fa2:	200e      	movs	r0, #14
 8009fa4:	183b      	adds	r3, r7, r0
 8009fa6:	4940      	ldr	r1, [pc, #256]	; (800a0a8 <USB_EPClearStall+0x14c>)
 8009fa8:	400a      	ands	r2, r1
 8009faa:	801a      	strh	r2, [r3, #0]
 8009fac:	687a      	ldr	r2, [r7, #4]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	18d3      	adds	r3, r2, r3
 8009fb6:	183a      	adds	r2, r7, r0
 8009fb8:	8812      	ldrh	r2, [r2, #0]
 8009fba:	493c      	ldr	r1, [pc, #240]	; (800a0ac <USB_EPClearStall+0x150>)
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	b292      	uxth	r2, r2
 8009fc0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	78db      	ldrb	r3, [r3, #3]
 8009fc6:	2b01      	cmp	r3, #1
 8009fc8:	d068      	beq.n	800a09c <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	18d3      	adds	r3, r2, r3
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	200c      	movs	r0, #12
 8009fda:	183b      	adds	r3, r7, r0
 8009fdc:	4934      	ldr	r1, [pc, #208]	; (800a0b0 <USB_EPClearStall+0x154>)
 8009fde:	400a      	ands	r2, r1
 8009fe0:	801a      	strh	r2, [r3, #0]
 8009fe2:	183b      	adds	r3, r7, r0
 8009fe4:	183a      	adds	r2, r7, r0
 8009fe6:	8812      	ldrh	r2, [r2, #0]
 8009fe8:	2120      	movs	r1, #32
 8009fea:	404a      	eors	r2, r1
 8009fec:	801a      	strh	r2, [r3, #0]
 8009fee:	687a      	ldr	r2, [r7, #4]
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	781b      	ldrb	r3, [r3, #0]
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	18d3      	adds	r3, r2, r3
 8009ff8:	183a      	adds	r2, r7, r0
 8009ffa:	8812      	ldrh	r2, [r2, #0]
 8009ffc:	492d      	ldr	r1, [pc, #180]	; (800a0b4 <USB_EPClearStall+0x158>)
 8009ffe:	430a      	orrs	r2, r1
 800a000:	b292      	uxth	r2, r2
 800a002:	801a      	strh	r2, [r3, #0]
 800a004:	e04a      	b.n	800a09c <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a006:	687a      	ldr	r2, [r7, #4]
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	781b      	ldrb	r3, [r3, #0]
 800a00c:	009b      	lsls	r3, r3, #2
 800a00e:	18d2      	adds	r2, r2, r3
 800a010:	2116      	movs	r1, #22
 800a012:	187b      	adds	r3, r7, r1
 800a014:	8812      	ldrh	r2, [r2, #0]
 800a016:	801a      	strh	r2, [r3, #0]
 800a018:	187b      	adds	r3, r7, r1
 800a01a:	881a      	ldrh	r2, [r3, #0]
 800a01c:	2380      	movs	r3, #128	; 0x80
 800a01e:	01db      	lsls	r3, r3, #7
 800a020:	4013      	ands	r3, r2
 800a022:	d016      	beq.n	800a052 <USB_EPClearStall+0xf6>
 800a024:	687a      	ldr	r2, [r7, #4]
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	18d3      	adds	r3, r2, r3
 800a02e:	881b      	ldrh	r3, [r3, #0]
 800a030:	b29a      	uxth	r2, r3
 800a032:	2014      	movs	r0, #20
 800a034:	183b      	adds	r3, r7, r0
 800a036:	491c      	ldr	r1, [pc, #112]	; (800a0a8 <USB_EPClearStall+0x14c>)
 800a038:	400a      	ands	r2, r1
 800a03a:	801a      	strh	r2, [r3, #0]
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	18d3      	adds	r3, r2, r3
 800a046:	183a      	adds	r2, r7, r0
 800a048:	8812      	ldrh	r2, [r2, #0]
 800a04a:	491b      	ldr	r1, [pc, #108]	; (800a0b8 <USB_EPClearStall+0x15c>)
 800a04c:	430a      	orrs	r2, r1
 800a04e:	b292      	uxth	r2, r2
 800a050:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	18d3      	adds	r3, r2, r3
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	b29a      	uxth	r2, r3
 800a060:	2012      	movs	r0, #18
 800a062:	183b      	adds	r3, r7, r0
 800a064:	4915      	ldr	r1, [pc, #84]	; (800a0bc <USB_EPClearStall+0x160>)
 800a066:	400a      	ands	r2, r1
 800a068:	801a      	strh	r2, [r3, #0]
 800a06a:	183b      	adds	r3, r7, r0
 800a06c:	183a      	adds	r2, r7, r0
 800a06e:	8812      	ldrh	r2, [r2, #0]
 800a070:	2180      	movs	r1, #128	; 0x80
 800a072:	0149      	lsls	r1, r1, #5
 800a074:	404a      	eors	r2, r1
 800a076:	801a      	strh	r2, [r3, #0]
 800a078:	183b      	adds	r3, r7, r0
 800a07a:	183a      	adds	r2, r7, r0
 800a07c:	8812      	ldrh	r2, [r2, #0]
 800a07e:	2180      	movs	r1, #128	; 0x80
 800a080:	0189      	lsls	r1, r1, #6
 800a082:	404a      	eors	r2, r1
 800a084:	801a      	strh	r2, [r3, #0]
 800a086:	687a      	ldr	r2, [r7, #4]
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	781b      	ldrb	r3, [r3, #0]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	18d3      	adds	r3, r2, r3
 800a090:	183a      	adds	r2, r7, r0
 800a092:	8812      	ldrh	r2, [r2, #0]
 800a094:	4907      	ldr	r1, [pc, #28]	; (800a0b4 <USB_EPClearStall+0x158>)
 800a096:	430a      	orrs	r2, r1
 800a098:	b292      	uxth	r2, r2
 800a09a:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800a09c:	2300      	movs	r3, #0
}
 800a09e:	0018      	movs	r0, r3
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	b006      	add	sp, #24
 800a0a4:	bd80      	pop	{r7, pc}
 800a0a6:	46c0      	nop			; (mov r8, r8)
 800a0a8:	ffff8f8f 	.word	0xffff8f8f
 800a0ac:	ffff80c0 	.word	0xffff80c0
 800a0b0:	ffff8fbf 	.word	0xffff8fbf
 800a0b4:	ffff8080 	.word	0xffff8080
 800a0b8:	ffffc080 	.word	0xffffc080
 800a0bc:	ffffbf8f 	.word	0xffffbf8f

0800a0c0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	000a      	movs	r2, r1
 800a0ca:	1cfb      	adds	r3, r7, #3
 800a0cc:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800a0ce:	1cfb      	adds	r3, r7, #3
 800a0d0:	781b      	ldrb	r3, [r3, #0]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d103      	bne.n	800a0de <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	224c      	movs	r2, #76	; 0x4c
 800a0da:	2180      	movs	r1, #128	; 0x80
 800a0dc:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800a0de:	2300      	movs	r3, #0
}
 800a0e0:	0018      	movs	r0, r3
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b002      	add	sp, #8
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2258      	movs	r2, #88	; 0x58
 800a0f4:	5a9b      	ldrh	r3, [r3, r2]
 800a0f6:	b29b      	uxth	r3, r3
 800a0f8:	4a05      	ldr	r2, [pc, #20]	; (800a110 <USB_DevConnect+0x28>)
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	b299      	uxth	r1, r3
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2258      	movs	r2, #88	; 0x58
 800a102:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a104:	2300      	movs	r3, #0
}
 800a106:	0018      	movs	r0, r3
 800a108:	46bd      	mov	sp, r7
 800a10a:	b002      	add	sp, #8
 800a10c:	bd80      	pop	{r7, pc}
 800a10e:	46c0      	nop			; (mov r8, r8)
 800a110:	ffff8000 	.word	0xffff8000

0800a114 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2244      	movs	r2, #68	; 0x44
 800a120:	5a9b      	ldrh	r3, [r3, r2]
 800a122:	b29b      	uxth	r3, r3
 800a124:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a126:	68fb      	ldr	r3, [r7, #12]
}
 800a128:	0018      	movs	r0, r3
 800a12a:	46bd      	mov	sp, r7
 800a12c:	b004      	add	sp, #16
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b08a      	sub	sp, #40	; 0x28
 800a134:	af00      	add	r7, sp, #0
 800a136:	60f8      	str	r0, [r7, #12]
 800a138:	60b9      	str	r1, [r7, #8]
 800a13a:	0019      	movs	r1, r3
 800a13c:	1dbb      	adds	r3, r7, #6
 800a13e:	801a      	strh	r2, [r3, #0]
 800a140:	1d3b      	adds	r3, r7, #4
 800a142:	1c0a      	adds	r2, r1, #0
 800a144:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a146:	1d3b      	adds	r3, r7, #4
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	3301      	adds	r3, #1
 800a14c:	085b      	lsrs	r3, r3, #1
 800a14e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a158:	1dbb      	adds	r3, r7, #6
 800a15a:	881a      	ldrh	r2, [r3, #0]
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	18d3      	adds	r3, r2, r3
 800a160:	2280      	movs	r2, #128	; 0x80
 800a162:	00d2      	lsls	r2, r2, #3
 800a164:	4694      	mov	ip, r2
 800a166:	4463      	add	r3, ip
 800a168:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	627b      	str	r3, [r7, #36]	; 0x24
 800a16e:	e020      	b.n	800a1b2 <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	2112      	movs	r1, #18
 800a176:	187b      	adds	r3, r7, r1
 800a178:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	3301      	adds	r3, #1
 800a17e:	781b      	ldrb	r3, [r3, #0]
 800a180:	021b      	lsls	r3, r3, #8
 800a182:	b21a      	sxth	r2, r3
 800a184:	187b      	adds	r3, r7, r1
 800a186:	2000      	movs	r0, #0
 800a188:	5e1b      	ldrsh	r3, [r3, r0]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	b21a      	sxth	r2, r3
 800a18e:	187b      	adds	r3, r7, r1
 800a190:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	187a      	adds	r2, r7, r1
 800a196:	8812      	ldrh	r2, [r2, #0]
 800a198:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	3302      	adds	r3, #2
 800a19e:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	3301      	adds	r3, #1
 800a1a4:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	627b      	str	r3, [r7, #36]	; 0x24
 800a1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d1db      	bne.n	800a170 <USB_WritePMA+0x40>
  }
}
 800a1b8:	46c0      	nop			; (mov r8, r8)
 800a1ba:	46c0      	nop			; (mov r8, r8)
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	b00a      	add	sp, #40	; 0x28
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b08a      	sub	sp, #40	; 0x28
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	60f8      	str	r0, [r7, #12]
 800a1ca:	60b9      	str	r1, [r7, #8]
 800a1cc:	0019      	movs	r1, r3
 800a1ce:	1dbb      	adds	r3, r7, #6
 800a1d0:	801a      	strh	r2, [r3, #0]
 800a1d2:	1d3b      	adds	r3, r7, #4
 800a1d4:	1c0a      	adds	r2, r1, #0
 800a1d6:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a1d8:	1d3b      	adds	r3, r7, #4
 800a1da:	881b      	ldrh	r3, [r3, #0]
 800a1dc:	085b      	lsrs	r3, r3, #1
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a1ea:	1dbb      	adds	r3, r7, #6
 800a1ec:	881a      	ldrh	r2, [r3, #0]
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	18d3      	adds	r3, r2, r3
 800a1f2:	2280      	movs	r2, #128	; 0x80
 800a1f4:	00d2      	lsls	r2, r2, #3
 800a1f6:	4694      	mov	ip, r2
 800a1f8:	4463      	add	r3, ip
 800a1fa:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a1fc:	69bb      	ldr	r3, [r7, #24]
 800a1fe:	627b      	str	r3, [r7, #36]	; 0x24
 800a200:	e018      	b.n	800a234 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a202:	6a3b      	ldr	r3, [r7, #32]
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	b29b      	uxth	r3, r3
 800a208:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a20a:	6a3b      	ldr	r3, [r7, #32]
 800a20c:	3302      	adds	r3, #2
 800a20e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	b2da      	uxtb	r2, r3
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	3301      	adds	r3, #1
 800a21c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	0a1b      	lsrs	r3, r3, #8
 800a222:	b2da      	uxtb	r2, r3
 800a224:	69fb      	ldr	r3, [r7, #28]
 800a226:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a228:	69fb      	ldr	r3, [r7, #28]
 800a22a:	3301      	adds	r3, #1
 800a22c:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	3b01      	subs	r3, #1
 800a232:	627b      	str	r3, [r7, #36]	; 0x24
 800a234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1e3      	bne.n	800a202 <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a23a:	1d3b      	adds	r3, r7, #4
 800a23c:	881b      	ldrh	r3, [r3, #0]
 800a23e:	2201      	movs	r2, #1
 800a240:	4013      	ands	r3, r2
 800a242:	b29b      	uxth	r3, r3
 800a244:	2b00      	cmp	r3, #0
 800a246:	d007      	beq.n	800a258 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800a248:	6a3b      	ldr	r3, [r7, #32]
 800a24a:	881b      	ldrh	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	b2da      	uxtb	r2, r3
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	701a      	strb	r2, [r3, #0]
  }
}
 800a258:	46c0      	nop			; (mov r8, r8)
 800a25a:	46bd      	mov	sp, r7
 800a25c:	b00a      	add	sp, #40	; 0x28
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	000a      	movs	r2, r1
 800a26a:	1cfb      	adds	r3, r7, #3
 800a26c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a26e:	230f      	movs	r3, #15
 800a270:	18fb      	adds	r3, r7, r3
 800a272:	2200      	movs	r2, #0
 800a274:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7c1b      	ldrb	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d116      	bne.n	800a2ac <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a27e:	2380      	movs	r3, #128	; 0x80
 800a280:	009b      	lsls	r3, r3, #2
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	2202      	movs	r2, #2
 800a286:	2181      	movs	r1, #129	; 0x81
 800a288:	f002 f90d 	bl	800c4a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2201      	movs	r2, #1
 800a290:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a292:	2380      	movs	r3, #128	; 0x80
 800a294:	009b      	lsls	r3, r3, #2
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	2202      	movs	r2, #2
 800a29a:	2101      	movs	r1, #1
 800a29c:	f002 f903 	bl	800c4a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a2a0:	687a      	ldr	r2, [r7, #4]
 800a2a2:	23b6      	movs	r3, #182	; 0xb6
 800a2a4:	005b      	lsls	r3, r3, #1
 800a2a6:	2101      	movs	r1, #1
 800a2a8:	50d1      	str	r1, [r2, r3]
 800a2aa:	e013      	b.n	800a2d4 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	2340      	movs	r3, #64	; 0x40
 800a2b0:	2202      	movs	r2, #2
 800a2b2:	2181      	movs	r1, #129	; 0x81
 800a2b4:	f002 f8f7 	bl	800c4a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	2340      	movs	r3, #64	; 0x40
 800a2c2:	2202      	movs	r2, #2
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	f002 f8ee 	bl	800c4a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a2ca:	687a      	ldr	r2, [r7, #4]
 800a2cc:	23b6      	movs	r3, #182	; 0xb6
 800a2ce:	005b      	lsls	r3, r3, #1
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	2308      	movs	r3, #8
 800a2d8:	2203      	movs	r2, #3
 800a2da:	2182      	movs	r1, #130	; 0x82
 800a2dc:	f002 f8e3 	bl	800c4a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2201      	movs	r2, #1
 800a2e4:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a2e6:	2387      	movs	r3, #135	; 0x87
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	0018      	movs	r0, r3
 800a2ec:	f002 fa74 	bl	800c7d8 <USBD_static_malloc>
 800a2f0:	0001      	movs	r1, r0
 800a2f2:	687a      	ldr	r2, [r7, #4]
 800a2f4:	23ae      	movs	r3, #174	; 0xae
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	23ae      	movs	r3, #174	; 0xae
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	58d3      	ldr	r3, [r2, r3]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d104      	bne.n	800a310 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800a306:	230f      	movs	r3, #15
 800a308:	18fb      	adds	r3, r7, r3
 800a30a:	2201      	movs	r2, #1
 800a30c:	701a      	strb	r2, [r3, #0]
 800a30e:	e02c      	b.n	800a36a <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a310:	687a      	ldr	r2, [r7, #4]
 800a312:	23ae      	movs	r3, #174	; 0xae
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	58d3      	ldr	r3, [r2, r3]
 800a318:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	23af      	movs	r3, #175	; 0xaf
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	58d3      	ldr	r3, [r2, r3]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	2385      	movs	r3, #133	; 0x85
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	2100      	movs	r1, #0
 800a32e:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800a330:	68ba      	ldr	r2, [r7, #8]
 800a332:	2386      	movs	r3, #134	; 0x86
 800a334:	009b      	lsls	r3, r3, #2
 800a336:	2100      	movs	r1, #0
 800a338:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	7c1b      	ldrb	r3, [r3, #16]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d10a      	bne.n	800a358 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	2381      	movs	r3, #129	; 0x81
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	58d2      	ldr	r2, [r2, r3]
 800a34a:	2380      	movs	r3, #128	; 0x80
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	2101      	movs	r1, #1
 800a352:	f002 f9f3 	bl	800c73c <USBD_LL_PrepareReceive>
 800a356:	e008      	b.n	800a36a <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	2381      	movs	r3, #129	; 0x81
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	58d2      	ldr	r2, [r2, r3]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	2340      	movs	r3, #64	; 0x40
 800a364:	2101      	movs	r1, #1
 800a366:	f002 f9e9 	bl	800c73c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800a36a:	230f      	movs	r3, #15
 800a36c:	18fb      	adds	r3, r7, r3
 800a36e:	781b      	ldrb	r3, [r3, #0]
}
 800a370:	0018      	movs	r0, r3
 800a372:	46bd      	mov	sp, r7
 800a374:	b004      	add	sp, #16
 800a376:	bd80      	pop	{r7, pc}

0800a378 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b084      	sub	sp, #16
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
 800a380:	000a      	movs	r2, r1
 800a382:	1cfb      	adds	r3, r7, #3
 800a384:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800a386:	230f      	movs	r3, #15
 800a388:	18fb      	adds	r3, r7, r3
 800a38a:	2200      	movs	r2, #0
 800a38c:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	2181      	movs	r1, #129	; 0x81
 800a392:	0018      	movs	r0, r3
 800a394:	f002 f8be 	bl	800c514 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2101      	movs	r1, #1
 800a3a2:	0018      	movs	r0, r3
 800a3a4:	f002 f8b6 	bl	800c514 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	23b6      	movs	r3, #182	; 0xb6
 800a3ac:	005b      	lsls	r3, r3, #1
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2182      	movs	r1, #130	; 0x82
 800a3b6:	0018      	movs	r0, r3
 800a3b8:	f002 f8ac 	bl	800c514 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	23ae      	movs	r3, #174	; 0xae
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	58d3      	ldr	r3, [r2, r3]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d011      	beq.n	800a3f2 <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	23af      	movs	r3, #175	; 0xaf
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	58d3      	ldr	r3, [r2, r3]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	23ae      	movs	r3, #174	; 0xae
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	58d3      	ldr	r3, [r2, r3]
 800a3e2:	0018      	movs	r0, r3
 800a3e4:	f002 fa04 	bl	800c7f0 <USBD_static_free>
    pdev->pClassData = NULL;
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	23ae      	movs	r3, #174	; 0xae
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	2100      	movs	r1, #0
 800a3f0:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800a3f2:	230f      	movs	r3, #15
 800a3f4:	18fb      	adds	r3, r7, r3
 800a3f6:	781b      	ldrb	r3, [r3, #0]
}
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	b004      	add	sp, #16
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b086      	sub	sp, #24
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	23ae      	movs	r3, #174	; 0xae
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	58d3      	ldr	r3, [r2, r3]
 800a412:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800a414:	230f      	movs	r3, #15
 800a416:	18fb      	adds	r3, r7, r3
 800a418:	2200      	movs	r2, #0
 800a41a:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800a41c:	230c      	movs	r3, #12
 800a41e:	18fb      	adds	r3, r7, r3
 800a420:	2200      	movs	r2, #0
 800a422:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800a424:	2317      	movs	r3, #23
 800a426:	18fb      	adds	r3, r7, r3
 800a428:	2200      	movs	r2, #0
 800a42a:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	781b      	ldrb	r3, [r3, #0]
 800a430:	001a      	movs	r2, r3
 800a432:	2360      	movs	r3, #96	; 0x60
 800a434:	4013      	ands	r3, r2
 800a436:	d03d      	beq.n	800a4b4 <USBD_CDC_Setup+0xb4>
 800a438:	2b20      	cmp	r3, #32
 800a43a:	d000      	beq.n	800a43e <USBD_CDC_Setup+0x3e>
 800a43c:	e094      	b.n	800a568 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	88db      	ldrh	r3, [r3, #6]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d02b      	beq.n	800a49e <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	b25b      	sxtb	r3, r3
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	da12      	bge.n	800a476 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a450:	687a      	ldr	r2, [r7, #4]
 800a452:	23af      	movs	r3, #175	; 0xaf
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	58d3      	ldr	r3, [r2, r3]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	683a      	ldr	r2, [r7, #0]
 800a45c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800a45e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	88d2      	ldrh	r2, [r2, #6]
 800a464:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a466:	6939      	ldr	r1, [r7, #16]
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	88da      	ldrh	r2, [r3, #6]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	0018      	movs	r0, r3
 800a470:	f001 fbb2 	bl	800bbd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800a474:	e083      	b.n	800a57e <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800a476:	683b      	ldr	r3, [r7, #0]
 800a478:	7859      	ldrb	r1, [r3, #1]
 800a47a:	693a      	ldr	r2, [r7, #16]
 800a47c:	2380      	movs	r3, #128	; 0x80
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	88db      	ldrh	r3, [r3, #6]
 800a486:	b2d9      	uxtb	r1, r3
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	4a40      	ldr	r2, [pc, #256]	; (800a58c <USBD_CDC_Setup+0x18c>)
 800a48c:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800a48e:	6939      	ldr	r1, [r7, #16]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	88da      	ldrh	r2, [r3, #6]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	0018      	movs	r0, r3
 800a498:	f001 fbd1 	bl	800bc3e <USBD_CtlPrepareRx>
      break;
 800a49c:	e06f      	b.n	800a57e <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a49e:	687a      	ldr	r2, [r7, #4]
 800a4a0:	23af      	movs	r3, #175	; 0xaf
 800a4a2:	009b      	lsls	r3, r3, #2
 800a4a4:	58d3      	ldr	r3, [r2, r3]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	683a      	ldr	r2, [r7, #0]
 800a4aa:	7850      	ldrb	r0, [r2, #1]
 800a4ac:	6839      	ldr	r1, [r7, #0]
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	4798      	blx	r3
      break;
 800a4b2:	e064      	b.n	800a57e <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	785b      	ldrb	r3, [r3, #1]
 800a4b8:	2b0b      	cmp	r3, #11
 800a4ba:	d037      	beq.n	800a52c <USBD_CDC_Setup+0x12c>
 800a4bc:	dc47      	bgt.n	800a54e <USBD_CDC_Setup+0x14e>
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d002      	beq.n	800a4c8 <USBD_CDC_Setup+0xc8>
 800a4c2:	2b0a      	cmp	r3, #10
 800a4c4:	d019      	beq.n	800a4fa <USBD_CDC_Setup+0xfa>
 800a4c6:	e042      	b.n	800a54e <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	23a7      	movs	r3, #167	; 0xa7
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	5cd3      	ldrb	r3, [r2, r3]
 800a4d0:	2b03      	cmp	r3, #3
 800a4d2:	d107      	bne.n	800a4e4 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	18f9      	adds	r1, r7, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2202      	movs	r2, #2
 800a4dc:	0018      	movs	r0, r3
 800a4de:	f001 fb7b 	bl	800bbd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4e2:	e040      	b.n	800a566 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a4e4:	683a      	ldr	r2, [r7, #0]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	0011      	movs	r1, r2
 800a4ea:	0018      	movs	r0, r3
 800a4ec:	f001 faf6 	bl	800badc <USBD_CtlError>
            ret = USBD_FAIL;
 800a4f0:	2317      	movs	r3, #23
 800a4f2:	18fb      	adds	r3, r7, r3
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	701a      	strb	r2, [r3, #0]
          break;
 800a4f8:	e035      	b.n	800a566 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	23a7      	movs	r3, #167	; 0xa7
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	5cd3      	ldrb	r3, [r2, r3]
 800a502:	2b03      	cmp	r3, #3
 800a504:	d107      	bne.n	800a516 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800a506:	230f      	movs	r3, #15
 800a508:	18f9      	adds	r1, r7, r3
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2201      	movs	r2, #1
 800a50e:	0018      	movs	r0, r3
 800a510:	f001 fb62 	bl	800bbd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a514:	e027      	b.n	800a566 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800a516:	683a      	ldr	r2, [r7, #0]
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	0011      	movs	r1, r2
 800a51c:	0018      	movs	r0, r3
 800a51e:	f001 fadd 	bl	800badc <USBD_CtlError>
            ret = USBD_FAIL;
 800a522:	2317      	movs	r3, #23
 800a524:	18fb      	adds	r3, r7, r3
 800a526:	2202      	movs	r2, #2
 800a528:	701a      	strb	r2, [r3, #0]
          break;
 800a52a:	e01c      	b.n	800a566 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a52c:	687a      	ldr	r2, [r7, #4]
 800a52e:	23a7      	movs	r3, #167	; 0xa7
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	5cd3      	ldrb	r3, [r2, r3]
 800a534:	2b03      	cmp	r3, #3
 800a536:	d015      	beq.n	800a564 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800a538:	683a      	ldr	r2, [r7, #0]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	0011      	movs	r1, r2
 800a53e:	0018      	movs	r0, r3
 800a540:	f001 facc 	bl	800badc <USBD_CtlError>
            ret = USBD_FAIL;
 800a544:	2317      	movs	r3, #23
 800a546:	18fb      	adds	r3, r7, r3
 800a548:	2202      	movs	r2, #2
 800a54a:	701a      	strb	r2, [r3, #0]
          }
          break;
 800a54c:	e00a      	b.n	800a564 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800a54e:	683a      	ldr	r2, [r7, #0]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	0011      	movs	r1, r2
 800a554:	0018      	movs	r0, r3
 800a556:	f001 fac1 	bl	800badc <USBD_CtlError>
          ret = USBD_FAIL;
 800a55a:	2317      	movs	r3, #23
 800a55c:	18fb      	adds	r3, r7, r3
 800a55e:	2202      	movs	r2, #2
 800a560:	701a      	strb	r2, [r3, #0]
          break;
 800a562:	e000      	b.n	800a566 <USBD_CDC_Setup+0x166>
          break;
 800a564:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800a566:	e00a      	b.n	800a57e <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800a568:	683a      	ldr	r2, [r7, #0]
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	0011      	movs	r1, r2
 800a56e:	0018      	movs	r0, r3
 800a570:	f001 fab4 	bl	800badc <USBD_CtlError>
      ret = USBD_FAIL;
 800a574:	2317      	movs	r3, #23
 800a576:	18fb      	adds	r3, r7, r3
 800a578:	2202      	movs	r2, #2
 800a57a:	701a      	strb	r2, [r3, #0]
      break;
 800a57c:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800a57e:	2317      	movs	r3, #23
 800a580:	18fb      	adds	r3, r7, r3
 800a582:	781b      	ldrb	r3, [r3, #0]
}
 800a584:	0018      	movs	r0, r3
 800a586:	46bd      	mov	sp, r7
 800a588:	b006      	add	sp, #24
 800a58a:	bd80      	pop	{r7, pc}
 800a58c:	00000201 	.word	0x00000201

0800a590 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b084      	sub	sp, #16
 800a594:	af00      	add	r7, sp, #0
 800a596:	6078      	str	r0, [r7, #4]
 800a598:	000a      	movs	r2, r1
 800a59a:	1cfb      	adds	r3, r7, #3
 800a59c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	23ae      	movs	r3, #174	; 0xae
 800a5a2:	009b      	lsls	r3, r3, #2
 800a5a4:	58d3      	ldr	r3, [r2, r3]
 800a5a6:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	23b0      	movs	r3, #176	; 0xb0
 800a5ac:	009b      	lsls	r3, r3, #2
 800a5ae:	58d3      	ldr	r3, [r2, r3]
 800a5b0:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800a5b2:	687a      	ldr	r2, [r7, #4]
 800a5b4:	23ae      	movs	r3, #174	; 0xae
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	58d3      	ldr	r3, [r2, r3]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d03e      	beq.n	800a63c <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a5be:	1cfb      	adds	r3, r7, #3
 800a5c0:	781a      	ldrb	r2, [r3, #0]
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	0013      	movs	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	189b      	adds	r3, r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	18cb      	adds	r3, r1, r3
 800a5ce:	331c      	adds	r3, #28
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d02b      	beq.n	800a62e <USBD_CDC_DataIn+0x9e>
 800a5d6:	1cfb      	adds	r3, r7, #3
 800a5d8:	781a      	ldrb	r2, [r3, #0]
 800a5da:	6879      	ldr	r1, [r7, #4]
 800a5dc:	0013      	movs	r3, r2
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	189b      	adds	r3, r3, r2
 800a5e2:	009b      	lsls	r3, r3, #2
 800a5e4:	18cb      	adds	r3, r1, r3
 800a5e6:	331c      	adds	r3, #28
 800a5e8:	6818      	ldr	r0, [r3, #0]
 800a5ea:	1cfb      	adds	r3, r7, #3
 800a5ec:	781a      	ldrb	r2, [r3, #0]
 800a5ee:	68b9      	ldr	r1, [r7, #8]
 800a5f0:	0013      	movs	r3, r2
 800a5f2:	009b      	lsls	r3, r3, #2
 800a5f4:	189b      	adds	r3, r3, r2
 800a5f6:	00db      	lsls	r3, r3, #3
 800a5f8:	18cb      	adds	r3, r1, r3
 800a5fa:	3338      	adds	r3, #56	; 0x38
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	0019      	movs	r1, r3
 800a600:	f7f5 fe24 	bl	800024c <__aeabi_uidivmod>
 800a604:	1e0b      	subs	r3, r1, #0
 800a606:	d112      	bne.n	800a62e <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800a608:	1cfb      	adds	r3, r7, #3
 800a60a:	781a      	ldrb	r2, [r3, #0]
 800a60c:	6879      	ldr	r1, [r7, #4]
 800a60e:	0013      	movs	r3, r2
 800a610:	009b      	lsls	r3, r3, #2
 800a612:	189b      	adds	r3, r3, r2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	18cb      	adds	r3, r1, r3
 800a618:	331c      	adds	r3, #28
 800a61a:	2200      	movs	r2, #0
 800a61c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a61e:	1cfb      	adds	r3, r7, #3
 800a620:	7819      	ldrb	r1, [r3, #0]
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	2300      	movs	r3, #0
 800a626:	2200      	movs	r2, #0
 800a628:	f002 f851 	bl	800c6ce <USBD_LL_Transmit>
 800a62c:	e004      	b.n	800a638 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	2385      	movs	r3, #133	; 0x85
 800a632:	009b      	lsls	r3, r3, #2
 800a634:	2100      	movs	r1, #0
 800a636:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800a638:	2300      	movs	r3, #0
 800a63a:	e000      	b.n	800a63e <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800a63c:	2302      	movs	r3, #2
  }
}
 800a63e:	0018      	movs	r0, r3
 800a640:	46bd      	mov	sp, r7
 800a642:	b004      	add	sp, #16
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	6078      	str	r0, [r7, #4]
 800a64e:	000a      	movs	r2, r1
 800a650:	1cfb      	adds	r3, r7, #3
 800a652:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	23ae      	movs	r3, #174	; 0xae
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	58d3      	ldr	r3, [r2, r3]
 800a65c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a65e:	1cfb      	adds	r3, r7, #3
 800a660:	781a      	ldrb	r2, [r3, #0]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	0011      	movs	r1, r2
 800a666:	0018      	movs	r0, r3
 800a668:	f002 f89f 	bl	800c7aa <USBD_LL_GetRxDataSize>
 800a66c:	0001      	movs	r1, r0
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	2383      	movs	r3, #131	; 0x83
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800a676:	687a      	ldr	r2, [r7, #4]
 800a678:	23ae      	movs	r3, #174	; 0xae
 800a67a:	009b      	lsls	r3, r3, #2
 800a67c:	58d3      	ldr	r3, [r2, r3]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d011      	beq.n	800a6a6 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	23af      	movs	r3, #175	; 0xaf
 800a686:	009b      	lsls	r3, r3, #2
 800a688:	58d3      	ldr	r3, [r2, r3]
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	68f9      	ldr	r1, [r7, #12]
 800a68e:	2381      	movs	r3, #129	; 0x81
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	58c8      	ldr	r0, [r1, r3]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2183      	movs	r1, #131	; 0x83
 800a698:	0089      	lsls	r1, r1, #2
 800a69a:	468c      	mov	ip, r1
 800a69c:	4463      	add	r3, ip
 800a69e:	0019      	movs	r1, r3
 800a6a0:	4790      	blx	r2

    return USBD_OK;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	e000      	b.n	800a6a8 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800a6a6:	2302      	movs	r3, #2
  }
}
 800a6a8:	0018      	movs	r0, r3
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	b004      	add	sp, #16
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6b0:	b590      	push	{r4, r7, lr}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	23ae      	movs	r3, #174	; 0xae
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	58d3      	ldr	r3, [r2, r3]
 800a6c0:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	23af      	movs	r3, #175	; 0xaf
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	58d3      	ldr	r3, [r2, r3]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d019      	beq.n	800a702 <USBD_CDC_EP0_RxReady+0x52>
 800a6ce:	68fa      	ldr	r2, [r7, #12]
 800a6d0:	2380      	movs	r3, #128	; 0x80
 800a6d2:	009b      	lsls	r3, r3, #2
 800a6d4:	5cd3      	ldrb	r3, [r2, r3]
 800a6d6:	2bff      	cmp	r3, #255	; 0xff
 800a6d8:	d013      	beq.n	800a702 <USBD_CDC_EP0_RxReady+0x52>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	23af      	movs	r3, #175	; 0xaf
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	58d3      	ldr	r3, [r2, r3]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	68f9      	ldr	r1, [r7, #12]
 800a6e6:	2280      	movs	r2, #128	; 0x80
 800a6e8:	0092      	lsls	r2, r2, #2
 800a6ea:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800a6ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4c06      	ldr	r4, [pc, #24]	; (800a70c <USBD_CDC_EP0_RxReady+0x5c>)
 800a6f2:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a6f4:	b292      	uxth	r2, r2
 800a6f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a6f8:	68fa      	ldr	r2, [r7, #12]
 800a6fa:	2380      	movs	r3, #128	; 0x80
 800a6fc:	009b      	lsls	r3, r3, #2
 800a6fe:	21ff      	movs	r1, #255	; 0xff
 800a700:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800a702:	2300      	movs	r3, #0
}
 800a704:	0018      	movs	r0, r3
 800a706:	46bd      	mov	sp, r7
 800a708:	b005      	add	sp, #20
 800a70a:	bd90      	pop	{r4, r7, pc}
 800a70c:	00000201 	.word	0x00000201

0800a710 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a710:	b580      	push	{r7, lr}
 800a712:	b082      	sub	sp, #8
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2243      	movs	r2, #67	; 0x43
 800a71c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a71e:	4b02      	ldr	r3, [pc, #8]	; (800a728 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800a720:	0018      	movs	r0, r3
 800a722:	46bd      	mov	sp, r7
 800a724:	b002      	add	sp, #8
 800a726:	bd80      	pop	{r7, pc}
 800a728:	200000ec 	.word	0x200000ec

0800a72c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b082      	sub	sp, #8
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2243      	movs	r2, #67	; 0x43
 800a738:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a73a:	4b02      	ldr	r3, [pc, #8]	; (800a744 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800a73c:	0018      	movs	r0, r3
 800a73e:	46bd      	mov	sp, r7
 800a740:	b002      	add	sp, #8
 800a742:	bd80      	pop	{r7, pc}
 800a744:	200000a8 	.word	0x200000a8

0800a748 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2243      	movs	r2, #67	; 0x43
 800a754:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a756:	4b02      	ldr	r3, [pc, #8]	; (800a760 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800a758:	0018      	movs	r0, r3
 800a75a:	46bd      	mov	sp, r7
 800a75c:	b002      	add	sp, #8
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	20000130 	.word	0x20000130

0800a764 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	220a      	movs	r2, #10
 800a770:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a772:	4b02      	ldr	r3, [pc, #8]	; (800a77c <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800a774:	0018      	movs	r0, r3
 800a776:	46bd      	mov	sp, r7
 800a778:	b002      	add	sp, #8
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20000064 	.word	0x20000064

0800a780 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a78a:	200f      	movs	r0, #15
 800a78c:	183b      	adds	r3, r7, r0
 800a78e:	2202      	movs	r2, #2
 800a790:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d007      	beq.n	800a7a8 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	23af      	movs	r3, #175	; 0xaf
 800a79c:	009b      	lsls	r3, r3, #2
 800a79e:	6839      	ldr	r1, [r7, #0]
 800a7a0:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800a7a2:	183b      	adds	r3, r7, r0
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800a7a8:	230f      	movs	r3, #15
 800a7aa:	18fb      	adds	r3, r7, r3
 800a7ac:	781b      	ldrb	r3, [r3, #0]
}
 800a7ae:	0018      	movs	r0, r3
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	b004      	add	sp, #16
 800a7b4:	bd80      	pop	{r7, pc}

0800a7b6 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800a7b6:	b580      	push	{r7, lr}
 800a7b8:	b086      	sub	sp, #24
 800a7ba:	af00      	add	r7, sp, #0
 800a7bc:	60f8      	str	r0, [r7, #12]
 800a7be:	60b9      	str	r1, [r7, #8]
 800a7c0:	1dbb      	adds	r3, r7, #6
 800a7c2:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7c4:	68fa      	ldr	r2, [r7, #12]
 800a7c6:	23ae      	movs	r3, #174	; 0xae
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	58d3      	ldr	r3, [r2, r3]
 800a7cc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a7ce:	697a      	ldr	r2, [r7, #20]
 800a7d0:	2382      	movs	r3, #130	; 0x82
 800a7d2:	009b      	lsls	r3, r3, #2
 800a7d4:	68b9      	ldr	r1, [r7, #8]
 800a7d6:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800a7d8:	1dbb      	adds	r3, r7, #6
 800a7da:	8819      	ldrh	r1, [r3, #0]
 800a7dc:	697a      	ldr	r2, [r7, #20]
 800a7de:	2384      	movs	r3, #132	; 0x84
 800a7e0:	009b      	lsls	r3, r3, #2
 800a7e2:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a7e4:	2300      	movs	r3, #0
}
 800a7e6:	0018      	movs	r0, r3
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	b006      	add	sp, #24
 800a7ec:	bd80      	pop	{r7, pc}

0800a7ee <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800a7ee:	b580      	push	{r7, lr}
 800a7f0:	b084      	sub	sp, #16
 800a7f2:	af00      	add	r7, sp, #0
 800a7f4:	6078      	str	r0, [r7, #4]
 800a7f6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	23ae      	movs	r3, #174	; 0xae
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	58d3      	ldr	r3, [r2, r3]
 800a800:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a802:	68fa      	ldr	r2, [r7, #12]
 800a804:	2381      	movs	r3, #129	; 0x81
 800a806:	009b      	lsls	r3, r3, #2
 800a808:	6839      	ldr	r1, [r7, #0]
 800a80a:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800a80c:	2300      	movs	r3, #0
}
 800a80e:	0018      	movs	r0, r3
 800a810:	46bd      	mov	sp, r7
 800a812:	b004      	add	sp, #16
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b084      	sub	sp, #16
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a81e:	687a      	ldr	r2, [r7, #4]
 800a820:	23ae      	movs	r3, #174	; 0xae
 800a822:	009b      	lsls	r3, r3, #2
 800a824:	58d3      	ldr	r3, [r2, r3]
 800a826:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	23ae      	movs	r3, #174	; 0xae
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	58d3      	ldr	r3, [r2, r3]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d022      	beq.n	800a87a <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	2385      	movs	r3, #133	; 0x85
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	58d3      	ldr	r3, [r2, r3]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d11a      	bne.n	800a876 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800a840:	68fa      	ldr	r2, [r7, #12]
 800a842:	2385      	movs	r3, #133	; 0x85
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	2101      	movs	r1, #1
 800a848:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a84a:	68fa      	ldr	r2, [r7, #12]
 800a84c:	2384      	movs	r3, #132	; 0x84
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	58d2      	ldr	r2, [r2, r3]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	2382      	movs	r3, #130	; 0x82
 800a85a:	009b      	lsls	r3, r3, #2
 800a85c:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 800a85e:	68fa      	ldr	r2, [r7, #12]
 800a860:	2384      	movs	r3, #132	; 0x84
 800a862:	009b      	lsls	r3, r3, #2
 800a864:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800a866:	b29b      	uxth	r3, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	000a      	movs	r2, r1
 800a86c:	2181      	movs	r1, #129	; 0x81
 800a86e:	f001 ff2e 	bl	800c6ce <USBD_LL_Transmit>

      return USBD_OK;
 800a872:	2300      	movs	r3, #0
 800a874:	e002      	b.n	800a87c <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 800a876:	2301      	movs	r3, #1
 800a878:	e000      	b.n	800a87c <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 800a87a:	2302      	movs	r3, #2
  }
}
 800a87c:	0018      	movs	r0, r3
 800a87e:	46bd      	mov	sp, r7
 800a880:	b004      	add	sp, #16
 800a882:	bd80      	pop	{r7, pc}

0800a884 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	23ae      	movs	r3, #174	; 0xae
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	58d3      	ldr	r3, [r2, r3]
 800a894:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	23ae      	movs	r3, #174	; 0xae
 800a89a:	009b      	lsls	r3, r3, #2
 800a89c:	58d3      	ldr	r3, [r2, r3]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d019      	beq.n	800a8d6 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	7c1b      	ldrb	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d10a      	bne.n	800a8c0 <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a8aa:	68fa      	ldr	r2, [r7, #12]
 800a8ac:	2381      	movs	r3, #129	; 0x81
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	58d2      	ldr	r2, [r2, r3]
 800a8b2:	2380      	movs	r3, #128	; 0x80
 800a8b4:	009b      	lsls	r3, r3, #2
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	2101      	movs	r1, #1
 800a8ba:	f001 ff3f 	bl	800c73c <USBD_LL_PrepareReceive>
 800a8be:	e008      	b.n	800a8d2 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a8c0:	68fa      	ldr	r2, [r7, #12]
 800a8c2:	2381      	movs	r3, #129	; 0x81
 800a8c4:	009b      	lsls	r3, r3, #2
 800a8c6:	58d2      	ldr	r2, [r2, r3]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	2340      	movs	r3, #64	; 0x40
 800a8cc:	2101      	movs	r1, #1
 800a8ce:	f001 ff35 	bl	800c73c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	e000      	b.n	800a8d8 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800a8d6:	2302      	movs	r3, #2
  }
}
 800a8d8:	0018      	movs	r0, r3
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	b004      	add	sp, #16
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	1dfb      	adds	r3, r7, #7
 800a8ec:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d101      	bne.n	800a8f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e020      	b.n	800a93a <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	23ad      	movs	r3, #173	; 0xad
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	58d3      	ldr	r3, [r2, r3]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d004      	beq.n	800a90e <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800a904:	68fa      	ldr	r2, [r7, #12]
 800a906:	23ad      	movs	r3, #173	; 0xad
 800a908:	009b      	lsls	r3, r3, #2
 800a90a:	2100      	movs	r1, #0
 800a90c:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d004      	beq.n	800a91e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	23ac      	movs	r3, #172	; 0xac
 800a918:	009b      	lsls	r3, r3, #2
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	23a7      	movs	r3, #167	; 0xa7
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	2101      	movs	r1, #1
 800a926:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	1dfa      	adds	r2, r7, #7
 800a92c:	7812      	ldrb	r2, [r2, #0]
 800a92e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	0018      	movs	r0, r3
 800a934:	f001 fd2e 	bl	800c394 <USBD_LL_Init>

  return USBD_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	0018      	movs	r0, r3
 800a93c:	46bd      	mov	sp, r7
 800a93e:	b004      	add	sp, #16
 800a940:	bd80      	pop	{r7, pc}

0800a942 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b084      	sub	sp, #16
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
 800a94a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800a94c:	200f      	movs	r0, #15
 800a94e:	183b      	adds	r3, r7, r0
 800a950:	2200      	movs	r2, #0
 800a952:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d008      	beq.n	800a96c <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	23ad      	movs	r3, #173	; 0xad
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	6839      	ldr	r1, [r7, #0]
 800a962:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800a964:	183b      	adds	r3, r7, r0
 800a966:	2200      	movs	r2, #0
 800a968:	701a      	strb	r2, [r3, #0]
 800a96a:	e003      	b.n	800a974 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a96c:	230f      	movs	r3, #15
 800a96e:	18fb      	adds	r3, r7, r3
 800a970:	2202      	movs	r2, #2
 800a972:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800a974:	230f      	movs	r3, #15
 800a976:	18fb      	adds	r3, r7, r3
 800a978:	781b      	ldrb	r3, [r3, #0]
}
 800a97a:	0018      	movs	r0, r3
 800a97c:	46bd      	mov	sp, r7
 800a97e:	b004      	add	sp, #16
 800a980:	bd80      	pop	{r7, pc}

0800a982 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a982:	b580      	push	{r7, lr}
 800a984:	b082      	sub	sp, #8
 800a986:	af00      	add	r7, sp, #0
 800a988:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	0018      	movs	r0, r3
 800a98e:	f001 fd65 	bl	800c45c <USBD_LL_Start>

  return USBD_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	0018      	movs	r0, r3
 800a996:	46bd      	mov	sp, r7
 800a998:	b002      	add	sp, #8
 800a99a:	bd80      	pop	{r7, pc}

0800a99c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b082      	sub	sp, #8
 800a9a0:	af00      	add	r7, sp, #0
 800a9a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	0018      	movs	r0, r3
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	b002      	add	sp, #8
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9ae:	b590      	push	{r4, r7, lr}
 800a9b0:	b085      	sub	sp, #20
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
 800a9b6:	000a      	movs	r2, r1
 800a9b8:	1cfb      	adds	r3, r7, #3
 800a9ba:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a9bc:	240f      	movs	r4, #15
 800a9be:	193b      	adds	r3, r7, r4
 800a9c0:	2202      	movs	r2, #2
 800a9c2:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	23ad      	movs	r3, #173	; 0xad
 800a9c8:	009b      	lsls	r3, r3, #2
 800a9ca:	58d3      	ldr	r3, [r2, r3]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d00e      	beq.n	800a9ee <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	23ad      	movs	r3, #173	; 0xad
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	58d3      	ldr	r3, [r2, r3]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	1cfa      	adds	r2, r7, #3
 800a9dc:	7811      	ldrb	r1, [r2, #0]
 800a9de:	687a      	ldr	r2, [r7, #4]
 800a9e0:	0010      	movs	r0, r2
 800a9e2:	4798      	blx	r3
 800a9e4:	1e03      	subs	r3, r0, #0
 800a9e6:	d102      	bne.n	800a9ee <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800a9e8:	193b      	adds	r3, r7, r4
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800a9ee:	230f      	movs	r3, #15
 800a9f0:	18fb      	adds	r3, r7, r3
 800a9f2:	781b      	ldrb	r3, [r3, #0]
}
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	b005      	add	sp, #20
 800a9fa:	bd90      	pop	{r4, r7, pc}

0800a9fc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	000a      	movs	r2, r1
 800aa06:	1cfb      	adds	r3, r7, #3
 800aa08:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800aa0a:	687a      	ldr	r2, [r7, #4]
 800aa0c:	23ad      	movs	r3, #173	; 0xad
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	58d3      	ldr	r3, [r2, r3]
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	1cfa      	adds	r2, r7, #3
 800aa16:	7811      	ldrb	r1, [r2, #0]
 800aa18:	687a      	ldr	r2, [r7, #4]
 800aa1a:	0010      	movs	r0, r2
 800aa1c:	4798      	blx	r3

  return USBD_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	0018      	movs	r0, r3
 800aa22:	46bd      	mov	sp, r7
 800aa24:	b002      	add	sp, #8
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b082      	sub	sp, #8
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	22aa      	movs	r2, #170	; 0xaa
 800aa36:	0092      	lsls	r2, r2, #2
 800aa38:	4694      	mov	ip, r2
 800aa3a:	4463      	add	r3, ip
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	0011      	movs	r1, r2
 800aa40:	0018      	movs	r0, r3
 800aa42:	f001 f810 	bl	800ba66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aa46:	687a      	ldr	r2, [r7, #4]
 800aa48:	23a5      	movs	r3, #165	; 0xa5
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	2101      	movs	r1, #1
 800aa4e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	4a23      	ldr	r2, [pc, #140]	; (800aae0 <USBD_LL_SetupStage+0xb8>)
 800aa54:	5a9b      	ldrh	r3, [r3, r2]
 800aa56:	0019      	movs	r1, r3
 800aa58:	687a      	ldr	r2, [r7, #4]
 800aa5a:	23a6      	movs	r3, #166	; 0xa6
 800aa5c:	009b      	lsls	r3, r3, #2
 800aa5e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	23aa      	movs	r3, #170	; 0xaa
 800aa64:	009b      	lsls	r3, r3, #2
 800aa66:	5cd3      	ldrb	r3, [r2, r3]
 800aa68:	001a      	movs	r2, r3
 800aa6a:	231f      	movs	r3, #31
 800aa6c:	4013      	ands	r3, r2
 800aa6e:	2b02      	cmp	r3, #2
 800aa70:	d019      	beq.n	800aaa6 <USBD_LL_SetupStage+0x7e>
 800aa72:	d822      	bhi.n	800aaba <USBD_LL_SetupStage+0x92>
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d002      	beq.n	800aa7e <USBD_LL_SetupStage+0x56>
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d00a      	beq.n	800aa92 <USBD_LL_SetupStage+0x6a>
 800aa7c:	e01d      	b.n	800aaba <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	22aa      	movs	r2, #170	; 0xaa
 800aa82:	0092      	lsls	r2, r2, #2
 800aa84:	189a      	adds	r2, r3, r2
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	0011      	movs	r1, r2
 800aa8a:	0018      	movs	r0, r3
 800aa8c:	f000 fa10 	bl	800aeb0 <USBD_StdDevReq>
      break;
 800aa90:	e020      	b.n	800aad4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	22aa      	movs	r2, #170	; 0xaa
 800aa96:	0092      	lsls	r2, r2, #2
 800aa98:	189a      	adds	r2, r3, r2
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	0011      	movs	r1, r2
 800aa9e:	0018      	movs	r0, r3
 800aaa0:	f000 fa78 	bl	800af94 <USBD_StdItfReq>
      break;
 800aaa4:	e016      	b.n	800aad4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	22aa      	movs	r2, #170	; 0xaa
 800aaaa:	0092      	lsls	r2, r2, #2
 800aaac:	189a      	adds	r2, r3, r2
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	0011      	movs	r1, r2
 800aab2:	0018      	movs	r0, r3
 800aab4:	f000 fac5 	bl	800b042 <USBD_StdEPReq>
      break;
 800aab8:	e00c      	b.n	800aad4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800aaba:	687a      	ldr	r2, [r7, #4]
 800aabc:	23aa      	movs	r3, #170	; 0xaa
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	5cd3      	ldrb	r3, [r2, r3]
 800aac2:	227f      	movs	r2, #127	; 0x7f
 800aac4:	4393      	bics	r3, r2
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	0011      	movs	r1, r2
 800aacc:	0018      	movs	r0, r3
 800aace:	f001 fd4c 	bl	800c56a <USBD_LL_StallEP>
      break;
 800aad2:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	0018      	movs	r0, r3
 800aad8:	46bd      	mov	sp, r7
 800aada:	b002      	add	sp, #8
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	46c0      	nop			; (mov r8, r8)
 800aae0:	000002ae 	.word	0x000002ae

0800aae4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	60f8      	str	r0, [r7, #12]
 800aaec:	607a      	str	r2, [r7, #4]
 800aaee:	200b      	movs	r0, #11
 800aaf0:	183b      	adds	r3, r7, r0
 800aaf2:	1c0a      	adds	r2, r1, #0
 800aaf4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800aaf6:	183b      	adds	r3, r7, r0
 800aaf8:	781b      	ldrb	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d154      	bne.n	800aba8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3355      	adds	r3, #85	; 0x55
 800ab02:	33ff      	adds	r3, #255	; 0xff
 800ab04:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	23a5      	movs	r3, #165	; 0xa5
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	58d3      	ldr	r3, [r2, r3]
 800ab0e:	2b03      	cmp	r3, #3
 800ab10:	d139      	bne.n	800ab86 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	68da      	ldr	r2, [r3, #12]
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	d919      	bls.n	800ab52 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800ab1e:	697b      	ldr	r3, [r7, #20]
 800ab20:	68da      	ldr	r2, [r3, #12]
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	691b      	ldr	r3, [r3, #16]
 800ab26:	1ad2      	subs	r2, r2, r3
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	68da      	ldr	r2, [r3, #12]
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab34:	429a      	cmp	r2, r3
 800ab36:	d203      	bcs.n	800ab40 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	e002      	b.n	800ab46 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	6879      	ldr	r1, [r7, #4]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	001a      	movs	r2, r3
 800ab4c:	f001 f89b 	bl	800bc86 <USBD_CtlContinueRx>
 800ab50:	e045      	b.n	800abde <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	23ad      	movs	r3, #173	; 0xad
 800ab56:	009b      	lsls	r3, r3, #2
 800ab58:	58d3      	ldr	r3, [r2, r3]
 800ab5a:	691b      	ldr	r3, [r3, #16]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00d      	beq.n	800ab7c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	23a7      	movs	r3, #167	; 0xa7
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800ab68:	2b03      	cmp	r3, #3
 800ab6a:	d107      	bne.n	800ab7c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	23ad      	movs	r3, #173	; 0xad
 800ab70:	009b      	lsls	r3, r3, #2
 800ab72:	58d3      	ldr	r3, [r2, r3]
 800ab74:	691b      	ldr	r3, [r3, #16]
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	0010      	movs	r0, r2
 800ab7a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	0018      	movs	r0, r3
 800ab80:	f001 f894 	bl	800bcac <USBD_CtlSendStatus>
 800ab84:	e02b      	b.n	800abde <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	23a5      	movs	r3, #165	; 0xa5
 800ab8a:	009b      	lsls	r3, r3, #2
 800ab8c:	58d3      	ldr	r3, [r2, r3]
 800ab8e:	2b05      	cmp	r3, #5
 800ab90:	d125      	bne.n	800abde <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	23a5      	movs	r3, #165	; 0xa5
 800ab96:	009b      	lsls	r3, r3, #2
 800ab98:	2100      	movs	r1, #0
 800ab9a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2100      	movs	r1, #0
 800aba0:	0018      	movs	r0, r3
 800aba2:	f001 fce2 	bl	800c56a <USBD_LL_StallEP>
 800aba6:	e01a      	b.n	800abde <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	23ad      	movs	r3, #173	; 0xad
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	58d3      	ldr	r3, [r2, r3]
 800abb0:	699b      	ldr	r3, [r3, #24]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d011      	beq.n	800abda <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	23a7      	movs	r3, #167	; 0xa7
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	d10b      	bne.n	800abda <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800abc2:	68fa      	ldr	r2, [r7, #12]
 800abc4:	23ad      	movs	r3, #173	; 0xad
 800abc6:	009b      	lsls	r3, r3, #2
 800abc8:	58d3      	ldr	r3, [r2, r3]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	220b      	movs	r2, #11
 800abce:	18ba      	adds	r2, r7, r2
 800abd0:	7811      	ldrb	r1, [r2, #0]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	0010      	movs	r0, r2
 800abd6:	4798      	blx	r3
 800abd8:	e001      	b.n	800abde <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800abda:	2302      	movs	r3, #2
 800abdc:	e000      	b.n	800abe0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800abde:	2300      	movs	r3, #0
}
 800abe0:	0018      	movs	r0, r3
 800abe2:	46bd      	mov	sp, r7
 800abe4:	b006      	add	sp, #24
 800abe6:	bd80      	pop	{r7, pc}

0800abe8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	60f8      	str	r0, [r7, #12]
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	200b      	movs	r0, #11
 800abf4:	183b      	adds	r3, r7, r0
 800abf6:	1c0a      	adds	r2, r1, #0
 800abf8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800abfa:	183b      	adds	r3, r7, r0
 800abfc:	781b      	ldrb	r3, [r3, #0]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d000      	beq.n	800ac04 <USBD_LL_DataInStage+0x1c>
 800ac02:	e08e      	b.n	800ad22 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3314      	adds	r3, #20
 800ac08:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	23a5      	movs	r3, #165	; 0xa5
 800ac0e:	009b      	lsls	r3, r3, #2
 800ac10:	58d3      	ldr	r3, [r2, r3]
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d164      	bne.n	800ace0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac16:	697b      	ldr	r3, [r7, #20]
 800ac18:	68da      	ldr	r2, [r3, #12]
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d915      	bls.n	800ac4e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ac22:	697b      	ldr	r3, [r7, #20]
 800ac24:	68da      	ldr	r2, [r3, #12]
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	691b      	ldr	r3, [r3, #16]
 800ac2a:	1ad2      	subs	r2, r2, r3
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ac30:	697b      	ldr	r3, [r7, #20]
 800ac32:	68db      	ldr	r3, [r3, #12]
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	0018      	movs	r0, r3
 800ac3c:	f000 ffec 	bl	800bc18 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	2300      	movs	r3, #0
 800ac44:	2200      	movs	r2, #0
 800ac46:	2100      	movs	r1, #0
 800ac48:	f001 fd78 	bl	800c73c <USBD_LL_PrepareReceive>
 800ac4c:	e059      	b.n	800ad02 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	689a      	ldr	r2, [r3, #8]
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	691b      	ldr	r3, [r3, #16]
 800ac56:	0019      	movs	r1, r3
 800ac58:	0010      	movs	r0, r2
 800ac5a:	f7f5 faf7 	bl	800024c <__aeabi_uidivmod>
 800ac5e:	1e0b      	subs	r3, r1, #0
 800ac60:	d11f      	bne.n	800aca2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	689a      	ldr	r2, [r3, #8]
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d319      	bcc.n	800aca2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	689a      	ldr	r2, [r3, #8]
 800ac72:	68f9      	ldr	r1, [r7, #12]
 800ac74:	23a6      	movs	r3, #166	; 0xa6
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800ac7a:	429a      	cmp	r2, r3
 800ac7c:	d211      	bcs.n	800aca2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	2200      	movs	r2, #0
 800ac82:	2100      	movs	r1, #0
 800ac84:	0018      	movs	r0, r3
 800ac86:	f000 ffc7 	bl	800bc18 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ac8a:	68fa      	ldr	r2, [r7, #12]
 800ac8c:	23a6      	movs	r3, #166	; 0xa6
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	2100      	movs	r1, #0
 800ac92:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac94:	68f8      	ldr	r0, [r7, #12]
 800ac96:	2300      	movs	r3, #0
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2100      	movs	r1, #0
 800ac9c:	f001 fd4e 	bl	800c73c <USBD_LL_PrepareReceive>
 800aca0:	e02f      	b.n	800ad02 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	23ad      	movs	r3, #173	; 0xad
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	58d3      	ldr	r3, [r2, r3]
 800acaa:	68db      	ldr	r3, [r3, #12]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00d      	beq.n	800accc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	23a7      	movs	r3, #167	; 0xa7
 800acb4:	009b      	lsls	r3, r3, #2
 800acb6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800acb8:	2b03      	cmp	r3, #3
 800acba:	d107      	bne.n	800accc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	23ad      	movs	r3, #173	; 0xad
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	58d3      	ldr	r3, [r2, r3]
 800acc4:	68db      	ldr	r3, [r3, #12]
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	0010      	movs	r0, r2
 800acca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	2180      	movs	r1, #128	; 0x80
 800acd0:	0018      	movs	r0, r3
 800acd2:	f001 fc4a 	bl	800c56a <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	0018      	movs	r0, r3
 800acda:	f000 fffb 	bl	800bcd4 <USBD_CtlReceiveStatus>
 800acde:	e010      	b.n	800ad02 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	23a5      	movs	r3, #165	; 0xa5
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	58d3      	ldr	r3, [r2, r3]
 800ace8:	2b04      	cmp	r3, #4
 800acea:	d005      	beq.n	800acf8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	23a5      	movs	r3, #165	; 0xa5
 800acf0:	009b      	lsls	r3, r3, #2
 800acf2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d104      	bne.n	800ad02 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2180      	movs	r1, #128	; 0x80
 800acfc:	0018      	movs	r0, r3
 800acfe:	f001 fc34 	bl	800c56a <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	23a8      	movs	r3, #168	; 0xa8
 800ad06:	009b      	lsls	r3, r3, #2
 800ad08:	5cd3      	ldrb	r3, [r2, r3]
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d124      	bne.n	800ad58 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	0018      	movs	r0, r3
 800ad12:	f7ff fe43 	bl	800a99c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad16:	68fa      	ldr	r2, [r7, #12]
 800ad18:	23a8      	movs	r3, #168	; 0xa8
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	2100      	movs	r1, #0
 800ad1e:	54d1      	strb	r1, [r2, r3]
 800ad20:	e01a      	b.n	800ad58 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad22:	68fa      	ldr	r2, [r7, #12]
 800ad24:	23ad      	movs	r3, #173	; 0xad
 800ad26:	009b      	lsls	r3, r3, #2
 800ad28:	58d3      	ldr	r3, [r2, r3]
 800ad2a:	695b      	ldr	r3, [r3, #20]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d011      	beq.n	800ad54 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	23a7      	movs	r3, #167	; 0xa7
 800ad34:	009b      	lsls	r3, r3, #2
 800ad36:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800ad38:	2b03      	cmp	r3, #3
 800ad3a:	d10b      	bne.n	800ad54 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800ad3c:	68fa      	ldr	r2, [r7, #12]
 800ad3e:	23ad      	movs	r3, #173	; 0xad
 800ad40:	009b      	lsls	r3, r3, #2
 800ad42:	58d3      	ldr	r3, [r2, r3]
 800ad44:	695b      	ldr	r3, [r3, #20]
 800ad46:	220b      	movs	r2, #11
 800ad48:	18ba      	adds	r2, r7, r2
 800ad4a:	7811      	ldrb	r1, [r2, #0]
 800ad4c:	68fa      	ldr	r2, [r7, #12]
 800ad4e:	0010      	movs	r0, r2
 800ad50:	4798      	blx	r3
 800ad52:	e001      	b.n	800ad58 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ad54:	2302      	movs	r3, #2
 800ad56:	e000      	b.n	800ad5a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800ad58:	2300      	movs	r3, #0
}
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	b006      	add	sp, #24
 800ad60:	bd80      	pop	{r7, pc}

0800ad62 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b082      	sub	sp, #8
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	2340      	movs	r3, #64	; 0x40
 800ad6e:	2200      	movs	r2, #0
 800ad70:	2100      	movs	r1, #0
 800ad72:	f001 fb98 	bl	800c4a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	23ac      	movs	r3, #172	; 0xac
 800ad7a:	005b      	lsls	r3, r3, #1
 800ad7c:	2101      	movs	r1, #1
 800ad7e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	23b2      	movs	r3, #178	; 0xb2
 800ad84:	005b      	lsls	r3, r3, #1
 800ad86:	2140      	movs	r1, #64	; 0x40
 800ad88:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	2340      	movs	r3, #64	; 0x40
 800ad8e:	2200      	movs	r2, #0
 800ad90:	2180      	movs	r1, #128	; 0x80
 800ad92:	f001 fb88 	bl	800c4a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2201      	movs	r2, #1
 800ad9a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2240      	movs	r2, #64	; 0x40
 800ada0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	23a7      	movs	r3, #167	; 0xa7
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	2101      	movs	r1, #1
 800adaa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800adac:	687a      	ldr	r2, [r7, #4]
 800adae:	23a5      	movs	r3, #165	; 0xa5
 800adb0:	009b      	lsls	r3, r3, #2
 800adb2:	2100      	movs	r1, #0
 800adb4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	23a9      	movs	r3, #169	; 0xa9
 800adc0:	009b      	lsls	r3, r3, #2
 800adc2:	2100      	movs	r1, #0
 800adc4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800adc6:	687a      	ldr	r2, [r7, #4]
 800adc8:	23ae      	movs	r3, #174	; 0xae
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	58d3      	ldr	r3, [r2, r3]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800add2:	687a      	ldr	r2, [r7, #4]
 800add4:	23ad      	movs	r3, #173	; 0xad
 800add6:	009b      	lsls	r3, r3, #2
 800add8:	58d3      	ldr	r3, [r2, r3]
 800adda:	685a      	ldr	r2, [r3, #4]
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	685b      	ldr	r3, [r3, #4]
 800ade0:	b2d9      	uxtb	r1, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	0018      	movs	r0, r3
 800ade6:	4790      	blx	r2
  }

  return USBD_OK;
 800ade8:	2300      	movs	r3, #0
}
 800adea:	0018      	movs	r0, r3
 800adec:	46bd      	mov	sp, r7
 800adee:	b002      	add	sp, #8
 800adf0:	bd80      	pop	{r7, pc}

0800adf2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adf2:	b580      	push	{r7, lr}
 800adf4:	b082      	sub	sp, #8
 800adf6:	af00      	add	r7, sp, #0
 800adf8:	6078      	str	r0, [r7, #4]
 800adfa:	000a      	movs	r2, r1
 800adfc:	1cfb      	adds	r3, r7, #3
 800adfe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	1cfa      	adds	r2, r7, #3
 800ae04:	7812      	ldrb	r2, [r2, #0]
 800ae06:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b002      	add	sp, #8
 800ae10:	bd80      	pop	{r7, pc}
	...

0800ae14 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b082      	sub	sp, #8
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800ae1c:	687a      	ldr	r2, [r7, #4]
 800ae1e:	23a7      	movs	r3, #167	; 0xa7
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	5cd1      	ldrb	r1, [r2, r3]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	4a06      	ldr	r2, [pc, #24]	; (800ae40 <USBD_LL_Suspend+0x2c>)
 800ae28:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ae2a:	687a      	ldr	r2, [r7, #4]
 800ae2c:	23a7      	movs	r3, #167	; 0xa7
 800ae2e:	009b      	lsls	r3, r3, #2
 800ae30:	2104      	movs	r1, #4
 800ae32:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800ae34:	2300      	movs	r3, #0
}
 800ae36:	0018      	movs	r0, r3
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	b002      	add	sp, #8
 800ae3c:	bd80      	pop	{r7, pc}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	0000029d 	.word	0x0000029d

0800ae44 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	23a7      	movs	r3, #167	; 0xa7
 800ae50:	009b      	lsls	r3, r3, #2
 800ae52:	5cd3      	ldrb	r3, [r2, r3]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d106      	bne.n	800ae66 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	4a05      	ldr	r2, [pc, #20]	; (800ae70 <USBD_LL_Resume+0x2c>)
 800ae5c:	5c99      	ldrb	r1, [r3, r2]
 800ae5e:	687a      	ldr	r2, [r7, #4]
 800ae60:	23a7      	movs	r3, #167	; 0xa7
 800ae62:	009b      	lsls	r3, r3, #2
 800ae64:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	0018      	movs	r0, r3
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	b002      	add	sp, #8
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	0000029d 	.word	0x0000029d

0800ae74 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7c:	687a      	ldr	r2, [r7, #4]
 800ae7e:	23a7      	movs	r3, #167	; 0xa7
 800ae80:	009b      	lsls	r3, r3, #2
 800ae82:	5cd3      	ldrb	r3, [r2, r3]
 800ae84:	2b03      	cmp	r3, #3
 800ae86:	d10e      	bne.n	800aea6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800ae88:	687a      	ldr	r2, [r7, #4]
 800ae8a:	23ad      	movs	r3, #173	; 0xad
 800ae8c:	009b      	lsls	r3, r3, #2
 800ae8e:	58d3      	ldr	r3, [r2, r3]
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d007      	beq.n	800aea6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	23ad      	movs	r3, #173	; 0xad
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	58d3      	ldr	r3, [r2, r3]
 800ae9e:	69db      	ldr	r3, [r3, #28]
 800aea0:	687a      	ldr	r2, [r7, #4]
 800aea2:	0010      	movs	r0, r2
 800aea4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	0018      	movs	r0, r3
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b002      	add	sp, #8
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b084      	sub	sp, #16
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeba:	230f      	movs	r3, #15
 800aebc:	18fb      	adds	r3, r7, r3
 800aebe:	2200      	movs	r2, #0
 800aec0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	781b      	ldrb	r3, [r3, #0]
 800aec6:	001a      	movs	r2, r3
 800aec8:	2360      	movs	r3, #96	; 0x60
 800aeca:	4013      	ands	r3, r2
 800aecc:	2b40      	cmp	r3, #64	; 0x40
 800aece:	d004      	beq.n	800aeda <USBD_StdDevReq+0x2a>
 800aed0:	d84f      	bhi.n	800af72 <USBD_StdDevReq+0xc2>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00b      	beq.n	800aeee <USBD_StdDevReq+0x3e>
 800aed6:	2b20      	cmp	r3, #32
 800aed8:	d14b      	bne.n	800af72 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800aeda:	687a      	ldr	r2, [r7, #4]
 800aedc:	23ad      	movs	r3, #173	; 0xad
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	58d3      	ldr	r3, [r2, r3]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	6839      	ldr	r1, [r7, #0]
 800aee6:	687a      	ldr	r2, [r7, #4]
 800aee8:	0010      	movs	r0, r2
 800aeea:	4798      	blx	r3
      break;
 800aeec:	e048      	b.n	800af80 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	785b      	ldrb	r3, [r3, #1]
 800aef2:	2b09      	cmp	r3, #9
 800aef4:	d835      	bhi.n	800af62 <USBD_StdDevReq+0xb2>
 800aef6:	009a      	lsls	r2, r3, #2
 800aef8:	4b25      	ldr	r3, [pc, #148]	; (800af90 <USBD_StdDevReq+0xe0>)
 800aefa:	18d3      	adds	r3, r2, r3
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af00:	683a      	ldr	r2, [r7, #0]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	0011      	movs	r1, r2
 800af06:	0018      	movs	r0, r3
 800af08:	f000 fa52 	bl	800b3b0 <USBD_GetDescriptor>
          break;
 800af0c:	e030      	b.n	800af70 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	0011      	movs	r1, r2
 800af14:	0018      	movs	r0, r3
 800af16:	f000 fbfd 	bl	800b714 <USBD_SetAddress>
          break;
 800af1a:	e029      	b.n	800af70 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800af1c:	683a      	ldr	r2, [r7, #0]
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	0011      	movs	r1, r2
 800af22:	0018      	movs	r0, r3
 800af24:	f000 fc4a 	bl	800b7bc <USBD_SetConfig>
          break;
 800af28:	e022      	b.n	800af70 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af2a:	683a      	ldr	r2, [r7, #0]
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	0011      	movs	r1, r2
 800af30:	0018      	movs	r0, r3
 800af32:	f000 fce7 	bl	800b904 <USBD_GetConfig>
          break;
 800af36:	e01b      	b.n	800af70 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	0011      	movs	r1, r2
 800af3e:	0018      	movs	r0, r3
 800af40:	f000 fd1b 	bl	800b97a <USBD_GetStatus>
          break;
 800af44:	e014      	b.n	800af70 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af46:	683a      	ldr	r2, [r7, #0]
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	0011      	movs	r1, r2
 800af4c:	0018      	movs	r0, r3
 800af4e:	f000 fd4e 	bl	800b9ee <USBD_SetFeature>
          break;
 800af52:	e00d      	b.n	800af70 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af54:	683a      	ldr	r2, [r7, #0]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	0011      	movs	r1, r2
 800af5a:	0018      	movs	r0, r3
 800af5c:	f000 fd5d 	bl	800ba1a <USBD_ClrFeature>
          break;
 800af60:	e006      	b.n	800af70 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800af62:	683a      	ldr	r2, [r7, #0]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	0011      	movs	r1, r2
 800af68:	0018      	movs	r0, r3
 800af6a:	f000 fdb7 	bl	800badc <USBD_CtlError>
          break;
 800af6e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800af70:	e006      	b.n	800af80 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	0011      	movs	r1, r2
 800af78:	0018      	movs	r0, r3
 800af7a:	f000 fdaf 	bl	800badc <USBD_CtlError>
      break;
 800af7e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800af80:	230f      	movs	r3, #15
 800af82:	18fb      	adds	r3, r7, r3
 800af84:	781b      	ldrb	r3, [r3, #0]
}
 800af86:	0018      	movs	r0, r3
 800af88:	46bd      	mov	sp, r7
 800af8a:	b004      	add	sp, #16
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	46c0      	nop			; (mov r8, r8)
 800af90:	0800eeb4 	.word	0x0800eeb4

0800af94 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800af94:	b5b0      	push	{r4, r5, r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
 800af9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800af9e:	230f      	movs	r3, #15
 800afa0:	18fb      	adds	r3, r7, r3
 800afa2:	2200      	movs	r2, #0
 800afa4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afa6:	683b      	ldr	r3, [r7, #0]
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	001a      	movs	r2, r3
 800afac:	2360      	movs	r3, #96	; 0x60
 800afae:	4013      	ands	r3, r2
 800afb0:	2b40      	cmp	r3, #64	; 0x40
 800afb2:	d004      	beq.n	800afbe <USBD_StdItfReq+0x2a>
 800afb4:	d839      	bhi.n	800b02a <USBD_StdItfReq+0x96>
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d001      	beq.n	800afbe <USBD_StdItfReq+0x2a>
 800afba:	2b20      	cmp	r3, #32
 800afbc:	d135      	bne.n	800b02a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afbe:	687a      	ldr	r2, [r7, #4]
 800afc0:	23a7      	movs	r3, #167	; 0xa7
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	5cd3      	ldrb	r3, [r2, r3]
 800afc6:	3b01      	subs	r3, #1
 800afc8:	2b02      	cmp	r3, #2
 800afca:	d825      	bhi.n	800b018 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800afcc:	683b      	ldr	r3, [r7, #0]
 800afce:	889b      	ldrh	r3, [r3, #4]
 800afd0:	b2db      	uxtb	r3, r3
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d819      	bhi.n	800b00a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800afd6:	687a      	ldr	r2, [r7, #4]
 800afd8:	23ad      	movs	r3, #173	; 0xad
 800afda:	009b      	lsls	r3, r3, #2
 800afdc:	58d3      	ldr	r3, [r2, r3]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	250f      	movs	r5, #15
 800afe2:	197c      	adds	r4, r7, r5
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	687a      	ldr	r2, [r7, #4]
 800afe8:	0010      	movs	r0, r2
 800afea:	4798      	blx	r3
 800afec:	0003      	movs	r3, r0
 800afee:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	88db      	ldrh	r3, [r3, #6]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d116      	bne.n	800b026 <USBD_StdItfReq+0x92>
 800aff8:	197b      	adds	r3, r7, r5
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d112      	bne.n	800b026 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	0018      	movs	r0, r3
 800b004:	f000 fe52 	bl	800bcac <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b008:	e00d      	b.n	800b026 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800b00a:	683a      	ldr	r2, [r7, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	0011      	movs	r1, r2
 800b010:	0018      	movs	r0, r3
 800b012:	f000 fd63 	bl	800badc <USBD_CtlError>
          break;
 800b016:	e006      	b.n	800b026 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800b018:	683a      	ldr	r2, [r7, #0]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	0011      	movs	r1, r2
 800b01e:	0018      	movs	r0, r3
 800b020:	f000 fd5c 	bl	800badc <USBD_CtlError>
          break;
 800b024:	e000      	b.n	800b028 <USBD_StdItfReq+0x94>
          break;
 800b026:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b028:	e006      	b.n	800b038 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800b02a:	683a      	ldr	r2, [r7, #0]
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	0011      	movs	r1, r2
 800b030:	0018      	movs	r0, r3
 800b032:	f000 fd53 	bl	800badc <USBD_CtlError>
      break;
 800b036:	46c0      	nop			; (mov r8, r8)
  }

  return USBD_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	0018      	movs	r0, r3
 800b03c:	46bd      	mov	sp, r7
 800b03e:	b004      	add	sp, #16
 800b040:	bdb0      	pop	{r4, r5, r7, pc}

0800b042 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800b042:	b5b0      	push	{r4, r5, r7, lr}
 800b044:	b084      	sub	sp, #16
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
 800b04a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b04c:	230f      	movs	r3, #15
 800b04e:	18fb      	adds	r3, r7, r3
 800b050:	2200      	movs	r2, #0
 800b052:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800b054:	683b      	ldr	r3, [r7, #0]
 800b056:	889a      	ldrh	r2, [r3, #4]
 800b058:	230e      	movs	r3, #14
 800b05a:	18fb      	adds	r3, r7, r3
 800b05c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	001a      	movs	r2, r3
 800b064:	2360      	movs	r3, #96	; 0x60
 800b066:	4013      	ands	r3, r2
 800b068:	2b40      	cmp	r3, #64	; 0x40
 800b06a:	d006      	beq.n	800b07a <USBD_StdEPReq+0x38>
 800b06c:	d900      	bls.n	800b070 <USBD_StdEPReq+0x2e>
 800b06e:	e190      	b.n	800b392 <USBD_StdEPReq+0x350>
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00c      	beq.n	800b08e <USBD_StdEPReq+0x4c>
 800b074:	2b20      	cmp	r3, #32
 800b076:	d000      	beq.n	800b07a <USBD_StdEPReq+0x38>
 800b078:	e18b      	b.n	800b392 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800b07a:	687a      	ldr	r2, [r7, #4]
 800b07c:	23ad      	movs	r3, #173	; 0xad
 800b07e:	009b      	lsls	r3, r3, #2
 800b080:	58d3      	ldr	r3, [r2, r3]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	6839      	ldr	r1, [r7, #0]
 800b086:	687a      	ldr	r2, [r7, #4]
 800b088:	0010      	movs	r0, r2
 800b08a:	4798      	blx	r3
      break;
 800b08c:	e188      	b.n	800b3a0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	001a      	movs	r2, r3
 800b094:	2360      	movs	r3, #96	; 0x60
 800b096:	4013      	ands	r3, r2
 800b098:	2b20      	cmp	r3, #32
 800b09a:	d10f      	bne.n	800b0bc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b09c:	687a      	ldr	r2, [r7, #4]
 800b09e:	23ad      	movs	r3, #173	; 0xad
 800b0a0:	009b      	lsls	r3, r3, #2
 800b0a2:	58d3      	ldr	r3, [r2, r3]
 800b0a4:	689b      	ldr	r3, [r3, #8]
 800b0a6:	250f      	movs	r5, #15
 800b0a8:	197c      	adds	r4, r7, r5
 800b0aa:	6839      	ldr	r1, [r7, #0]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	0010      	movs	r0, r2
 800b0b0:	4798      	blx	r3
 800b0b2:	0003      	movs	r3, r0
 800b0b4:	7023      	strb	r3, [r4, #0]

        return ret;
 800b0b6:	197b      	adds	r3, r7, r5
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	e174      	b.n	800b3a6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	785b      	ldrb	r3, [r3, #1]
 800b0c0:	2b03      	cmp	r3, #3
 800b0c2:	d007      	beq.n	800b0d4 <USBD_StdEPReq+0x92>
 800b0c4:	dd00      	ble.n	800b0c8 <USBD_StdEPReq+0x86>
 800b0c6:	e15c      	b.n	800b382 <USBD_StdEPReq+0x340>
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d100      	bne.n	800b0ce <USBD_StdEPReq+0x8c>
 800b0cc:	e092      	b.n	800b1f4 <USBD_StdEPReq+0x1b2>
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d04b      	beq.n	800b16a <USBD_StdEPReq+0x128>
 800b0d2:	e156      	b.n	800b382 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	23a7      	movs	r3, #167	; 0xa7
 800b0d8:	009b      	lsls	r3, r3, #2
 800b0da:	5cd3      	ldrb	r3, [r2, r3]
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d002      	beq.n	800b0e6 <USBD_StdEPReq+0xa4>
 800b0e0:	2b03      	cmp	r3, #3
 800b0e2:	d01d      	beq.n	800b120 <USBD_StdEPReq+0xde>
 800b0e4:	e039      	b.n	800b15a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0e6:	220e      	movs	r2, #14
 800b0e8:	18bb      	adds	r3, r7, r2
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d010      	beq.n	800b112 <USBD_StdEPReq+0xd0>
 800b0f0:	18bb      	adds	r3, r7, r2
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	2b80      	cmp	r3, #128	; 0x80
 800b0f6:	d00c      	beq.n	800b112 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b0f8:	18bb      	adds	r3, r7, r2
 800b0fa:	781a      	ldrb	r2, [r3, #0]
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	0011      	movs	r1, r2
 800b100:	0018      	movs	r0, r3
 800b102:	f001 fa32 	bl	800c56a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2180      	movs	r1, #128	; 0x80
 800b10a:	0018      	movs	r0, r3
 800b10c:	f001 fa2d 	bl	800c56a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b110:	e02a      	b.n	800b168 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	0011      	movs	r1, r2
 800b118:	0018      	movs	r0, r3
 800b11a:	f000 fcdf 	bl	800badc <USBD_CtlError>
              break;
 800b11e:	e023      	b.n	800b168 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	885b      	ldrh	r3, [r3, #2]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d113      	bne.n	800b150 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800b128:	220e      	movs	r2, #14
 800b12a:	18bb      	adds	r3, r7, r2
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d00e      	beq.n	800b150 <USBD_StdEPReq+0x10e>
 800b132:	18bb      	adds	r3, r7, r2
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	2b80      	cmp	r3, #128	; 0x80
 800b138:	d00a      	beq.n	800b150 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b13a:	683b      	ldr	r3, [r7, #0]
 800b13c:	88db      	ldrh	r3, [r3, #6]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800b142:	18bb      	adds	r3, r7, r2
 800b144:	781a      	ldrb	r2, [r3, #0]
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	0011      	movs	r1, r2
 800b14a:	0018      	movs	r0, r3
 800b14c:	f001 fa0d 	bl	800c56a <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	0018      	movs	r0, r3
 800b154:	f000 fdaa 	bl	800bcac <USBD_CtlSendStatus>

              break;
 800b158:	e006      	b.n	800b168 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	0011      	movs	r1, r2
 800b160:	0018      	movs	r0, r3
 800b162:	f000 fcbb 	bl	800badc <USBD_CtlError>
              break;
 800b166:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b168:	e112      	b.n	800b390 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b16a:	687a      	ldr	r2, [r7, #4]
 800b16c:	23a7      	movs	r3, #167	; 0xa7
 800b16e:	009b      	lsls	r3, r3, #2
 800b170:	5cd3      	ldrb	r3, [r2, r3]
 800b172:	2b02      	cmp	r3, #2
 800b174:	d002      	beq.n	800b17c <USBD_StdEPReq+0x13a>
 800b176:	2b03      	cmp	r3, #3
 800b178:	d01d      	beq.n	800b1b6 <USBD_StdEPReq+0x174>
 800b17a:	e032      	b.n	800b1e2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b17c:	220e      	movs	r2, #14
 800b17e:	18bb      	adds	r3, r7, r2
 800b180:	781b      	ldrb	r3, [r3, #0]
 800b182:	2b00      	cmp	r3, #0
 800b184:	d010      	beq.n	800b1a8 <USBD_StdEPReq+0x166>
 800b186:	18bb      	adds	r3, r7, r2
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	2b80      	cmp	r3, #128	; 0x80
 800b18c:	d00c      	beq.n	800b1a8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800b18e:	18bb      	adds	r3, r7, r2
 800b190:	781a      	ldrb	r2, [r3, #0]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	0011      	movs	r1, r2
 800b196:	0018      	movs	r0, r3
 800b198:	f001 f9e7 	bl	800c56a <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2180      	movs	r1, #128	; 0x80
 800b1a0:	0018      	movs	r0, r3
 800b1a2:	f001 f9e2 	bl	800c56a <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b1a6:	e024      	b.n	800b1f2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	0011      	movs	r1, r2
 800b1ae:	0018      	movs	r0, r3
 800b1b0:	f000 fc94 	bl	800badc <USBD_CtlError>
              break;
 800b1b4:	e01d      	b.n	800b1f2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	885b      	ldrh	r3, [r3, #2]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d118      	bne.n	800b1f0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b1be:	210e      	movs	r1, #14
 800b1c0:	187b      	adds	r3, r7, r1
 800b1c2:	781b      	ldrb	r3, [r3, #0]
 800b1c4:	227f      	movs	r2, #127	; 0x7f
 800b1c6:	4013      	ands	r3, r2
 800b1c8:	d006      	beq.n	800b1d8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800b1ca:	187b      	adds	r3, r7, r1
 800b1cc:	781a      	ldrb	r2, [r3, #0]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	0011      	movs	r1, r2
 800b1d2:	0018      	movs	r0, r3
 800b1d4:	f001 f9f4 	bl	800c5c0 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	0018      	movs	r0, r3
 800b1dc:	f000 fd66 	bl	800bcac <USBD_CtlSendStatus>
              }
              break;
 800b1e0:	e006      	b.n	800b1f0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800b1e2:	683a      	ldr	r2, [r7, #0]
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	0011      	movs	r1, r2
 800b1e8:	0018      	movs	r0, r3
 800b1ea:	f000 fc77 	bl	800badc <USBD_CtlError>
              break;
 800b1ee:	e000      	b.n	800b1f2 <USBD_StdEPReq+0x1b0>
              break;
 800b1f0:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b1f2:	e0cd      	b.n	800b390 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	23a7      	movs	r3, #167	; 0xa7
 800b1f8:	009b      	lsls	r3, r3, #2
 800b1fa:	5cd3      	ldrb	r3, [r2, r3]
 800b1fc:	2b02      	cmp	r3, #2
 800b1fe:	d002      	beq.n	800b206 <USBD_StdEPReq+0x1c4>
 800b200:	2b03      	cmp	r3, #3
 800b202:	d03c      	beq.n	800b27e <USBD_StdEPReq+0x23c>
 800b204:	e0b5      	b.n	800b372 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b206:	220e      	movs	r2, #14
 800b208:	18bb      	adds	r3, r7, r2
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00a      	beq.n	800b226 <USBD_StdEPReq+0x1e4>
 800b210:	18bb      	adds	r3, r7, r2
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b80      	cmp	r3, #128	; 0x80
 800b216:	d006      	beq.n	800b226 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800b218:	683a      	ldr	r2, [r7, #0]
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	0011      	movs	r1, r2
 800b21e:	0018      	movs	r0, r3
 800b220:	f000 fc5c 	bl	800badc <USBD_CtlError>
                break;
 800b224:	e0ac      	b.n	800b380 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b226:	220e      	movs	r2, #14
 800b228:	18bb      	adds	r3, r7, r2
 800b22a:	781b      	ldrb	r3, [r3, #0]
 800b22c:	b25b      	sxtb	r3, r3
 800b22e:	2b00      	cmp	r3, #0
 800b230:	da0c      	bge.n	800b24c <USBD_StdEPReq+0x20a>
 800b232:	18bb      	adds	r3, r7, r2
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	227f      	movs	r2, #127	; 0x7f
 800b238:	401a      	ands	r2, r3
 800b23a:	0013      	movs	r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	189b      	adds	r3, r3, r2
 800b240:	009b      	lsls	r3, r3, #2
 800b242:	3310      	adds	r3, #16
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	18d3      	adds	r3, r2, r3
 800b248:	3304      	adds	r3, #4
 800b24a:	e00d      	b.n	800b268 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b24c:	230e      	movs	r3, #14
 800b24e:	18fb      	adds	r3, r7, r3
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	227f      	movs	r2, #127	; 0x7f
 800b254:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b256:	0013      	movs	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	189b      	adds	r3, r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	3351      	adds	r3, #81	; 0x51
 800b260:	33ff      	adds	r3, #255	; 0xff
 800b262:	687a      	ldr	r2, [r7, #4]
 800b264:	18d3      	adds	r3, r2, r3
 800b266:	3304      	adds	r3, #4
 800b268:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	2200      	movs	r2, #0
 800b26e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2202      	movs	r2, #2
 800b276:	0018      	movs	r0, r3
 800b278:	f000 fcae 	bl	800bbd8 <USBD_CtlSendData>
              break;
 800b27c:	e080      	b.n	800b380 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b27e:	220e      	movs	r2, #14
 800b280:	18bb      	adds	r3, r7, r2
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	b25b      	sxtb	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	da14      	bge.n	800b2b4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b28a:	18bb      	adds	r3, r7, r2
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	220f      	movs	r2, #15
 800b290:	401a      	ands	r2, r3
 800b292:	6879      	ldr	r1, [r7, #4]
 800b294:	0013      	movs	r3, r2
 800b296:	009b      	lsls	r3, r3, #2
 800b298:	189b      	adds	r3, r3, r2
 800b29a:	009b      	lsls	r3, r3, #2
 800b29c:	18cb      	adds	r3, r1, r3
 800b29e:	3318      	adds	r3, #24
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d11e      	bne.n	800b2e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b2a6:	683a      	ldr	r2, [r7, #0]
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	0011      	movs	r1, r2
 800b2ac:	0018      	movs	r0, r3
 800b2ae:	f000 fc15 	bl	800badc <USBD_CtlError>
                  break;
 800b2b2:	e065      	b.n	800b380 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b2b4:	230e      	movs	r3, #14
 800b2b6:	18fb      	adds	r3, r7, r3
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	220f      	movs	r2, #15
 800b2bc:	401a      	ands	r2, r3
 800b2be:	6878      	ldr	r0, [r7, #4]
 800b2c0:	23ac      	movs	r3, #172	; 0xac
 800b2c2:	0059      	lsls	r1, r3, #1
 800b2c4:	0013      	movs	r3, r2
 800b2c6:	009b      	lsls	r3, r3, #2
 800b2c8:	189b      	adds	r3, r3, r2
 800b2ca:	009b      	lsls	r3, r3, #2
 800b2cc:	18c3      	adds	r3, r0, r3
 800b2ce:	185b      	adds	r3, r3, r1
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d106      	bne.n	800b2e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800b2d6:	683a      	ldr	r2, [r7, #0]
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	0011      	movs	r1, r2
 800b2dc:	0018      	movs	r0, r3
 800b2de:	f000 fbfd 	bl	800badc <USBD_CtlError>
                  break;
 800b2e2:	e04d      	b.n	800b380 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b2e4:	220e      	movs	r2, #14
 800b2e6:	18bb      	adds	r3, r7, r2
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	b25b      	sxtb	r3, r3
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	da0c      	bge.n	800b30a <USBD_StdEPReq+0x2c8>
 800b2f0:	18bb      	adds	r3, r7, r2
 800b2f2:	781b      	ldrb	r3, [r3, #0]
 800b2f4:	227f      	movs	r2, #127	; 0x7f
 800b2f6:	401a      	ands	r2, r3
 800b2f8:	0013      	movs	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	189b      	adds	r3, r3, r2
 800b2fe:	009b      	lsls	r3, r3, #2
 800b300:	3310      	adds	r3, #16
 800b302:	687a      	ldr	r2, [r7, #4]
 800b304:	18d3      	adds	r3, r2, r3
 800b306:	3304      	adds	r3, #4
 800b308:	e00d      	b.n	800b326 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b30a:	230e      	movs	r3, #14
 800b30c:	18fb      	adds	r3, r7, r3
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	227f      	movs	r2, #127	; 0x7f
 800b312:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b314:	0013      	movs	r3, r2
 800b316:	009b      	lsls	r3, r3, #2
 800b318:	189b      	adds	r3, r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	3351      	adds	r3, #81	; 0x51
 800b31e:	33ff      	adds	r3, #255	; 0xff
 800b320:	687a      	ldr	r2, [r7, #4]
 800b322:	18d3      	adds	r3, r2, r3
 800b324:	3304      	adds	r3, #4
 800b326:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b328:	220e      	movs	r2, #14
 800b32a:	18bb      	adds	r3, r7, r2
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d003      	beq.n	800b33a <USBD_StdEPReq+0x2f8>
 800b332:	18bb      	adds	r3, r7, r2
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b80      	cmp	r3, #128	; 0x80
 800b338:	d103      	bne.n	800b342 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2200      	movs	r2, #0
 800b33e:	601a      	str	r2, [r3, #0]
 800b340:	e010      	b.n	800b364 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800b342:	230e      	movs	r3, #14
 800b344:	18fb      	adds	r3, r7, r3
 800b346:	781a      	ldrb	r2, [r3, #0]
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	0011      	movs	r1, r2
 800b34c:	0018      	movs	r0, r3
 800b34e:	f001 f962 	bl	800c616 <USBD_LL_IsStallEP>
 800b352:	1e03      	subs	r3, r0, #0
 800b354:	d003      	beq.n	800b35e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	2201      	movs	r2, #1
 800b35a:	601a      	str	r2, [r3, #0]
 800b35c:	e002      	b.n	800b364 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2200      	movs	r2, #0
 800b362:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800b364:	68b9      	ldr	r1, [r7, #8]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2202      	movs	r2, #2
 800b36a:	0018      	movs	r0, r3
 800b36c:	f000 fc34 	bl	800bbd8 <USBD_CtlSendData>
              break;
 800b370:	e006      	b.n	800b380 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800b372:	683a      	ldr	r2, [r7, #0]
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	0011      	movs	r1, r2
 800b378:	0018      	movs	r0, r3
 800b37a:	f000 fbaf 	bl	800badc <USBD_CtlError>
              break;
 800b37e:	46c0      	nop			; (mov r8, r8)
          }
          break;
 800b380:	e006      	b.n	800b390 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	0011      	movs	r1, r2
 800b388:	0018      	movs	r0, r3
 800b38a:	f000 fba7 	bl	800badc <USBD_CtlError>
          break;
 800b38e:	46c0      	nop			; (mov r8, r8)
      }
      break;
 800b390:	e006      	b.n	800b3a0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	0011      	movs	r1, r2
 800b398:	0018      	movs	r0, r3
 800b39a:	f000 fb9f 	bl	800badc <USBD_CtlError>
      break;
 800b39e:	46c0      	nop			; (mov r8, r8)
  }

  return ret;
 800b3a0:	230f      	movs	r3, #15
 800b3a2:	18fb      	adds	r3, r7, r3
 800b3a4:	781b      	ldrb	r3, [r3, #0]
}
 800b3a6:	0018      	movs	r0, r3
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	b004      	add	sp, #16
 800b3ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800b3b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b084      	sub	sp, #16
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b3ba:	2308      	movs	r3, #8
 800b3bc:	18fb      	adds	r3, r7, r3
 800b3be:	2200      	movs	r2, #0
 800b3c0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b3c6:	230b      	movs	r3, #11
 800b3c8:	18fb      	adds	r3, r7, r3
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	885b      	ldrh	r3, [r3, #2]
 800b3d2:	0a1b      	lsrs	r3, r3, #8
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	2b07      	cmp	r3, #7
 800b3d8:	d900      	bls.n	800b3dc <USBD_GetDescriptor+0x2c>
 800b3da:	e159      	b.n	800b690 <USBD_GetDescriptor+0x2e0>
 800b3dc:	009a      	lsls	r2, r3, #2
 800b3de:	4bcb      	ldr	r3, [pc, #812]	; (800b70c <USBD_GetDescriptor+0x35c>)
 800b3e0:	18d3      	adds	r3, r2, r3
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3e6:	687a      	ldr	r2, [r7, #4]
 800b3e8:	23ac      	movs	r3, #172	; 0xac
 800b3ea:	009b      	lsls	r3, r3, #2
 800b3ec:	58d3      	ldr	r3, [r2, r3]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	687a      	ldr	r2, [r7, #4]
 800b3f2:	7c12      	ldrb	r2, [r2, #16]
 800b3f4:	2108      	movs	r1, #8
 800b3f6:	1879      	adds	r1, r7, r1
 800b3f8:	0010      	movs	r0, r2
 800b3fa:	4798      	blx	r3
 800b3fc:	0003      	movs	r3, r0
 800b3fe:	60fb      	str	r3, [r7, #12]
      break;
 800b400:	e153      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	7c1b      	ldrb	r3, [r3, #16]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d10f      	bne.n	800b42a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	23ad      	movs	r3, #173	; 0xad
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	58d3      	ldr	r3, [r2, r3]
 800b412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b414:	2208      	movs	r2, #8
 800b416:	18ba      	adds	r2, r7, r2
 800b418:	0010      	movs	r0, r2
 800b41a:	4798      	blx	r3
 800b41c:	0003      	movs	r3, r0
 800b41e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	3301      	adds	r3, #1
 800b424:	2202      	movs	r2, #2
 800b426:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b428:	e13f      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b42a:	687a      	ldr	r2, [r7, #4]
 800b42c:	23ad      	movs	r3, #173	; 0xad
 800b42e:	009b      	lsls	r3, r3, #2
 800b430:	58d3      	ldr	r3, [r2, r3]
 800b432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b434:	2208      	movs	r2, #8
 800b436:	18ba      	adds	r2, r7, r2
 800b438:	0010      	movs	r0, r2
 800b43a:	4798      	blx	r3
 800b43c:	0003      	movs	r3, r0
 800b43e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	3301      	adds	r3, #1
 800b444:	2202      	movs	r2, #2
 800b446:	701a      	strb	r2, [r3, #0]
      break;
 800b448:	e12f      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b44a:	683b      	ldr	r3, [r7, #0]
 800b44c:	885b      	ldrh	r3, [r3, #2]
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b05      	cmp	r3, #5
 800b452:	d900      	bls.n	800b456 <USBD_GetDescriptor+0xa6>
 800b454:	e0d0      	b.n	800b5f8 <USBD_GetDescriptor+0x248>
 800b456:	009a      	lsls	r2, r3, #2
 800b458:	4bad      	ldr	r3, [pc, #692]	; (800b710 <USBD_GetDescriptor+0x360>)
 800b45a:	18d3      	adds	r3, r2, r3
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	23ac      	movs	r3, #172	; 0xac
 800b464:	009b      	lsls	r3, r3, #2
 800b466:	58d3      	ldr	r3, [r2, r3]
 800b468:	685b      	ldr	r3, [r3, #4]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00d      	beq.n	800b48a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b46e:	687a      	ldr	r2, [r7, #4]
 800b470:	23ac      	movs	r3, #172	; 0xac
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	58d3      	ldr	r3, [r2, r3]
 800b476:	685b      	ldr	r3, [r3, #4]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	7c12      	ldrb	r2, [r2, #16]
 800b47c:	2108      	movs	r1, #8
 800b47e:	1879      	adds	r1, r7, r1
 800b480:	0010      	movs	r0, r2
 800b482:	4798      	blx	r3
 800b484:	0003      	movs	r3, r0
 800b486:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b488:	e0c3      	b.n	800b612 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	0011      	movs	r1, r2
 800b490:	0018      	movs	r0, r3
 800b492:	f000 fb23 	bl	800badc <USBD_CtlError>
            err++;
 800b496:	210b      	movs	r1, #11
 800b498:	187b      	adds	r3, r7, r1
 800b49a:	781a      	ldrb	r2, [r3, #0]
 800b49c:	187b      	adds	r3, r7, r1
 800b49e:	3201      	adds	r2, #1
 800b4a0:	701a      	strb	r2, [r3, #0]
          break;
 800b4a2:	e0b6      	b.n	800b612 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b4a4:	687a      	ldr	r2, [r7, #4]
 800b4a6:	23ac      	movs	r3, #172	; 0xac
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	58d3      	ldr	r3, [r2, r3]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00d      	beq.n	800b4ce <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	23ac      	movs	r3, #172	; 0xac
 800b4b6:	009b      	lsls	r3, r3, #2
 800b4b8:	58d3      	ldr	r3, [r2, r3]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	687a      	ldr	r2, [r7, #4]
 800b4be:	7c12      	ldrb	r2, [r2, #16]
 800b4c0:	2108      	movs	r1, #8
 800b4c2:	1879      	adds	r1, r7, r1
 800b4c4:	0010      	movs	r0, r2
 800b4c6:	4798      	blx	r3
 800b4c8:	0003      	movs	r3, r0
 800b4ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4cc:	e0a1      	b.n	800b612 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b4ce:	683a      	ldr	r2, [r7, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	0011      	movs	r1, r2
 800b4d4:	0018      	movs	r0, r3
 800b4d6:	f000 fb01 	bl	800badc <USBD_CtlError>
            err++;
 800b4da:	210b      	movs	r1, #11
 800b4dc:	187b      	adds	r3, r7, r1
 800b4de:	781a      	ldrb	r2, [r3, #0]
 800b4e0:	187b      	adds	r3, r7, r1
 800b4e2:	3201      	adds	r2, #1
 800b4e4:	701a      	strb	r2, [r3, #0]
          break;
 800b4e6:	e094      	b.n	800b612 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4e8:	687a      	ldr	r2, [r7, #4]
 800b4ea:	23ac      	movs	r3, #172	; 0xac
 800b4ec:	009b      	lsls	r3, r3, #2
 800b4ee:	58d3      	ldr	r3, [r2, r3]
 800b4f0:	68db      	ldr	r3, [r3, #12]
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d00d      	beq.n	800b512 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4f6:	687a      	ldr	r2, [r7, #4]
 800b4f8:	23ac      	movs	r3, #172	; 0xac
 800b4fa:	009b      	lsls	r3, r3, #2
 800b4fc:	58d3      	ldr	r3, [r2, r3]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	687a      	ldr	r2, [r7, #4]
 800b502:	7c12      	ldrb	r2, [r2, #16]
 800b504:	2108      	movs	r1, #8
 800b506:	1879      	adds	r1, r7, r1
 800b508:	0010      	movs	r0, r2
 800b50a:	4798      	blx	r3
 800b50c:	0003      	movs	r3, r0
 800b50e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b510:	e07f      	b.n	800b612 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b512:	683a      	ldr	r2, [r7, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	0011      	movs	r1, r2
 800b518:	0018      	movs	r0, r3
 800b51a:	f000 fadf 	bl	800badc <USBD_CtlError>
            err++;
 800b51e:	210b      	movs	r1, #11
 800b520:	187b      	adds	r3, r7, r1
 800b522:	781a      	ldrb	r2, [r3, #0]
 800b524:	187b      	adds	r3, r7, r1
 800b526:	3201      	adds	r2, #1
 800b528:	701a      	strb	r2, [r3, #0]
          break;
 800b52a:	e072      	b.n	800b612 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	23ac      	movs	r3, #172	; 0xac
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	58d3      	ldr	r3, [r2, r3]
 800b534:	691b      	ldr	r3, [r3, #16]
 800b536:	2b00      	cmp	r3, #0
 800b538:	d00d      	beq.n	800b556 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b53a:	687a      	ldr	r2, [r7, #4]
 800b53c:	23ac      	movs	r3, #172	; 0xac
 800b53e:	009b      	lsls	r3, r3, #2
 800b540:	58d3      	ldr	r3, [r2, r3]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	7c12      	ldrb	r2, [r2, #16]
 800b548:	2108      	movs	r1, #8
 800b54a:	1879      	adds	r1, r7, r1
 800b54c:	0010      	movs	r0, r2
 800b54e:	4798      	blx	r3
 800b550:	0003      	movs	r3, r0
 800b552:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b554:	e05d      	b.n	800b612 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	0011      	movs	r1, r2
 800b55c:	0018      	movs	r0, r3
 800b55e:	f000 fabd 	bl	800badc <USBD_CtlError>
            err++;
 800b562:	210b      	movs	r1, #11
 800b564:	187b      	adds	r3, r7, r1
 800b566:	781a      	ldrb	r2, [r3, #0]
 800b568:	187b      	adds	r3, r7, r1
 800b56a:	3201      	adds	r2, #1
 800b56c:	701a      	strb	r2, [r3, #0]
          break;
 800b56e:	e050      	b.n	800b612 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b570:	687a      	ldr	r2, [r7, #4]
 800b572:	23ac      	movs	r3, #172	; 0xac
 800b574:	009b      	lsls	r3, r3, #2
 800b576:	58d3      	ldr	r3, [r2, r3]
 800b578:	695b      	ldr	r3, [r3, #20]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00d      	beq.n	800b59a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	23ac      	movs	r3, #172	; 0xac
 800b582:	009b      	lsls	r3, r3, #2
 800b584:	58d3      	ldr	r3, [r2, r3]
 800b586:	695b      	ldr	r3, [r3, #20]
 800b588:	687a      	ldr	r2, [r7, #4]
 800b58a:	7c12      	ldrb	r2, [r2, #16]
 800b58c:	2108      	movs	r1, #8
 800b58e:	1879      	adds	r1, r7, r1
 800b590:	0010      	movs	r0, r2
 800b592:	4798      	blx	r3
 800b594:	0003      	movs	r3, r0
 800b596:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b598:	e03b      	b.n	800b612 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b59a:	683a      	ldr	r2, [r7, #0]
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	0011      	movs	r1, r2
 800b5a0:	0018      	movs	r0, r3
 800b5a2:	f000 fa9b 	bl	800badc <USBD_CtlError>
            err++;
 800b5a6:	210b      	movs	r1, #11
 800b5a8:	187b      	adds	r3, r7, r1
 800b5aa:	781a      	ldrb	r2, [r3, #0]
 800b5ac:	187b      	adds	r3, r7, r1
 800b5ae:	3201      	adds	r2, #1
 800b5b0:	701a      	strb	r2, [r3, #0]
          break;
 800b5b2:	e02e      	b.n	800b612 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b5b4:	687a      	ldr	r2, [r7, #4]
 800b5b6:	23ac      	movs	r3, #172	; 0xac
 800b5b8:	009b      	lsls	r3, r3, #2
 800b5ba:	58d3      	ldr	r3, [r2, r3]
 800b5bc:	699b      	ldr	r3, [r3, #24]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00d      	beq.n	800b5de <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b5c2:	687a      	ldr	r2, [r7, #4]
 800b5c4:	23ac      	movs	r3, #172	; 0xac
 800b5c6:	009b      	lsls	r3, r3, #2
 800b5c8:	58d3      	ldr	r3, [r2, r3]
 800b5ca:	699b      	ldr	r3, [r3, #24]
 800b5cc:	687a      	ldr	r2, [r7, #4]
 800b5ce:	7c12      	ldrb	r2, [r2, #16]
 800b5d0:	2108      	movs	r1, #8
 800b5d2:	1879      	adds	r1, r7, r1
 800b5d4:	0010      	movs	r0, r2
 800b5d6:	4798      	blx	r3
 800b5d8:	0003      	movs	r3, r0
 800b5da:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b5dc:	e019      	b.n	800b612 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800b5de:	683a      	ldr	r2, [r7, #0]
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	0011      	movs	r1, r2
 800b5e4:	0018      	movs	r0, r3
 800b5e6:	f000 fa79 	bl	800badc <USBD_CtlError>
            err++;
 800b5ea:	210b      	movs	r1, #11
 800b5ec:	187b      	adds	r3, r7, r1
 800b5ee:	781a      	ldrb	r2, [r3, #0]
 800b5f0:	187b      	adds	r3, r7, r1
 800b5f2:	3201      	adds	r2, #1
 800b5f4:	701a      	strb	r2, [r3, #0]
          break;
 800b5f6:	e00c      	b.n	800b612 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800b5f8:	683a      	ldr	r2, [r7, #0]
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	0011      	movs	r1, r2
 800b5fe:	0018      	movs	r0, r3
 800b600:	f000 fa6c 	bl	800badc <USBD_CtlError>
          err++;
 800b604:	210b      	movs	r1, #11
 800b606:	187b      	adds	r3, r7, r1
 800b608:	781a      	ldrb	r2, [r3, #0]
 800b60a:	187b      	adds	r3, r7, r1
 800b60c:	3201      	adds	r2, #1
 800b60e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800b610:	e04b      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>
 800b612:	e04a      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7c1b      	ldrb	r3, [r3, #16]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d10b      	bne.n	800b634 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b61c:	687a      	ldr	r2, [r7, #4]
 800b61e:	23ad      	movs	r3, #173	; 0xad
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	58d3      	ldr	r3, [r2, r3]
 800b624:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b626:	2208      	movs	r2, #8
 800b628:	18ba      	adds	r2, r7, r2
 800b62a:	0010      	movs	r0, r2
 800b62c:	4798      	blx	r3
 800b62e:	0003      	movs	r3, r0
 800b630:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b632:	e03a      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	0011      	movs	r1, r2
 800b63a:	0018      	movs	r0, r3
 800b63c:	f000 fa4e 	bl	800badc <USBD_CtlError>
        err++;
 800b640:	210b      	movs	r1, #11
 800b642:	187b      	adds	r3, r7, r1
 800b644:	781a      	ldrb	r2, [r3, #0]
 800b646:	187b      	adds	r3, r7, r1
 800b648:	3201      	adds	r2, #1
 800b64a:	701a      	strb	r2, [r3, #0]
      break;
 800b64c:	e02d      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	7c1b      	ldrb	r3, [r3, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d10f      	bne.n	800b676 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b656:	687a      	ldr	r2, [r7, #4]
 800b658:	23ad      	movs	r3, #173	; 0xad
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	58d3      	ldr	r3, [r2, r3]
 800b65e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b660:	2208      	movs	r2, #8
 800b662:	18ba      	adds	r2, r7, r2
 800b664:	0010      	movs	r0, r2
 800b666:	4798      	blx	r3
 800b668:	0003      	movs	r3, r0
 800b66a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	3301      	adds	r3, #1
 800b670:	2207      	movs	r2, #7
 800b672:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b674:	e019      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800b676:	683a      	ldr	r2, [r7, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	0011      	movs	r1, r2
 800b67c:	0018      	movs	r0, r3
 800b67e:	f000 fa2d 	bl	800badc <USBD_CtlError>
        err++;
 800b682:	210b      	movs	r1, #11
 800b684:	187b      	adds	r3, r7, r1
 800b686:	781a      	ldrb	r2, [r3, #0]
 800b688:	187b      	adds	r3, r7, r1
 800b68a:	3201      	adds	r2, #1
 800b68c:	701a      	strb	r2, [r3, #0]
      break;
 800b68e:	e00c      	b.n	800b6aa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800b690:	683a      	ldr	r2, [r7, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	0011      	movs	r1, r2
 800b696:	0018      	movs	r0, r3
 800b698:	f000 fa20 	bl	800badc <USBD_CtlError>
      err++;
 800b69c:	210b      	movs	r1, #11
 800b69e:	187b      	adds	r3, r7, r1
 800b6a0:	781a      	ldrb	r2, [r3, #0]
 800b6a2:	187b      	adds	r3, r7, r1
 800b6a4:	3201      	adds	r2, #1
 800b6a6:	701a      	strb	r2, [r3, #0]
      break;
 800b6a8:	46c0      	nop			; (mov r8, r8)
  }

  if (err != 0U)
 800b6aa:	230b      	movs	r3, #11
 800b6ac:	18fb      	adds	r3, r7, r3
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d127      	bne.n	800b704 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800b6b4:	2108      	movs	r1, #8
 800b6b6:	187b      	adds	r3, r7, r1
 800b6b8:	881b      	ldrh	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d019      	beq.n	800b6f2 <USBD_GetDescriptor+0x342>
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	88db      	ldrh	r3, [r3, #6]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d015      	beq.n	800b6f2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	88da      	ldrh	r2, [r3, #6]
 800b6ca:	187b      	adds	r3, r7, r1
 800b6cc:	881b      	ldrh	r3, [r3, #0]
 800b6ce:	1c18      	adds	r0, r3, #0
 800b6d0:	1c11      	adds	r1, r2, #0
 800b6d2:	b28a      	uxth	r2, r1
 800b6d4:	b283      	uxth	r3, r0
 800b6d6:	429a      	cmp	r2, r3
 800b6d8:	d900      	bls.n	800b6dc <USBD_GetDescriptor+0x32c>
 800b6da:	1c01      	adds	r1, r0, #0
 800b6dc:	b28a      	uxth	r2, r1
 800b6de:	2108      	movs	r1, #8
 800b6e0:	187b      	adds	r3, r7, r1
 800b6e2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b6e4:	187b      	adds	r3, r7, r1
 800b6e6:	881a      	ldrh	r2, [r3, #0]
 800b6e8:	68f9      	ldr	r1, [r7, #12]
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	f000 fa73 	bl	800bbd8 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	88db      	ldrh	r3, [r3, #6]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d105      	bne.n	800b706 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	0018      	movs	r0, r3
 800b6fe:	f000 fad5 	bl	800bcac <USBD_CtlSendStatus>
 800b702:	e000      	b.n	800b706 <USBD_GetDescriptor+0x356>
    return;
 800b704:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b706:	46bd      	mov	sp, r7
 800b708:	b004      	add	sp, #16
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	0800eedc 	.word	0x0800eedc
 800b710:	0800eefc 	.word	0x0800eefc

0800b714 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b714:	b590      	push	{r4, r7, lr}
 800b716:	b085      	sub	sp, #20
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	889b      	ldrh	r3, [r3, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d13d      	bne.n	800b7a2 <USBD_SetAddress+0x8e>
 800b726:	683b      	ldr	r3, [r7, #0]
 800b728:	88db      	ldrh	r3, [r3, #6]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d139      	bne.n	800b7a2 <USBD_SetAddress+0x8e>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	885b      	ldrh	r3, [r3, #2]
 800b732:	2b7f      	cmp	r3, #127	; 0x7f
 800b734:	d835      	bhi.n	800b7a2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	885b      	ldrh	r3, [r3, #2]
 800b73a:	b2da      	uxtb	r2, r3
 800b73c:	230f      	movs	r3, #15
 800b73e:	18fb      	adds	r3, r7, r3
 800b740:	217f      	movs	r1, #127	; 0x7f
 800b742:	400a      	ands	r2, r1
 800b744:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b746:	687a      	ldr	r2, [r7, #4]
 800b748:	23a7      	movs	r3, #167	; 0xa7
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	5cd3      	ldrb	r3, [r2, r3]
 800b74e:	2b03      	cmp	r3, #3
 800b750:	d106      	bne.n	800b760 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800b752:	683a      	ldr	r2, [r7, #0]
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	0011      	movs	r1, r2
 800b758:	0018      	movs	r0, r3
 800b75a:	f000 f9bf 	bl	800badc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b75e:	e027      	b.n	800b7b0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	240f      	movs	r4, #15
 800b764:	193a      	adds	r2, r7, r4
 800b766:	4914      	ldr	r1, [pc, #80]	; (800b7b8 <USBD_SetAddress+0xa4>)
 800b768:	7812      	ldrb	r2, [r2, #0]
 800b76a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b76c:	193b      	adds	r3, r7, r4
 800b76e:	781a      	ldrb	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	0011      	movs	r1, r2
 800b774:	0018      	movs	r0, r3
 800b776:	f000 ff7f 	bl	800c678 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	0018      	movs	r0, r3
 800b77e:	f000 fa95 	bl	800bcac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b782:	193b      	adds	r3, r7, r4
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d005      	beq.n	800b796 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	23a7      	movs	r3, #167	; 0xa7
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	2102      	movs	r1, #2
 800b792:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b794:	e00c      	b.n	800b7b0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	23a7      	movs	r3, #167	; 0xa7
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	2101      	movs	r1, #1
 800b79e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7a0:	e006      	b.n	800b7b0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b7a2:	683a      	ldr	r2, [r7, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	0011      	movs	r1, r2
 800b7a8:	0018      	movs	r0, r3
 800b7aa:	f000 f997 	bl	800badc <USBD_CtlError>
  }
}
 800b7ae:	46c0      	nop			; (mov r8, r8)
 800b7b0:	46c0      	nop			; (mov r8, r8)
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	b005      	add	sp, #20
 800b7b6:	bd90      	pop	{r4, r7, pc}
 800b7b8:	0000029e 	.word	0x0000029e

0800b7bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b082      	sub	sp, #8
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	885b      	ldrh	r3, [r3, #2]
 800b7ca:	b2da      	uxtb	r2, r3
 800b7cc:	4b4c      	ldr	r3, [pc, #304]	; (800b900 <USBD_SetConfig+0x144>)
 800b7ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b7d0:	4b4b      	ldr	r3, [pc, #300]	; (800b900 <USBD_SetConfig+0x144>)
 800b7d2:	781b      	ldrb	r3, [r3, #0]
 800b7d4:	2b01      	cmp	r3, #1
 800b7d6:	d906      	bls.n	800b7e6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	0011      	movs	r1, r2
 800b7de:	0018      	movs	r0, r3
 800b7e0:	f000 f97c 	bl	800badc <USBD_CtlError>
 800b7e4:	e088      	b.n	800b8f8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800b7e6:	687a      	ldr	r2, [r7, #4]
 800b7e8:	23a7      	movs	r3, #167	; 0xa7
 800b7ea:	009b      	lsls	r3, r3, #2
 800b7ec:	5cd3      	ldrb	r3, [r2, r3]
 800b7ee:	2b02      	cmp	r3, #2
 800b7f0:	d002      	beq.n	800b7f8 <USBD_SetConfig+0x3c>
 800b7f2:	2b03      	cmp	r3, #3
 800b7f4:	d029      	beq.n	800b84a <USBD_SetConfig+0x8e>
 800b7f6:	e071      	b.n	800b8dc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800b7f8:	4b41      	ldr	r3, [pc, #260]	; (800b900 <USBD_SetConfig+0x144>)
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d01f      	beq.n	800b840 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800b800:	4b3f      	ldr	r3, [pc, #252]	; (800b900 <USBD_SetConfig+0x144>)
 800b802:	781b      	ldrb	r3, [r3, #0]
 800b804:	001a      	movs	r2, r3
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	23a7      	movs	r3, #167	; 0xa7
 800b80e:	009b      	lsls	r3, r3, #2
 800b810:	2103      	movs	r1, #3
 800b812:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b814:	4b3a      	ldr	r3, [pc, #232]	; (800b900 <USBD_SetConfig+0x144>)
 800b816:	781a      	ldrb	r2, [r3, #0]
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	0011      	movs	r1, r2
 800b81c:	0018      	movs	r0, r3
 800b81e:	f7ff f8c6 	bl	800a9ae <USBD_SetClassConfig>
 800b822:	0003      	movs	r3, r0
 800b824:	2b02      	cmp	r3, #2
 800b826:	d106      	bne.n	800b836 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800b828:	683a      	ldr	r2, [r7, #0]
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	0011      	movs	r1, r2
 800b82e:	0018      	movs	r0, r3
 800b830:	f000 f954 	bl	800badc <USBD_CtlError>
            return;
 800b834:	e060      	b.n	800b8f8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	0018      	movs	r0, r3
 800b83a:	f000 fa37 	bl	800bcac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b83e:	e05b      	b.n	800b8f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	0018      	movs	r0, r3
 800b844:	f000 fa32 	bl	800bcac <USBD_CtlSendStatus>
        break;
 800b848:	e056      	b.n	800b8f8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800b84a:	4b2d      	ldr	r3, [pc, #180]	; (800b900 <USBD_SetConfig+0x144>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d115      	bne.n	800b87e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	23a7      	movs	r3, #167	; 0xa7
 800b856:	009b      	lsls	r3, r3, #2
 800b858:	2102      	movs	r1, #2
 800b85a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800b85c:	4b28      	ldr	r3, [pc, #160]	; (800b900 <USBD_SetConfig+0x144>)
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	001a      	movs	r2, r3
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800b866:	4b26      	ldr	r3, [pc, #152]	; (800b900 <USBD_SetConfig+0x144>)
 800b868:	781a      	ldrb	r2, [r3, #0]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	0011      	movs	r1, r2
 800b86e:	0018      	movs	r0, r3
 800b870:	f7ff f8c4 	bl	800a9fc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	0018      	movs	r0, r3
 800b878:	f000 fa18 	bl	800bcac <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800b87c:	e03c      	b.n	800b8f8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800b87e:	4b20      	ldr	r3, [pc, #128]	; (800b900 <USBD_SetConfig+0x144>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	001a      	movs	r2, r3
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d022      	beq.n	800b8d2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	b2da      	uxtb	r2, r3
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	0011      	movs	r1, r2
 800b896:	0018      	movs	r0, r3
 800b898:	f7ff f8b0 	bl	800a9fc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800b89c:	4b18      	ldr	r3, [pc, #96]	; (800b900 <USBD_SetConfig+0x144>)
 800b89e:	781b      	ldrb	r3, [r3, #0]
 800b8a0:	001a      	movs	r2, r3
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800b8a6:	4b16      	ldr	r3, [pc, #88]	; (800b900 <USBD_SetConfig+0x144>)
 800b8a8:	781a      	ldrb	r2, [r3, #0]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	0011      	movs	r1, r2
 800b8ae:	0018      	movs	r0, r3
 800b8b0:	f7ff f87d 	bl	800a9ae <USBD_SetClassConfig>
 800b8b4:	0003      	movs	r3, r0
 800b8b6:	2b02      	cmp	r3, #2
 800b8b8:	d106      	bne.n	800b8c8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	0011      	movs	r1, r2
 800b8c0:	0018      	movs	r0, r3
 800b8c2:	f000 f90b 	bl	800badc <USBD_CtlError>
            return;
 800b8c6:	e017      	b.n	800b8f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	0018      	movs	r0, r3
 800b8cc:	f000 f9ee 	bl	800bcac <USBD_CtlSendStatus>
        break;
 800b8d0:	e012      	b.n	800b8f8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	0018      	movs	r0, r3
 800b8d6:	f000 f9e9 	bl	800bcac <USBD_CtlSendStatus>
        break;
 800b8da:	e00d      	b.n	800b8f8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800b8dc:	683a      	ldr	r2, [r7, #0]
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	0011      	movs	r1, r2
 800b8e2:	0018      	movs	r0, r3
 800b8e4:	f000 f8fa 	bl	800badc <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800b8e8:	4b05      	ldr	r3, [pc, #20]	; (800b900 <USBD_SetConfig+0x144>)
 800b8ea:	781a      	ldrb	r2, [r3, #0]
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	0011      	movs	r1, r2
 800b8f0:	0018      	movs	r0, r3
 800b8f2:	f7ff f883 	bl	800a9fc <USBD_ClrClassConfig>
        break;
 800b8f6:	46c0      	nop			; (mov r8, r8)
    }
  }
}
 800b8f8:	46bd      	mov	sp, r7
 800b8fa:	b002      	add	sp, #8
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	46c0      	nop			; (mov r8, r8)
 800b900:	200008e8 	.word	0x200008e8

0800b904 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
 800b90c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b90e:	683b      	ldr	r3, [r7, #0]
 800b910:	88db      	ldrh	r3, [r3, #6]
 800b912:	2b01      	cmp	r3, #1
 800b914:	d006      	beq.n	800b924 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800b916:	683a      	ldr	r2, [r7, #0]
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	0011      	movs	r1, r2
 800b91c:	0018      	movs	r0, r3
 800b91e:	f000 f8dd 	bl	800badc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b922:	e026      	b.n	800b972 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	23a7      	movs	r3, #167	; 0xa7
 800b928:	009b      	lsls	r3, r3, #2
 800b92a:	5cd3      	ldrb	r3, [r2, r3]
 800b92c:	2b02      	cmp	r3, #2
 800b92e:	dc02      	bgt.n	800b936 <USBD_GetConfig+0x32>
 800b930:	2b00      	cmp	r3, #0
 800b932:	dc03      	bgt.n	800b93c <USBD_GetConfig+0x38>
 800b934:	e016      	b.n	800b964 <USBD_GetConfig+0x60>
 800b936:	2b03      	cmp	r3, #3
 800b938:	d00c      	beq.n	800b954 <USBD_GetConfig+0x50>
 800b93a:	e013      	b.n	800b964 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2200      	movs	r2, #0
 800b940:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	3308      	adds	r3, #8
 800b946:	0019      	movs	r1, r3
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2201      	movs	r2, #1
 800b94c:	0018      	movs	r0, r3
 800b94e:	f000 f943 	bl	800bbd8 <USBD_CtlSendData>
        break;
 800b952:	e00e      	b.n	800b972 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	1d19      	adds	r1, r3, #4
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2201      	movs	r2, #1
 800b95c:	0018      	movs	r0, r3
 800b95e:	f000 f93b 	bl	800bbd8 <USBD_CtlSendData>
        break;
 800b962:	e006      	b.n	800b972 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800b964:	683a      	ldr	r2, [r7, #0]
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	0011      	movs	r1, r2
 800b96a:	0018      	movs	r0, r3
 800b96c:	f000 f8b6 	bl	800badc <USBD_CtlError>
        break;
 800b970:	46c0      	nop			; (mov r8, r8)
}
 800b972:	46c0      	nop			; (mov r8, r8)
 800b974:	46bd      	mov	sp, r7
 800b976:	b002      	add	sp, #8
 800b978:	bd80      	pop	{r7, pc}

0800b97a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b97a:	b580      	push	{r7, lr}
 800b97c:	b082      	sub	sp, #8
 800b97e:	af00      	add	r7, sp, #0
 800b980:	6078      	str	r0, [r7, #4]
 800b982:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b984:	687a      	ldr	r2, [r7, #4]
 800b986:	23a7      	movs	r3, #167	; 0xa7
 800b988:	009b      	lsls	r3, r3, #2
 800b98a:	5cd3      	ldrb	r3, [r2, r3]
 800b98c:	3b01      	subs	r3, #1
 800b98e:	2b02      	cmp	r3, #2
 800b990:	d822      	bhi.n	800b9d8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	88db      	ldrh	r3, [r3, #6]
 800b996:	2b02      	cmp	r3, #2
 800b998:	d006      	beq.n	800b9a8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800b99a:	683a      	ldr	r2, [r7, #0]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	0011      	movs	r1, r2
 800b9a0:	0018      	movs	r0, r3
 800b9a2:	f000 f89b 	bl	800badc <USBD_CtlError>
        break;
 800b9a6:	e01e      	b.n	800b9e6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800b9ae:	687a      	ldr	r2, [r7, #4]
 800b9b0:	23a9      	movs	r3, #169	; 0xa9
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	58d3      	ldr	r3, [r2, r3]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d005      	beq.n	800b9c6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	68db      	ldr	r3, [r3, #12]
 800b9be:	2202      	movs	r2, #2
 800b9c0:	431a      	orrs	r2, r3
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	330c      	adds	r3, #12
 800b9ca:	0019      	movs	r1, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	2202      	movs	r2, #2
 800b9d0:	0018      	movs	r0, r3
 800b9d2:	f000 f901 	bl	800bbd8 <USBD_CtlSendData>
      break;
 800b9d6:	e006      	b.n	800b9e6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800b9d8:	683a      	ldr	r2, [r7, #0]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	0011      	movs	r1, r2
 800b9de:	0018      	movs	r0, r3
 800b9e0:	f000 f87c 	bl	800badc <USBD_CtlError>
      break;
 800b9e4:	46c0      	nop			; (mov r8, r8)
  }
}
 800b9e6:	46c0      	nop			; (mov r8, r8)
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	b002      	add	sp, #8
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b082      	sub	sp, #8
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	885b      	ldrh	r3, [r3, #2]
 800b9fc:	2b01      	cmp	r3, #1
 800b9fe:	d108      	bne.n	800ba12 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800ba00:	687a      	ldr	r2, [r7, #4]
 800ba02:	23a9      	movs	r3, #169	; 0xa9
 800ba04:	009b      	lsls	r3, r3, #2
 800ba06:	2101      	movs	r1, #1
 800ba08:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	0018      	movs	r0, r3
 800ba0e:	f000 f94d 	bl	800bcac <USBD_CtlSendStatus>
  }
}
 800ba12:	46c0      	nop			; (mov r8, r8)
 800ba14:	46bd      	mov	sp, r7
 800ba16:	b002      	add	sp, #8
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b082      	sub	sp, #8
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	23a7      	movs	r3, #167	; 0xa7
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	5cd3      	ldrb	r3, [r2, r3]
 800ba2c:	3b01      	subs	r3, #1
 800ba2e:	2b02      	cmp	r3, #2
 800ba30:	d80d      	bhi.n	800ba4e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	885b      	ldrh	r3, [r3, #2]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d110      	bne.n	800ba5c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	23a9      	movs	r3, #169	; 0xa9
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	2100      	movs	r1, #0
 800ba42:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	0018      	movs	r0, r3
 800ba48:	f000 f930 	bl	800bcac <USBD_CtlSendStatus>
      }
      break;
 800ba4c:	e006      	b.n	800ba5c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800ba4e:	683a      	ldr	r2, [r7, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	0011      	movs	r1, r2
 800ba54:	0018      	movs	r0, r3
 800ba56:	f000 f841 	bl	800badc <USBD_CtlError>
      break;
 800ba5a:	e000      	b.n	800ba5e <USBD_ClrFeature+0x44>
      break;
 800ba5c:	46c0      	nop			; (mov r8, r8)
  }
}
 800ba5e:	46c0      	nop			; (mov r8, r8)
 800ba60:	46bd      	mov	sp, r7
 800ba62:	b002      	add	sp, #8
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ba66:	b580      	push	{r7, lr}
 800ba68:	b082      	sub	sp, #8
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ba70:	683b      	ldr	r3, [r7, #0]
 800ba72:	781a      	ldrb	r2, [r3, #0]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	785a      	ldrb	r2, [r3, #1]
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	3302      	adds	r3, #2
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	3303      	adds	r3, #3
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	b29b      	uxth	r3, r3
 800ba90:	021b      	lsls	r3, r3, #8
 800ba92:	b29b      	uxth	r3, r3
 800ba94:	18d3      	adds	r3, r2, r3
 800ba96:	b29a      	uxth	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	3304      	adds	r3, #4
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	3305      	adds	r3, #5
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	b29b      	uxth	r3, r3
 800baac:	021b      	lsls	r3, r3, #8
 800baae:	b29b      	uxth	r3, r3
 800bab0:	18d3      	adds	r3, r2, r3
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	3306      	adds	r3, #6
 800babc:	781b      	ldrb	r3, [r3, #0]
 800babe:	b29a      	uxth	r2, r3
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	3307      	adds	r3, #7
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	021b      	lsls	r3, r3, #8
 800baca:	b29b      	uxth	r3, r3
 800bacc:	18d3      	adds	r3, r2, r3
 800bace:	b29a      	uxth	r2, r3
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	80da      	strh	r2, [r3, #6]

}
 800bad4:	46c0      	nop			; (mov r8, r8)
 800bad6:	46bd      	mov	sp, r7
 800bad8:	b002      	add	sp, #8
 800bada:	bd80      	pop	{r7, pc}

0800badc <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2180      	movs	r1, #128	; 0x80
 800baea:	0018      	movs	r0, r3
 800baec:	f000 fd3d 	bl	800c56a <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	2100      	movs	r1, #0
 800baf4:	0018      	movs	r0, r3
 800baf6:	f000 fd38 	bl	800c56a <USBD_LL_StallEP>
}
 800bafa:	46c0      	nop			; (mov r8, r8)
 800bafc:	46bd      	mov	sp, r7
 800bafe:	b002      	add	sp, #8
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bb02:	b590      	push	{r4, r7, lr}
 800bb04:	b087      	sub	sp, #28
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	60f8      	str	r0, [r7, #12]
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bb0e:	2417      	movs	r4, #23
 800bb10:	193b      	adds	r3, r7, r4
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d03c      	beq.n	800bb96 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	0018      	movs	r0, r3
 800bb20:	f000 f83d 	bl	800bb9e <USBD_GetLen>
 800bb24:	0003      	movs	r3, r0
 800bb26:	3301      	adds	r3, #1
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	18db      	adds	r3, r3, r3
 800bb2c:	b29a      	uxth	r2, r3
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800bb32:	193b      	adds	r3, r7, r4
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	193a      	adds	r2, r7, r4
 800bb38:	1c59      	adds	r1, r3, #1
 800bb3a:	7011      	strb	r1, [r2, #0]
 800bb3c:	001a      	movs	r2, r3
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	189b      	adds	r3, r3, r2
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	7812      	ldrb	r2, [r2, #0]
 800bb46:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800bb48:	193b      	adds	r3, r7, r4
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	193a      	adds	r2, r7, r4
 800bb4e:	1c59      	adds	r1, r3, #1
 800bb50:	7011      	strb	r1, [r2, #0]
 800bb52:	001a      	movs	r2, r3
 800bb54:	68bb      	ldr	r3, [r7, #8]
 800bb56:	189b      	adds	r3, r3, r2
 800bb58:	2203      	movs	r2, #3
 800bb5a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800bb5c:	e017      	b.n	800bb8e <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	1c5a      	adds	r2, r3, #1
 800bb62:	60fa      	str	r2, [r7, #12]
 800bb64:	2417      	movs	r4, #23
 800bb66:	193a      	adds	r2, r7, r4
 800bb68:	7812      	ldrb	r2, [r2, #0]
 800bb6a:	1939      	adds	r1, r7, r4
 800bb6c:	1c50      	adds	r0, r2, #1
 800bb6e:	7008      	strb	r0, [r1, #0]
 800bb70:	0011      	movs	r1, r2
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	1852      	adds	r2, r2, r1
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800bb7a:	193b      	adds	r3, r7, r4
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	193a      	adds	r2, r7, r4
 800bb80:	1c59      	adds	r1, r3, #1
 800bb82:	7011      	strb	r1, [r2, #0]
 800bb84:	001a      	movs	r2, r3
 800bb86:	68bb      	ldr	r3, [r7, #8]
 800bb88:	189b      	adds	r3, r3, r2
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1e3      	bne.n	800bb5e <USBD_GetString+0x5c>
    }
  }
}
 800bb96:	46c0      	nop			; (mov r8, r8)
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	b007      	add	sp, #28
 800bb9c:	bd90      	pop	{r4, r7, pc}

0800bb9e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bb9e:	b580      	push	{r7, lr}
 800bba0:	b084      	sub	sp, #16
 800bba2:	af00      	add	r7, sp, #0
 800bba4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bba6:	230f      	movs	r3, #15
 800bba8:	18fb      	adds	r3, r7, r3
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800bbae:	e008      	b.n	800bbc2 <USBD_GetLen+0x24>
  {
    len++;
 800bbb0:	210f      	movs	r1, #15
 800bbb2:	187b      	adds	r3, r7, r1
 800bbb4:	781a      	ldrb	r2, [r3, #0]
 800bbb6:	187b      	adds	r3, r7, r1
 800bbb8:	3201      	adds	r2, #1
 800bbba:	701a      	strb	r2, [r3, #0]
    buf++;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d1f2      	bne.n	800bbb0 <USBD_GetLen+0x12>
  }

  return len;
 800bbca:	230f      	movs	r3, #15
 800bbcc:	18fb      	adds	r3, r7, r3
 800bbce:	781b      	ldrb	r3, [r3, #0]
}
 800bbd0:	0018      	movs	r0, r3
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	b004      	add	sp, #16
 800bbd6:	bd80      	pop	{r7, pc}

0800bbd8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b084      	sub	sp, #16
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	1dbb      	adds	r3, r7, #6
 800bbe4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	23a5      	movs	r3, #165	; 0xa5
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	2102      	movs	r1, #2
 800bbee:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800bbf0:	1dbb      	adds	r3, r7, #6
 800bbf2:	881a      	ldrh	r2, [r3, #0]
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800bbf8:	1dbb      	adds	r3, r7, #6
 800bbfa:	881a      	ldrh	r2, [r3, #0]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc00:	1dbb      	adds	r3, r7, #6
 800bc02:	881b      	ldrh	r3, [r3, #0]
 800bc04:	68ba      	ldr	r2, [r7, #8]
 800bc06:	68f8      	ldr	r0, [r7, #12]
 800bc08:	2100      	movs	r1, #0
 800bc0a:	f000 fd60 	bl	800c6ce <USBD_LL_Transmit>

  return USBD_OK;
 800bc0e:	2300      	movs	r3, #0
}
 800bc10:	0018      	movs	r0, r3
 800bc12:	46bd      	mov	sp, r7
 800bc14:	b004      	add	sp, #16
 800bc16:	bd80      	pop	{r7, pc}

0800bc18 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	60f8      	str	r0, [r7, #12]
 800bc20:	60b9      	str	r1, [r7, #8]
 800bc22:	1dbb      	adds	r3, r7, #6
 800bc24:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bc26:	1dbb      	adds	r3, r7, #6
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	68ba      	ldr	r2, [r7, #8]
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	2100      	movs	r1, #0
 800bc30:	f000 fd4d 	bl	800c6ce <USBD_LL_Transmit>

  return USBD_OK;
 800bc34:	2300      	movs	r3, #0
}
 800bc36:	0018      	movs	r0, r3
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	b004      	add	sp, #16
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b084      	sub	sp, #16
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	60f8      	str	r0, [r7, #12]
 800bc46:	60b9      	str	r1, [r7, #8]
 800bc48:	1dbb      	adds	r3, r7, #6
 800bc4a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	23a5      	movs	r3, #165	; 0xa5
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	2103      	movs	r1, #3
 800bc54:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800bc56:	1dbb      	adds	r3, r7, #6
 800bc58:	8819      	ldrh	r1, [r3, #0]
 800bc5a:	68fa      	ldr	r2, [r7, #12]
 800bc5c:	23ae      	movs	r3, #174	; 0xae
 800bc5e:	005b      	lsls	r3, r3, #1
 800bc60:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800bc62:	1dbb      	adds	r3, r7, #6
 800bc64:	8819      	ldrh	r1, [r3, #0]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	23b0      	movs	r3, #176	; 0xb0
 800bc6a:	005b      	lsls	r3, r3, #1
 800bc6c:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc6e:	1dbb      	adds	r3, r7, #6
 800bc70:	881b      	ldrh	r3, [r3, #0]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	68f8      	ldr	r0, [r7, #12]
 800bc76:	2100      	movs	r1, #0
 800bc78:	f000 fd60 	bl	800c73c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bc7c:	2300      	movs	r3, #0
}
 800bc7e:	0018      	movs	r0, r3
 800bc80:	46bd      	mov	sp, r7
 800bc82:	b004      	add	sp, #16
 800bc84:	bd80      	pop	{r7, pc}

0800bc86 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b084      	sub	sp, #16
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	60f8      	str	r0, [r7, #12]
 800bc8e:	60b9      	str	r1, [r7, #8]
 800bc90:	1dbb      	adds	r3, r7, #6
 800bc92:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bc94:	1dbb      	adds	r3, r7, #6
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	68f8      	ldr	r0, [r7, #12]
 800bc9c:	2100      	movs	r1, #0
 800bc9e:	f000 fd4d 	bl	800c73c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	0018      	movs	r0, r3
 800bca6:	46bd      	mov	sp, r7
 800bca8:	b004      	add	sp, #16
 800bcaa:	bd80      	pop	{r7, pc}

0800bcac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	b082      	sub	sp, #8
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bcb4:	687a      	ldr	r2, [r7, #4]
 800bcb6:	23a5      	movs	r3, #165	; 0xa5
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	2104      	movs	r1, #4
 800bcbc:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	2100      	movs	r1, #0
 800bcc6:	f000 fd02 	bl	800c6ce <USBD_LL_Transmit>

  return USBD_OK;
 800bcca:	2300      	movs	r3, #0
}
 800bccc:	0018      	movs	r0, r3
 800bcce:	46bd      	mov	sp, r7
 800bcd0:	b002      	add	sp, #8
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b082      	sub	sp, #8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	23a5      	movs	r3, #165	; 0xa5
 800bce0:	009b      	lsls	r3, r3, #2
 800bce2:	2105      	movs	r1, #5
 800bce4:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	2300      	movs	r3, #0
 800bcea:	2200      	movs	r2, #0
 800bcec:	2100      	movs	r1, #0
 800bcee:	f000 fd25 	bl	800c73c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	0018      	movs	r0, r3
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	b002      	add	sp, #8
 800bcfa:	bd80      	pop	{r7, pc}

0800bcfc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bd00:	4914      	ldr	r1, [pc, #80]	; (800bd54 <MX_USB_DEVICE_Init+0x58>)
 800bd02:	4b15      	ldr	r3, [pc, #84]	; (800bd58 <MX_USB_DEVICE_Init+0x5c>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	0018      	movs	r0, r3
 800bd08:	f7fe fdea 	bl	800a8e0 <USBD_Init>
 800bd0c:	1e03      	subs	r3, r0, #0
 800bd0e:	d001      	beq.n	800bd14 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bd10:	f7f5 fd2a 	bl	8001768 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800bd14:	4a11      	ldr	r2, [pc, #68]	; (800bd5c <MX_USB_DEVICE_Init+0x60>)
 800bd16:	4b10      	ldr	r3, [pc, #64]	; (800bd58 <MX_USB_DEVICE_Init+0x5c>)
 800bd18:	0011      	movs	r1, r2
 800bd1a:	0018      	movs	r0, r3
 800bd1c:	f7fe fe11 	bl	800a942 <USBD_RegisterClass>
 800bd20:	1e03      	subs	r3, r0, #0
 800bd22:	d001      	beq.n	800bd28 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800bd24:	f7f5 fd20 	bl	8001768 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800bd28:	4a0d      	ldr	r2, [pc, #52]	; (800bd60 <MX_USB_DEVICE_Init+0x64>)
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	; (800bd58 <MX_USB_DEVICE_Init+0x5c>)
 800bd2c:	0011      	movs	r1, r2
 800bd2e:	0018      	movs	r0, r3
 800bd30:	f7fe fd26 	bl	800a780 <USBD_CDC_RegisterInterface>
 800bd34:	1e03      	subs	r3, r0, #0
 800bd36:	d001      	beq.n	800bd3c <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800bd38:	f7f5 fd16 	bl	8001768 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <MX_USB_DEVICE_Init+0x5c>)
 800bd3e:	0018      	movs	r0, r3
 800bd40:	f7fe fe1f 	bl	800a982 <USBD_Start>
 800bd44:	1e03      	subs	r3, r0, #0
 800bd46:	d001      	beq.n	800bd4c <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800bd48:	f7f5 fd0e 	bl	8001768 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bd4c:	46c0      	nop			; (mov r8, r8)
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bd80      	pop	{r7, pc}
 800bd52:	46c0      	nop			; (mov r8, r8)
 800bd54:	20000184 	.word	0x20000184
 800bd58:	200008ec 	.word	0x200008ec
 800bd5c:	20000070 	.word	0x20000070
 800bd60:	20000174 	.word	0x20000174

0800bd64 <usb_char_waiting>:
static int8_t CDC_Receive_FS(uint8_t* pbuf, uint32_t *Len);

/* USER CODE BEGIN PRIVATE_FUNCTIONS_DECLARATION */

uint8_t usb_char_waiting(void)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	af00      	add	r7, sp, #0
	return abs(head - tail);
 800bd68:	4b06      	ldr	r3, [pc, #24]	; (800bd84 <usb_char_waiting+0x20>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	001a      	movs	r2, r3
 800bd6e:	4b06      	ldr	r3, [pc, #24]	; (800bd88 <usb_char_waiting+0x24>)
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	1ad3      	subs	r3, r2, r3
 800bd74:	17da      	asrs	r2, r3, #31
 800bd76:	189b      	adds	r3, r3, r2
 800bd78:	4053      	eors	r3, r2
 800bd7a:	b2db      	uxtb	r3, r3
}
 800bd7c:	0018      	movs	r0, r3
 800bd7e:	46bd      	mov	sp, r7
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	20000d34 	.word	0x20000d34
 800bd88:	20000d35 	.word	0x20000d35

0800bd8c <usb_read_char>:

uint8_t usb_read_char(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b082      	sub	sp, #8
 800bd90:	af00      	add	r7, sp, #0
	char ch =  rx_buffer[tail++];
 800bd92:	4b0c      	ldr	r3, [pc, #48]	; (800bdc4 <usb_read_char+0x38>)
 800bd94:	781b      	ldrb	r3, [r3, #0]
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	b2d1      	uxtb	r1, r2
 800bd9a:	4a0a      	ldr	r2, [pc, #40]	; (800bdc4 <usb_read_char+0x38>)
 800bd9c:	7011      	strb	r1, [r2, #0]
 800bd9e:	0019      	movs	r1, r3
 800bda0:	1dfb      	adds	r3, r7, #7
 800bda2:	4a09      	ldr	r2, [pc, #36]	; (800bdc8 <usb_read_char+0x3c>)
 800bda4:	5c52      	ldrb	r2, [r2, r1]
 800bda6:	701a      	strb	r2, [r3, #0]

	if(tail >= APP_RX_DATA_SIZE)
 800bda8:	4b06      	ldr	r3, [pc, #24]	; (800bdc4 <usb_read_char+0x38>)
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	b25b      	sxtb	r3, r3
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	da02      	bge.n	800bdb8 <usb_read_char+0x2c>
	{
		tail = 0;
 800bdb2:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <usb_read_char+0x38>)
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	701a      	strb	r2, [r3, #0]
	}

	return ch;
 800bdb8:	1dfb      	adds	r3, r7, #7
 800bdba:	781b      	ldrb	r3, [r3, #0]
}
 800bdbc:	0018      	movs	r0, r3
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	b002      	add	sp, #8
 800bdc2:	bd80      	pop	{r7, pc}
 800bdc4:	20000d35 	.word	0x20000d35
 800bdc8:	20000cb4 	.word	0x20000cb4

0800bdcc <usb_is_configured>:

uint8_t usb_is_configured(void)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	af00      	add	r7, sp, #0
    return configured;
 800bdd0:	4b02      	ldr	r3, [pc, #8]	; (800bddc <usb_is_configured+0x10>)
 800bdd2:	781b      	ldrb	r3, [r3, #0]
}
 800bdd4:	0018      	movs	r0, r3
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	46c0      	nop			; (mov r8, r8)
 800bddc:	20000cb0 	.word	0x20000cb0

0800bde0 <usb_write_chars>:
    configured = 0;
}

/** */
void usb_write_chars(char *buffer, uint8_t length)
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	000a      	movs	r2, r1
 800bdea:	1cfb      	adds	r3, r7, #3
 800bdec:	701a      	strb	r2, [r3, #0]
    while(CDC_Transmit_FS((uint8_t *)buffer, length));
 800bdee:	46c0      	nop			; (mov r8, r8)
 800bdf0:	1cfb      	adds	r3, r7, #3
 800bdf2:	781b      	ldrb	r3, [r3, #0]
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	0011      	movs	r1, r2
 800bdfa:	0018      	movs	r0, r3
 800bdfc:	f000 f882 	bl	800bf04 <CDC_Transmit_FS>
 800be00:	1e03      	subs	r3, r0, #0
 800be02:	d1f5      	bne.n	800bdf0 <usb_write_chars+0x10>
}
 800be04:	46c0      	nop			; (mov r8, r8)
 800be06:	46c0      	nop			; (mov r8, r8)
 800be08:	46bd      	mov	sp, r7
 800be0a:	b002      	add	sp, #8
 800be0c:	bd80      	pop	{r7, pc}
	...

0800be10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800be14:	4907      	ldr	r1, [pc, #28]	; (800be34 <CDC_Init_FS+0x24>)
 800be16:	4b08      	ldr	r3, [pc, #32]	; (800be38 <CDC_Init_FS+0x28>)
 800be18:	2200      	movs	r2, #0
 800be1a:	0018      	movs	r0, r3
 800be1c:	f7fe fccb 	bl	800a7b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800be20:	4a06      	ldr	r2, [pc, #24]	; (800be3c <CDC_Init_FS+0x2c>)
 800be22:	4b05      	ldr	r3, [pc, #20]	; (800be38 <CDC_Init_FS+0x28>)
 800be24:	0011      	movs	r1, r2
 800be26:	0018      	movs	r0, r3
 800be28:	f7fe fce1 	bl	800a7ee <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800be2c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800be2e:	0018      	movs	r0, r3
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}
 800be34:	20000c30 	.word	0x20000c30
 800be38:	200008ec 	.word	0x200008ec
 800be3c:	20000bb0 	.word	0x20000bb0

0800be40 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800be44:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800be46:	0018      	movs	r0, r3
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800be4c:	b580      	push	{r7, lr}
 800be4e:	b082      	sub	sp, #8
 800be50:	af00      	add	r7, sp, #0
 800be52:	6039      	str	r1, [r7, #0]
 800be54:	0011      	movs	r1, r2
 800be56:	1dfb      	adds	r3, r7, #7
 800be58:	1c02      	adds	r2, r0, #0
 800be5a:	701a      	strb	r2, [r3, #0]
 800be5c:	1d3b      	adds	r3, r7, #4
 800be5e:	1c0a      	adds	r2, r1, #0
 800be60:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800be62:	1dfb      	adds	r3, r7, #7
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	2b23      	cmp	r3, #35	; 0x23
 800be68:	d808      	bhi.n	800be7c <CDC_Control_FS+0x30>
 800be6a:	009a      	lsls	r2, r3, #2
 800be6c:	4b06      	ldr	r3, [pc, #24]	; (800be88 <CDC_Control_FS+0x3c>)
 800be6e:	18d3      	adds	r3, r2, r3
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	469f      	mov	pc, r3
    case CDC_GET_LINE_CODING:

    break;

    case CDC_SET_CONTROL_LINE_STATE:
        configured = 1;
 800be74:	4b05      	ldr	r3, [pc, #20]	; (800be8c <CDC_Control_FS+0x40>)
 800be76:	2201      	movs	r2, #1
 800be78:	701a      	strb	r2, [r3, #0]
    break;
 800be7a:	e000      	b.n	800be7e <CDC_Control_FS+0x32>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800be7c:	46c0      	nop			; (mov r8, r8)
  }

  return (USBD_OK);
 800be7e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800be80:	0018      	movs	r0, r3
 800be82:	46bd      	mov	sp, r7
 800be84:	b002      	add	sp, #8
 800be86:	bd80      	pop	{r7, pc}
 800be88:	0800ef14 	.word	0x0800ef14
 800be8c:	20000cb0 	.word	0x20000cb0

0800be90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800be9a:	687a      	ldr	r2, [r7, #4]
 800be9c:	4b16      	ldr	r3, [pc, #88]	; (800bef8 <CDC_Receive_FS+0x68>)
 800be9e:	0011      	movs	r1, r2
 800bea0:	0018      	movs	r0, r3
 800bea2:	f7fe fca4 	bl	800a7ee <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bea6:	4b14      	ldr	r3, [pc, #80]	; (800bef8 <CDC_Receive_FS+0x68>)
 800bea8:	0018      	movs	r0, r3
 800beaa:	f7fe fceb 	bl	800a884 <USBD_CDC_ReceivePacket>

  for(int index = 0; index < *Len; index++)
 800beae:	2300      	movs	r3, #0
 800beb0:	60fb      	str	r3, [r7, #12]
 800beb2:	e017      	b.n	800bee4 <CDC_Receive_FS+0x54>
  {
	  rx_buffer[head++] = Buf[index];
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	18d2      	adds	r2, r2, r3
 800beba:	4b10      	ldr	r3, [pc, #64]	; (800befc <CDC_Receive_FS+0x6c>)
 800bebc:	781b      	ldrb	r3, [r3, #0]
 800bebe:	1c59      	adds	r1, r3, #1
 800bec0:	b2c8      	uxtb	r0, r1
 800bec2:	490e      	ldr	r1, [pc, #56]	; (800befc <CDC_Receive_FS+0x6c>)
 800bec4:	7008      	strb	r0, [r1, #0]
 800bec6:	0019      	movs	r1, r3
 800bec8:	7812      	ldrb	r2, [r2, #0]
 800beca:	4b0d      	ldr	r3, [pc, #52]	; (800bf00 <CDC_Receive_FS+0x70>)
 800becc:	545a      	strb	r2, [r3, r1]
	  if(head >= APP_RX_DATA_SIZE)
 800bece:	4b0b      	ldr	r3, [pc, #44]	; (800befc <CDC_Receive_FS+0x6c>)
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	b25b      	sxtb	r3, r3
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	da02      	bge.n	800bede <CDC_Receive_FS+0x4e>
	  {
		  head = 0;
 800bed8:	4b08      	ldr	r3, [pc, #32]	; (800befc <CDC_Receive_FS+0x6c>)
 800beda:	2200      	movs	r2, #0
 800bedc:	701a      	strb	r2, [r3, #0]
  for(int index = 0; index < *Len; index++)
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	3301      	adds	r3, #1
 800bee2:	60fb      	str	r3, [r7, #12]
 800bee4:	683b      	ldr	r3, [r7, #0]
 800bee6:	681a      	ldr	r2, [r3, #0]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	429a      	cmp	r2, r3
 800beec:	d8e2      	bhi.n	800beb4 <CDC_Receive_FS+0x24>
	  }
  }

  return (USBD_OK);
 800beee:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bef0:	0018      	movs	r0, r3
 800bef2:	46bd      	mov	sp, r7
 800bef4:	b004      	add	sp, #16
 800bef6:	bd80      	pop	{r7, pc}
 800bef8:	200008ec 	.word	0x200008ec
 800befc:	20000d34 	.word	0x20000d34
 800bf00:	20000cb4 	.word	0x20000cb4

0800bf04 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bf04:	b5b0      	push	{r4, r5, r7, lr}
 800bf06:	b084      	sub	sp, #16
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	000a      	movs	r2, r1
 800bf0e:	1cbb      	adds	r3, r7, #2
 800bf10:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 800bf12:	230f      	movs	r3, #15
 800bf14:	18fb      	adds	r3, r7, r3
 800bf16:	2200      	movs	r2, #0
 800bf18:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bf1a:	4a11      	ldr	r2, [pc, #68]	; (800bf60 <CDC_Transmit_FS+0x5c>)
 800bf1c:	23ae      	movs	r3, #174	; 0xae
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	58d3      	ldr	r3, [r2, r3]
 800bf22:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bf24:	68ba      	ldr	r2, [r7, #8]
 800bf26:	2385      	movs	r3, #133	; 0x85
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	58d3      	ldr	r3, [r2, r3]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 800bf30:	2301      	movs	r3, #1
 800bf32:	e010      	b.n	800bf56 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bf34:	1cbb      	adds	r3, r7, #2
 800bf36:	881a      	ldrh	r2, [r3, #0]
 800bf38:	6879      	ldr	r1, [r7, #4]
 800bf3a:	4b09      	ldr	r3, [pc, #36]	; (800bf60 <CDC_Transmit_FS+0x5c>)
 800bf3c:	0018      	movs	r0, r3
 800bf3e:	f7fe fc3a 	bl	800a7b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bf42:	250f      	movs	r5, #15
 800bf44:	197c      	adds	r4, r7, r5
 800bf46:	4b06      	ldr	r3, [pc, #24]	; (800bf60 <CDC_Transmit_FS+0x5c>)
 800bf48:	0018      	movs	r0, r3
 800bf4a:	f7fe fc64 	bl	800a816 <USBD_CDC_TransmitPacket>
 800bf4e:	0003      	movs	r3, r0
 800bf50:	7023      	strb	r3, [r4, #0]

  /* USER CODE END 7 */
  return result;
 800bf52:	197b      	adds	r3, r7, r5
 800bf54:	781b      	ldrb	r3, [r3, #0]
}
 800bf56:	0018      	movs	r0, r3
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	b004      	add	sp, #16
 800bf5c:	bdb0      	pop	{r4, r5, r7, pc}
 800bf5e:	46c0      	nop			; (mov r8, r8)
 800bf60:	200008ec 	.word	0x200008ec

0800bf64 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b082      	sub	sp, #8
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	0002      	movs	r2, r0
 800bf6c:	6039      	str	r1, [r7, #0]
 800bf6e:	1dfb      	adds	r3, r7, #7
 800bf70:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	2212      	movs	r2, #18
 800bf76:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bf78:	4b02      	ldr	r3, [pc, #8]	; (800bf84 <USBD_FS_DeviceDescriptor+0x20>)
}
 800bf7a:	0018      	movs	r0, r3
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	b002      	add	sp, #8
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	46c0      	nop			; (mov r8, r8)
 800bf84:	200001a0 	.word	0x200001a0

0800bf88 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	0002      	movs	r2, r0
 800bf90:	6039      	str	r1, [r7, #0]
 800bf92:	1dfb      	adds	r3, r7, #7
 800bf94:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bf96:	683b      	ldr	r3, [r7, #0]
 800bf98:	2204      	movs	r2, #4
 800bf9a:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bf9c:	4b02      	ldr	r3, [pc, #8]	; (800bfa8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bf9e:	0018      	movs	r0, r3
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	b002      	add	sp, #8
 800bfa4:	bd80      	pop	{r7, pc}
 800bfa6:	46c0      	nop			; (mov r8, r8)
 800bfa8:	200001b4 	.word	0x200001b4

0800bfac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	0002      	movs	r2, r0
 800bfb4:	6039      	str	r1, [r7, #0]
 800bfb6:	1dfb      	adds	r3, r7, #7
 800bfb8:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800bfba:	1dfb      	adds	r3, r7, #7
 800bfbc:	781b      	ldrb	r3, [r3, #0]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d106      	bne.n	800bfd0 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bfc2:	683a      	ldr	r2, [r7, #0]
 800bfc4:	4908      	ldr	r1, [pc, #32]	; (800bfe8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800bfc6:	4b09      	ldr	r3, [pc, #36]	; (800bfec <USBD_FS_ProductStrDescriptor+0x40>)
 800bfc8:	0018      	movs	r0, r3
 800bfca:	f7ff fd9a 	bl	800bb02 <USBD_GetString>
 800bfce:	e005      	b.n	800bfdc <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bfd0:	683a      	ldr	r2, [r7, #0]
 800bfd2:	4905      	ldr	r1, [pc, #20]	; (800bfe8 <USBD_FS_ProductStrDescriptor+0x3c>)
 800bfd4:	4b05      	ldr	r3, [pc, #20]	; (800bfec <USBD_FS_ProductStrDescriptor+0x40>)
 800bfd6:	0018      	movs	r0, r3
 800bfd8:	f7ff fd93 	bl	800bb02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bfdc:	4b02      	ldr	r3, [pc, #8]	; (800bfe8 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800bfde:	0018      	movs	r0, r3
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	b002      	add	sp, #8
 800bfe4:	bd80      	pop	{r7, pc}
 800bfe6:	46c0      	nop			; (mov r8, r8)
 800bfe8:	20000d38 	.word	0x20000d38
 800bfec:	0800ed60 	.word	0x0800ed60

0800bff0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b082      	sub	sp, #8
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	0002      	movs	r2, r0
 800bff8:	6039      	str	r1, [r7, #0]
 800bffa:	1dfb      	adds	r3, r7, #7
 800bffc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bffe:	683a      	ldr	r2, [r7, #0]
 800c000:	4904      	ldr	r1, [pc, #16]	; (800c014 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c002:	4b05      	ldr	r3, [pc, #20]	; (800c018 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800c004:	0018      	movs	r0, r3
 800c006:	f7ff fd7c 	bl	800bb02 <USBD_GetString>
  return USBD_StrDesc;
 800c00a:	4b02      	ldr	r3, [pc, #8]	; (800c014 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800c00c:	0018      	movs	r0, r3
 800c00e:	46bd      	mov	sp, r7
 800c010:	b002      	add	sp, #8
 800c012:	bd80      	pop	{r7, pc}
 800c014:	20000d38 	.word	0x20000d38
 800c018:	0800ed6c 	.word	0x0800ed6c

0800c01c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b082      	sub	sp, #8
 800c020:	af00      	add	r7, sp, #0
 800c022:	0002      	movs	r2, r0
 800c024:	6039      	str	r1, [r7, #0]
 800c026:	1dfb      	adds	r3, r7, #7
 800c028:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	221a      	movs	r2, #26
 800c02e:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c030:	f000 f84c 	bl	800c0cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c034:	4b02      	ldr	r3, [pc, #8]	; (800c040 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800c036:	0018      	movs	r0, r3
 800c038:	46bd      	mov	sp, r7
 800c03a:	b002      	add	sp, #8
 800c03c:	bd80      	pop	{r7, pc}
 800c03e:	46c0      	nop			; (mov r8, r8)
 800c040:	200001b8 	.word	0x200001b8

0800c044 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	0002      	movs	r2, r0
 800c04c:	6039      	str	r1, [r7, #0]
 800c04e:	1dfb      	adds	r3, r7, #7
 800c050:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800c052:	1dfb      	adds	r3, r7, #7
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d106      	bne.n	800c068 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c05a:	683a      	ldr	r2, [r7, #0]
 800c05c:	4908      	ldr	r1, [pc, #32]	; (800c080 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c05e:	4b09      	ldr	r3, [pc, #36]	; (800c084 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c060:	0018      	movs	r0, r3
 800c062:	f7ff fd4e 	bl	800bb02 <USBD_GetString>
 800c066:	e005      	b.n	800c074 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c068:	683a      	ldr	r2, [r7, #0]
 800c06a:	4905      	ldr	r1, [pc, #20]	; (800c080 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800c06c:	4b05      	ldr	r3, [pc, #20]	; (800c084 <USBD_FS_ConfigStrDescriptor+0x40>)
 800c06e:	0018      	movs	r0, r3
 800c070:	f7ff fd47 	bl	800bb02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c074:	4b02      	ldr	r3, [pc, #8]	; (800c080 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800c076:	0018      	movs	r0, r3
 800c078:	46bd      	mov	sp, r7
 800c07a:	b002      	add	sp, #8
 800c07c:	bd80      	pop	{r7, pc}
 800c07e:	46c0      	nop			; (mov r8, r8)
 800c080:	20000d38 	.word	0x20000d38
 800c084:	0800ed70 	.word	0x0800ed70

0800c088 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b082      	sub	sp, #8
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	0002      	movs	r2, r0
 800c090:	6039      	str	r1, [r7, #0]
 800c092:	1dfb      	adds	r3, r7, #7
 800c094:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800c096:	1dfb      	adds	r3, r7, #7
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d106      	bne.n	800c0ac <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c09e:	683a      	ldr	r2, [r7, #0]
 800c0a0:	4908      	ldr	r1, [pc, #32]	; (800c0c4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c0a2:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c0a4:	0018      	movs	r0, r3
 800c0a6:	f7ff fd2c 	bl	800bb02 <USBD_GetString>
 800c0aa:	e005      	b.n	800c0b8 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c0ac:	683a      	ldr	r2, [r7, #0]
 800c0ae:	4905      	ldr	r1, [pc, #20]	; (800c0c4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800c0b0:	4b05      	ldr	r3, [pc, #20]	; (800c0c8 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800c0b2:	0018      	movs	r0, r3
 800c0b4:	f7ff fd25 	bl	800bb02 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c0b8:	4b02      	ldr	r3, [pc, #8]	; (800c0c4 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800c0ba:	0018      	movs	r0, r3
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	b002      	add	sp, #8
 800c0c0:	bd80      	pop	{r7, pc}
 800c0c2:	46c0      	nop			; (mov r8, r8)
 800c0c4:	20000d38 	.word	0x20000d38
 800c0c8:	0800ed7c 	.word	0x0800ed7c

0800c0cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c0d2:	4b10      	ldr	r3, [pc, #64]	; (800c114 <Get_SerialNum+0x48>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c0d8:	4b0f      	ldr	r3, [pc, #60]	; (800c118 <Get_SerialNum+0x4c>)
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c0de:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <Get_SerialNum+0x50>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c0e4:	68fa      	ldr	r2, [r7, #12]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	18d3      	adds	r3, r2, r3
 800c0ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00b      	beq.n	800c10a <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c0f2:	490b      	ldr	r1, [pc, #44]	; (800c120 <Get_SerialNum+0x54>)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	2208      	movs	r2, #8
 800c0f8:	0018      	movs	r0, r3
 800c0fa:	f000 f815 	bl	800c128 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c0fe:	4909      	ldr	r1, [pc, #36]	; (800c124 <Get_SerialNum+0x58>)
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2204      	movs	r2, #4
 800c104:	0018      	movs	r0, r3
 800c106:	f000 f80f 	bl	800c128 <IntToUnicode>
  }
}
 800c10a:	46c0      	nop			; (mov r8, r8)
 800c10c:	46bd      	mov	sp, r7
 800c10e:	b004      	add	sp, #16
 800c110:	bd80      	pop	{r7, pc}
 800c112:	46c0      	nop			; (mov r8, r8)
 800c114:	1ffff7ac 	.word	0x1ffff7ac
 800c118:	1ffff7b0 	.word	0x1ffff7b0
 800c11c:	1ffff7b4 	.word	0x1ffff7b4
 800c120:	200001ba 	.word	0x200001ba
 800c124:	200001ca 	.word	0x200001ca

0800c128 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	1dfb      	adds	r3, r7, #7
 800c134:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800c136:	2117      	movs	r1, #23
 800c138:	187b      	adds	r3, r7, r1
 800c13a:	2200      	movs	r2, #0
 800c13c:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800c13e:	187b      	adds	r3, r7, r1
 800c140:	2200      	movs	r2, #0
 800c142:	701a      	strb	r2, [r3, #0]
 800c144:	e02f      	b.n	800c1a6 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	0f1b      	lsrs	r3, r3, #28
 800c14a:	2b09      	cmp	r3, #9
 800c14c:	d80d      	bhi.n	800c16a <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	0f1b      	lsrs	r3, r3, #28
 800c152:	b2da      	uxtb	r2, r3
 800c154:	2317      	movs	r3, #23
 800c156:	18fb      	adds	r3, r7, r3
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	005b      	lsls	r3, r3, #1
 800c15c:	0019      	movs	r1, r3
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	185b      	adds	r3, r3, r1
 800c162:	3230      	adds	r2, #48	; 0x30
 800c164:	b2d2      	uxtb	r2, r2
 800c166:	701a      	strb	r2, [r3, #0]
 800c168:	e00c      	b.n	800c184 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	0f1b      	lsrs	r3, r3, #28
 800c16e:	b2da      	uxtb	r2, r3
 800c170:	2317      	movs	r3, #23
 800c172:	18fb      	adds	r3, r7, r3
 800c174:	781b      	ldrb	r3, [r3, #0]
 800c176:	005b      	lsls	r3, r3, #1
 800c178:	0019      	movs	r1, r3
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	185b      	adds	r3, r3, r1
 800c17e:	3237      	adds	r2, #55	; 0x37
 800c180:	b2d2      	uxtb	r2, r2
 800c182:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	011b      	lsls	r3, r3, #4
 800c188:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c18a:	2117      	movs	r1, #23
 800c18c:	187b      	adds	r3, r7, r1
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	005b      	lsls	r3, r3, #1
 800c192:	3301      	adds	r3, #1
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	18d3      	adds	r3, r2, r3
 800c198:	2200      	movs	r2, #0
 800c19a:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c19c:	187b      	adds	r3, r7, r1
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	187b      	adds	r3, r7, r1
 800c1a2:	3201      	adds	r2, #1
 800c1a4:	701a      	strb	r2, [r3, #0]
 800c1a6:	2317      	movs	r3, #23
 800c1a8:	18fa      	adds	r2, r7, r3
 800c1aa:	1dfb      	adds	r3, r7, #7
 800c1ac:	7812      	ldrb	r2, [r2, #0]
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	d3c8      	bcc.n	800c146 <IntToUnicode+0x1e>
  }
}
 800c1b4:	46c0      	nop			; (mov r8, r8)
 800c1b6:	46c0      	nop			; (mov r8, r8)
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	b006      	add	sp, #24
 800c1bc:	bd80      	pop	{r7, pc}
	...

0800c1c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b084      	sub	sp, #16
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	4a0e      	ldr	r2, [pc, #56]	; (800c208 <HAL_PCD_MspInit+0x48>)
 800c1ce:	4293      	cmp	r3, r2
 800c1d0:	d115      	bne.n	800c1fe <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c1d2:	4b0e      	ldr	r3, [pc, #56]	; (800c20c <HAL_PCD_MspInit+0x4c>)
 800c1d4:	69da      	ldr	r2, [r3, #28]
 800c1d6:	4b0d      	ldr	r3, [pc, #52]	; (800c20c <HAL_PCD_MspInit+0x4c>)
 800c1d8:	2180      	movs	r1, #128	; 0x80
 800c1da:	0409      	lsls	r1, r1, #16
 800c1dc:	430a      	orrs	r2, r1
 800c1de:	61da      	str	r2, [r3, #28]
 800c1e0:	4b0a      	ldr	r3, [pc, #40]	; (800c20c <HAL_PCD_MspInit+0x4c>)
 800c1e2:	69da      	ldr	r2, [r3, #28]
 800c1e4:	2380      	movs	r3, #128	; 0x80
 800c1e6:	041b      	lsls	r3, r3, #16
 800c1e8:	4013      	ands	r3, r2
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	2100      	movs	r1, #0
 800c1f2:	201f      	movs	r0, #31
 800c1f4:	f7f6 fb78 	bl	80028e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800c1f8:	201f      	movs	r0, #31
 800c1fa:	f7f6 fb8a 	bl	8002912 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c1fe:	46c0      	nop			; (mov r8, r8)
 800c200:	46bd      	mov	sp, r7
 800c202:	b004      	add	sp, #16
 800c204:	bd80      	pop	{r7, pc}
 800c206:	46c0      	nop			; (mov r8, r8)
 800c208:	40005c00 	.word	0x40005c00
 800c20c:	40021000 	.word	0x40021000

0800c210 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c218:	687a      	ldr	r2, [r7, #4]
 800c21a:	23bc      	movs	r3, #188	; 0xbc
 800c21c:	009b      	lsls	r3, r3, #2
 800c21e:	58d2      	ldr	r2, [r2, r3]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	21ac      	movs	r1, #172	; 0xac
 800c224:	0089      	lsls	r1, r1, #2
 800c226:	468c      	mov	ip, r1
 800c228:	4463      	add	r3, ip
 800c22a:	0019      	movs	r1, r3
 800c22c:	0010      	movs	r0, r2
 800c22e:	f7fe fbfb 	bl	800aa28 <USBD_LL_SetupStage>
}
 800c232:	46c0      	nop			; (mov r8, r8)
 800c234:	46bd      	mov	sp, r7
 800c236:	b002      	add	sp, #8
 800c238:	bd80      	pop	{r7, pc}

0800c23a <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c23a:	b590      	push	{r4, r7, lr}
 800c23c:	b083      	sub	sp, #12
 800c23e:	af00      	add	r7, sp, #0
 800c240:	6078      	str	r0, [r7, #4]
 800c242:	000a      	movs	r2, r1
 800c244:	1cfb      	adds	r3, r7, #3
 800c246:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c248:	687a      	ldr	r2, [r7, #4]
 800c24a:	23bc      	movs	r3, #188	; 0xbc
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	58d4      	ldr	r4, [r2, r3]
 800c250:	1cfb      	adds	r3, r7, #3
 800c252:	781a      	ldrb	r2, [r3, #0]
 800c254:	6878      	ldr	r0, [r7, #4]
 800c256:	23be      	movs	r3, #190	; 0xbe
 800c258:	0059      	lsls	r1, r3, #1
 800c25a:	0013      	movs	r3, r2
 800c25c:	009b      	lsls	r3, r3, #2
 800c25e:	189b      	adds	r3, r3, r2
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	18c3      	adds	r3, r0, r3
 800c264:	185b      	adds	r3, r3, r1
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	1cfb      	adds	r3, r7, #3
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	0019      	movs	r1, r3
 800c26e:	0020      	movs	r0, r4
 800c270:	f7fe fc38 	bl	800aae4 <USBD_LL_DataOutStage>
}
 800c274:	46c0      	nop			; (mov r8, r8)
 800c276:	46bd      	mov	sp, r7
 800c278:	b003      	add	sp, #12
 800c27a:	bd90      	pop	{r4, r7, pc}

0800c27c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b082      	sub	sp, #8
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	000a      	movs	r2, r1
 800c286:	1cfb      	adds	r3, r7, #3
 800c288:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c28a:	687a      	ldr	r2, [r7, #4]
 800c28c:	23bc      	movs	r3, #188	; 0xbc
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	58d0      	ldr	r0, [r2, r3]
 800c292:	1cfb      	adds	r3, r7, #3
 800c294:	781a      	ldrb	r2, [r3, #0]
 800c296:	6879      	ldr	r1, [r7, #4]
 800c298:	0013      	movs	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	189b      	adds	r3, r3, r2
 800c29e:	00db      	lsls	r3, r3, #3
 800c2a0:	18cb      	adds	r3, r1, r3
 800c2a2:	333c      	adds	r3, #60	; 0x3c
 800c2a4:	681a      	ldr	r2, [r3, #0]
 800c2a6:	1cfb      	adds	r3, r7, #3
 800c2a8:	781b      	ldrb	r3, [r3, #0]
 800c2aa:	0019      	movs	r1, r3
 800c2ac:	f7fe fc9c 	bl	800abe8 <USBD_LL_DataInStage>
}
 800c2b0:	46c0      	nop			; (mov r8, r8)
 800c2b2:	46bd      	mov	sp, r7
 800c2b4:	b002      	add	sp, #8
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b082      	sub	sp, #8
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	23bc      	movs	r3, #188	; 0xbc
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	58d3      	ldr	r3, [r2, r3]
 800c2c8:	0018      	movs	r0, r3
 800c2ca:	f7fe fdd3 	bl	800ae74 <USBD_LL_SOF>
}
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	46bd      	mov	sp, r7
 800c2d2:	b002      	add	sp, #8
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b084      	sub	sp, #16
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c2de:	230f      	movs	r3, #15
 800c2e0:	18fb      	adds	r3, r7, r3
 800c2e2:	2201      	movs	r2, #1
 800c2e4:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d001      	beq.n	800c2f2 <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800c2ee:	f7f5 fa3b 	bl	8001768 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	23bc      	movs	r3, #188	; 0xbc
 800c2f6:	009b      	lsls	r3, r3, #2
 800c2f8:	58d2      	ldr	r2, [r2, r3]
 800c2fa:	230f      	movs	r3, #15
 800c2fc:	18fb      	adds	r3, r7, r3
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	0019      	movs	r1, r3
 800c302:	0010      	movs	r0, r2
 800c304:	f7fe fd75 	bl	800adf2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	23bc      	movs	r3, #188	; 0xbc
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	58d3      	ldr	r3, [r2, r3]
 800c310:	0018      	movs	r0, r3
 800c312:	f7fe fd26 	bl	800ad62 <USBD_LL_Reset>
}
 800c316:	46c0      	nop			; (mov r8, r8)
 800c318:	46bd      	mov	sp, r7
 800c31a:	b004      	add	sp, #16
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	23bc      	movs	r3, #188	; 0xbc
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	58d3      	ldr	r3, [r2, r3]
 800c330:	0018      	movs	r0, r3
 800c332:	f7fe fd6f 	bl	800ae14 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	699b      	ldr	r3, [r3, #24]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d005      	beq.n	800c34a <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c33e:	4b05      	ldr	r3, [pc, #20]	; (800c354 <HAL_PCD_SuspendCallback+0x34>)
 800c340:	691a      	ldr	r2, [r3, #16]
 800c342:	4b04      	ldr	r3, [pc, #16]	; (800c354 <HAL_PCD_SuspendCallback+0x34>)
 800c344:	2106      	movs	r1, #6
 800c346:	430a      	orrs	r2, r1
 800c348:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800c34a:	46c0      	nop			; (mov r8, r8)
 800c34c:	46bd      	mov	sp, r7
 800c34e:	b002      	add	sp, #8
 800c350:	bd80      	pop	{r7, pc}
 800c352:	46c0      	nop			; (mov r8, r8)
 800c354:	e000ed00 	.word	0xe000ed00

0800c358 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	699b      	ldr	r3, [r3, #24]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d007      	beq.n	800c378 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c368:	4b09      	ldr	r3, [pc, #36]	; (800c390 <HAL_PCD_ResumeCallback+0x38>)
 800c36a:	691a      	ldr	r2, [r3, #16]
 800c36c:	4b08      	ldr	r3, [pc, #32]	; (800c390 <HAL_PCD_ResumeCallback+0x38>)
 800c36e:	2106      	movs	r1, #6
 800c370:	438a      	bics	r2, r1
 800c372:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800c374:	f000 fa44 	bl	800c800 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	23bc      	movs	r3, #188	; 0xbc
 800c37c:	009b      	lsls	r3, r3, #2
 800c37e:	58d3      	ldr	r3, [r2, r3]
 800c380:	0018      	movs	r0, r3
 800c382:	f7fe fd5f 	bl	800ae44 <USBD_LL_Resume>
}
 800c386:	46c0      	nop			; (mov r8, r8)
 800c388:	46bd      	mov	sp, r7
 800c38a:	b002      	add	sp, #8
 800c38c:	bd80      	pop	{r7, pc}
 800c38e:	46c0      	nop			; (mov r8, r8)
 800c390:	e000ed00 	.word	0xe000ed00

0800c394 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b082      	sub	sp, #8
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800c39c:	4a2d      	ldr	r2, [pc, #180]	; (800c454 <USBD_LL_Init+0xc0>)
 800c39e:	23bc      	movs	r3, #188	; 0xbc
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	6879      	ldr	r1, [r7, #4]
 800c3a4:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800c3a6:	687a      	ldr	r2, [r7, #4]
 800c3a8:	23b0      	movs	r3, #176	; 0xb0
 800c3aa:	009b      	lsls	r3, r3, #2
 800c3ac:	4929      	ldr	r1, [pc, #164]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3ae:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800c3b0:	4b28      	ldr	r3, [pc, #160]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3b2:	4a29      	ldr	r2, [pc, #164]	; (800c458 <USBD_LL_Init+0xc4>)
 800c3b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c3b6:	4b27      	ldr	r3, [pc, #156]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3b8:	2208      	movs	r2, #8
 800c3ba:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c3bc:	4b25      	ldr	r3, [pc, #148]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3be:	2202      	movs	r2, #2
 800c3c0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c3c2:	4b24      	ldr	r3, [pc, #144]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c3c8:	4b22      	ldr	r3, [pc, #136]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c3ce:	4b21      	ldr	r3, [pc, #132]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3d0:	2200      	movs	r2, #0
 800c3d2:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c3d4:	4b1f      	ldr	r3, [pc, #124]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3d6:	2200      	movs	r2, #0
 800c3d8:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c3da:	4b1e      	ldr	r3, [pc, #120]	; (800c454 <USBD_LL_Init+0xc0>)
 800c3dc:	0018      	movs	r0, r3
 800c3de:	f7f6 fcaf 	bl	8002d40 <HAL_PCD_Init>
 800c3e2:	1e03      	subs	r3, r0, #0
 800c3e4:	d001      	beq.n	800c3ea <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800c3e6:	f7f5 f9bf 	bl	8001768 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c3ea:	687a      	ldr	r2, [r7, #4]
 800c3ec:	23b0      	movs	r3, #176	; 0xb0
 800c3ee:	009b      	lsls	r3, r3, #2
 800c3f0:	58d0      	ldr	r0, [r2, r3]
 800c3f2:	2318      	movs	r3, #24
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2100      	movs	r1, #0
 800c3f8:	f7f8 fa70 	bl	80048dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c3fc:	687a      	ldr	r2, [r7, #4]
 800c3fe:	23b0      	movs	r3, #176	; 0xb0
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	58d0      	ldr	r0, [r2, r3]
 800c404:	2358      	movs	r3, #88	; 0x58
 800c406:	2200      	movs	r2, #0
 800c408:	2180      	movs	r1, #128	; 0x80
 800c40a:	f7f8 fa67 	bl	80048dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	23b0      	movs	r3, #176	; 0xb0
 800c412:	009b      	lsls	r3, r3, #2
 800c414:	58d0      	ldr	r0, [r2, r3]
 800c416:	23c0      	movs	r3, #192	; 0xc0
 800c418:	2200      	movs	r2, #0
 800c41a:	2181      	movs	r1, #129	; 0x81
 800c41c:	f7f8 fa5e 	bl	80048dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c420:	687a      	ldr	r2, [r7, #4]
 800c422:	23b0      	movs	r3, #176	; 0xb0
 800c424:	009b      	lsls	r3, r3, #2
 800c426:	58d0      	ldr	r0, [r2, r3]
 800c428:	2388      	movs	r3, #136	; 0x88
 800c42a:	005b      	lsls	r3, r3, #1
 800c42c:	2200      	movs	r2, #0
 800c42e:	2101      	movs	r1, #1
 800c430:	f7f8 fa54 	bl	80048dc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c434:	687a      	ldr	r2, [r7, #4]
 800c436:	23b0      	movs	r3, #176	; 0xb0
 800c438:	009b      	lsls	r3, r3, #2
 800c43a:	58d0      	ldr	r0, [r2, r3]
 800c43c:	2380      	movs	r3, #128	; 0x80
 800c43e:	005b      	lsls	r3, r3, #1
 800c440:	2200      	movs	r2, #0
 800c442:	2182      	movs	r1, #130	; 0x82
 800c444:	f7f8 fa4a 	bl	80048dc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c448:	2300      	movs	r3, #0
}
 800c44a:	0018      	movs	r0, r3
 800c44c:	46bd      	mov	sp, r7
 800c44e:	b002      	add	sp, #8
 800c450:	bd80      	pop	{r7, pc}
 800c452:	46c0      	nop			; (mov r8, r8)
 800c454:	20000f38 	.word	0x20000f38
 800c458:	40005c00 	.word	0x40005c00

0800c45c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c45e:	b085      	sub	sp, #20
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c464:	210f      	movs	r1, #15
 800c466:	187b      	adds	r3, r7, r1
 800c468:	2200      	movs	r2, #0
 800c46a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c46c:	260e      	movs	r6, #14
 800c46e:	19bb      	adds	r3, r7, r6
 800c470:	2200      	movs	r2, #0
 800c472:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c474:	687a      	ldr	r2, [r7, #4]
 800c476:	23b0      	movs	r3, #176	; 0xb0
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	58d3      	ldr	r3, [r2, r3]
 800c47c:	000d      	movs	r5, r1
 800c47e:	187c      	adds	r4, r7, r1
 800c480:	0018      	movs	r0, r3
 800c482:	f7f6 fd5d 	bl	8002f40 <HAL_PCD_Start>
 800c486:	0003      	movs	r3, r0
 800c488:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c48a:	19bc      	adds	r4, r7, r6
 800c48c:	197b      	adds	r3, r7, r5
 800c48e:	781b      	ldrb	r3, [r3, #0]
 800c490:	0018      	movs	r0, r3
 800c492:	f000 f9bc 	bl	800c80e <USBD_Get_USB_Status>
 800c496:	0003      	movs	r3, r0
 800c498:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c49a:	19bb      	adds	r3, r7, r6
 800c49c:	781b      	ldrb	r3, [r3, #0]
}
 800c49e:	0018      	movs	r0, r3
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	b005      	add	sp, #20
 800c4a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c4a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c4a6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4a8:	b085      	sub	sp, #20
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
 800c4ae:	000c      	movs	r4, r1
 800c4b0:	0010      	movs	r0, r2
 800c4b2:	0019      	movs	r1, r3
 800c4b4:	1cfb      	adds	r3, r7, #3
 800c4b6:	1c22      	adds	r2, r4, #0
 800c4b8:	701a      	strb	r2, [r3, #0]
 800c4ba:	1cbb      	adds	r3, r7, #2
 800c4bc:	1c02      	adds	r2, r0, #0
 800c4be:	701a      	strb	r2, [r3, #0]
 800c4c0:	003b      	movs	r3, r7
 800c4c2:	1c0a      	adds	r2, r1, #0
 800c4c4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4c6:	260f      	movs	r6, #15
 800c4c8:	19bb      	adds	r3, r7, r6
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4ce:	250e      	movs	r5, #14
 800c4d0:	197b      	adds	r3, r7, r5
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	23b0      	movs	r3, #176	; 0xb0
 800c4da:	009b      	lsls	r3, r3, #2
 800c4dc:	58d0      	ldr	r0, [r2, r3]
 800c4de:	19bc      	adds	r4, r7, r6
 800c4e0:	1cbb      	adds	r3, r7, #2
 800c4e2:	781d      	ldrb	r5, [r3, #0]
 800c4e4:	003b      	movs	r3, r7
 800c4e6:	881a      	ldrh	r2, [r3, #0]
 800c4e8:	1cfb      	adds	r3, r7, #3
 800c4ea:	7819      	ldrb	r1, [r3, #0]
 800c4ec:	002b      	movs	r3, r5
 800c4ee:	f7f6 febc 	bl	800326a <HAL_PCD_EP_Open>
 800c4f2:	0003      	movs	r3, r0
 800c4f4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4f6:	250e      	movs	r5, #14
 800c4f8:	197c      	adds	r4, r7, r5
 800c4fa:	19bb      	adds	r3, r7, r6
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	0018      	movs	r0, r3
 800c500:	f000 f985 	bl	800c80e <USBD_Get_USB_Status>
 800c504:	0003      	movs	r3, r0
 800c506:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c508:	197b      	adds	r3, r7, r5
 800c50a:	781b      	ldrb	r3, [r3, #0]
}
 800c50c:	0018      	movs	r0, r3
 800c50e:	46bd      	mov	sp, r7
 800c510:	b005      	add	sp, #20
 800c512:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c514 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c514:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c516:	b085      	sub	sp, #20
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
 800c51c:	000a      	movs	r2, r1
 800c51e:	1cfb      	adds	r3, r7, #3
 800c520:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c522:	210f      	movs	r1, #15
 800c524:	187b      	adds	r3, r7, r1
 800c526:	2200      	movs	r2, #0
 800c528:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c52a:	260e      	movs	r6, #14
 800c52c:	19bb      	adds	r3, r7, r6
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c532:	687a      	ldr	r2, [r7, #4]
 800c534:	23b0      	movs	r3, #176	; 0xb0
 800c536:	009b      	lsls	r3, r3, #2
 800c538:	58d2      	ldr	r2, [r2, r3]
 800c53a:	000d      	movs	r5, r1
 800c53c:	187c      	adds	r4, r7, r1
 800c53e:	1cfb      	adds	r3, r7, #3
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	0019      	movs	r1, r3
 800c544:	0010      	movs	r0, r2
 800c546:	f7f6 feff 	bl	8003348 <HAL_PCD_EP_Close>
 800c54a:	0003      	movs	r3, r0
 800c54c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c54e:	19bc      	adds	r4, r7, r6
 800c550:	197b      	adds	r3, r7, r5
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	0018      	movs	r0, r3
 800c556:	f000 f95a 	bl	800c80e <USBD_Get_USB_Status>
 800c55a:	0003      	movs	r3, r0
 800c55c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c55e:	19bb      	adds	r3, r7, r6
 800c560:	781b      	ldrb	r3, [r3, #0]
}
 800c562:	0018      	movs	r0, r3
 800c564:	46bd      	mov	sp, r7
 800c566:	b005      	add	sp, #20
 800c568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c56a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c56a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c56c:	b085      	sub	sp, #20
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
 800c572:	000a      	movs	r2, r1
 800c574:	1cfb      	adds	r3, r7, #3
 800c576:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c578:	210f      	movs	r1, #15
 800c57a:	187b      	adds	r3, r7, r1
 800c57c:	2200      	movs	r2, #0
 800c57e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c580:	260e      	movs	r6, #14
 800c582:	19bb      	adds	r3, r7, r6
 800c584:	2200      	movs	r2, #0
 800c586:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c588:	687a      	ldr	r2, [r7, #4]
 800c58a:	23b0      	movs	r3, #176	; 0xb0
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	58d2      	ldr	r2, [r2, r3]
 800c590:	000d      	movs	r5, r1
 800c592:	187c      	adds	r4, r7, r1
 800c594:	1cfb      	adds	r3, r7, #3
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	0019      	movs	r1, r3
 800c59a:	0010      	movs	r0, r2
 800c59c:	f7f6 ffb1 	bl	8003502 <HAL_PCD_EP_SetStall>
 800c5a0:	0003      	movs	r3, r0
 800c5a2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5a4:	19bc      	adds	r4, r7, r6
 800c5a6:	197b      	adds	r3, r7, r5
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	0018      	movs	r0, r3
 800c5ac:	f000 f92f 	bl	800c80e <USBD_Get_USB_Status>
 800c5b0:	0003      	movs	r3, r0
 800c5b2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c5b4:	19bb      	adds	r3, r7, r6
 800c5b6:	781b      	ldrb	r3, [r3, #0]
}
 800c5b8:	0018      	movs	r0, r3
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	b005      	add	sp, #20
 800c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c5c0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5c2:	b085      	sub	sp, #20
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	000a      	movs	r2, r1
 800c5ca:	1cfb      	adds	r3, r7, #3
 800c5cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c5ce:	210f      	movs	r1, #15
 800c5d0:	187b      	adds	r3, r7, r1
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5d6:	260e      	movs	r6, #14
 800c5d8:	19bb      	adds	r3, r7, r6
 800c5da:	2200      	movs	r2, #0
 800c5dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	23b0      	movs	r3, #176	; 0xb0
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	58d2      	ldr	r2, [r2, r3]
 800c5e6:	000d      	movs	r5, r1
 800c5e8:	187c      	adds	r4, r7, r1
 800c5ea:	1cfb      	adds	r3, r7, #3
 800c5ec:	781b      	ldrb	r3, [r3, #0]
 800c5ee:	0019      	movs	r1, r3
 800c5f0:	0010      	movs	r0, r2
 800c5f2:	f7f6 ffe2 	bl	80035ba <HAL_PCD_EP_ClrStall>
 800c5f6:	0003      	movs	r3, r0
 800c5f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c5fa:	19bc      	adds	r4, r7, r6
 800c5fc:	197b      	adds	r3, r7, r5
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	0018      	movs	r0, r3
 800c602:	f000 f904 	bl	800c80e <USBD_Get_USB_Status>
 800c606:	0003      	movs	r3, r0
 800c608:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c60a:	19bb      	adds	r3, r7, r6
 800c60c:	781b      	ldrb	r3, [r3, #0]
}
 800c60e:	0018      	movs	r0, r3
 800c610:	46bd      	mov	sp, r7
 800c612:	b005      	add	sp, #20
 800c614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c616 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c616:	b580      	push	{r7, lr}
 800c618:	b084      	sub	sp, #16
 800c61a:	af00      	add	r7, sp, #0
 800c61c:	6078      	str	r0, [r7, #4]
 800c61e:	000a      	movs	r2, r1
 800c620:	1cfb      	adds	r3, r7, #3
 800c622:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c624:	687a      	ldr	r2, [r7, #4]
 800c626:	23b0      	movs	r3, #176	; 0xb0
 800c628:	009b      	lsls	r3, r3, #2
 800c62a:	58d3      	ldr	r3, [r2, r3]
 800c62c:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c62e:	1cfb      	adds	r3, r7, #3
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	b25b      	sxtb	r3, r3
 800c634:	2b00      	cmp	r3, #0
 800c636:	da0d      	bge.n	800c654 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c638:	1cfb      	adds	r3, r7, #3
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	227f      	movs	r2, #127	; 0x7f
 800c63e:	4013      	ands	r3, r2
 800c640:	68f9      	ldr	r1, [r7, #12]
 800c642:	1c5a      	adds	r2, r3, #1
 800c644:	0013      	movs	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	189b      	adds	r3, r3, r2
 800c64a:	00db      	lsls	r3, r3, #3
 800c64c:	18cb      	adds	r3, r1, r3
 800c64e:	3302      	adds	r3, #2
 800c650:	781b      	ldrb	r3, [r3, #0]
 800c652:	e00d      	b.n	800c670 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c654:	1cfb      	adds	r3, r7, #3
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	227f      	movs	r2, #127	; 0x7f
 800c65a:	401a      	ands	r2, r3
 800c65c:	68f8      	ldr	r0, [r7, #12]
 800c65e:	23b5      	movs	r3, #181	; 0xb5
 800c660:	0059      	lsls	r1, r3, #1
 800c662:	0013      	movs	r3, r2
 800c664:	009b      	lsls	r3, r3, #2
 800c666:	189b      	adds	r3, r3, r2
 800c668:	00db      	lsls	r3, r3, #3
 800c66a:	18c3      	adds	r3, r0, r3
 800c66c:	185b      	adds	r3, r3, r1
 800c66e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c670:	0018      	movs	r0, r3
 800c672:	46bd      	mov	sp, r7
 800c674:	b004      	add	sp, #16
 800c676:	bd80      	pop	{r7, pc}

0800c678 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
 800c680:	000a      	movs	r2, r1
 800c682:	1cfb      	adds	r3, r7, #3
 800c684:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c686:	210f      	movs	r1, #15
 800c688:	187b      	adds	r3, r7, r1
 800c68a:	2200      	movs	r2, #0
 800c68c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c68e:	260e      	movs	r6, #14
 800c690:	19bb      	adds	r3, r7, r6
 800c692:	2200      	movs	r2, #0
 800c694:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c696:	687a      	ldr	r2, [r7, #4]
 800c698:	23b0      	movs	r3, #176	; 0xb0
 800c69a:	009b      	lsls	r3, r3, #2
 800c69c:	58d2      	ldr	r2, [r2, r3]
 800c69e:	000d      	movs	r5, r1
 800c6a0:	187c      	adds	r4, r7, r1
 800c6a2:	1cfb      	adds	r3, r7, #3
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	0019      	movs	r1, r3
 800c6a8:	0010      	movs	r0, r2
 800c6aa:	f7f6 fdb3 	bl	8003214 <HAL_PCD_SetAddress>
 800c6ae:	0003      	movs	r3, r0
 800c6b0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c6b2:	19bc      	adds	r4, r7, r6
 800c6b4:	197b      	adds	r3, r7, r5
 800c6b6:	781b      	ldrb	r3, [r3, #0]
 800c6b8:	0018      	movs	r0, r3
 800c6ba:	f000 f8a8 	bl	800c80e <USBD_Get_USB_Status>
 800c6be:	0003      	movs	r3, r0
 800c6c0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c6c2:	19bb      	adds	r3, r7, r6
 800c6c4:	781b      	ldrb	r3, [r3, #0]
}
 800c6c6:	0018      	movs	r0, r3
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	b005      	add	sp, #20
 800c6cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c6ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6d0:	b087      	sub	sp, #28
 800c6d2:	af00      	add	r7, sp, #0
 800c6d4:	60f8      	str	r0, [r7, #12]
 800c6d6:	0008      	movs	r0, r1
 800c6d8:	607a      	str	r2, [r7, #4]
 800c6da:	0019      	movs	r1, r3
 800c6dc:	230b      	movs	r3, #11
 800c6de:	18fb      	adds	r3, r7, r3
 800c6e0:	1c02      	adds	r2, r0, #0
 800c6e2:	701a      	strb	r2, [r3, #0]
 800c6e4:	2408      	movs	r4, #8
 800c6e6:	193b      	adds	r3, r7, r4
 800c6e8:	1c0a      	adds	r2, r1, #0
 800c6ea:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c6ec:	2117      	movs	r1, #23
 800c6ee:	187b      	adds	r3, r7, r1
 800c6f0:	2200      	movs	r2, #0
 800c6f2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c6f4:	2516      	movs	r5, #22
 800c6f6:	197b      	adds	r3, r7, r5
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c6fc:	68fa      	ldr	r2, [r7, #12]
 800c6fe:	23b0      	movs	r3, #176	; 0xb0
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	58d0      	ldr	r0, [r2, r3]
 800c704:	193b      	adds	r3, r7, r4
 800c706:	881d      	ldrh	r5, [r3, #0]
 800c708:	000e      	movs	r6, r1
 800c70a:	187c      	adds	r4, r7, r1
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	230b      	movs	r3, #11
 800c710:	18fb      	adds	r3, r7, r3
 800c712:	7819      	ldrb	r1, [r3, #0]
 800c714:	002b      	movs	r3, r5
 800c716:	f7f6 feb8 	bl	800348a <HAL_PCD_EP_Transmit>
 800c71a:	0003      	movs	r3, r0
 800c71c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c71e:	2516      	movs	r5, #22
 800c720:	197c      	adds	r4, r7, r5
 800c722:	19bb      	adds	r3, r7, r6
 800c724:	781b      	ldrb	r3, [r3, #0]
 800c726:	0018      	movs	r0, r3
 800c728:	f000 f871 	bl	800c80e <USBD_Get_USB_Status>
 800c72c:	0003      	movs	r3, r0
 800c72e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c730:	197b      	adds	r3, r7, r5
 800c732:	781b      	ldrb	r3, [r3, #0]
}
 800c734:	0018      	movs	r0, r3
 800c736:	46bd      	mov	sp, r7
 800c738:	b007      	add	sp, #28
 800c73a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c73c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800c73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c73e:	b087      	sub	sp, #28
 800c740:	af00      	add	r7, sp, #0
 800c742:	60f8      	str	r0, [r7, #12]
 800c744:	0008      	movs	r0, r1
 800c746:	607a      	str	r2, [r7, #4]
 800c748:	0019      	movs	r1, r3
 800c74a:	230b      	movs	r3, #11
 800c74c:	18fb      	adds	r3, r7, r3
 800c74e:	1c02      	adds	r2, r0, #0
 800c750:	701a      	strb	r2, [r3, #0]
 800c752:	2408      	movs	r4, #8
 800c754:	193b      	adds	r3, r7, r4
 800c756:	1c0a      	adds	r2, r1, #0
 800c758:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c75a:	2117      	movs	r1, #23
 800c75c:	187b      	adds	r3, r7, r1
 800c75e:	2200      	movs	r2, #0
 800c760:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c762:	2516      	movs	r5, #22
 800c764:	197b      	adds	r3, r7, r5
 800c766:	2200      	movs	r2, #0
 800c768:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	23b0      	movs	r3, #176	; 0xb0
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	58d0      	ldr	r0, [r2, r3]
 800c772:	193b      	adds	r3, r7, r4
 800c774:	881d      	ldrh	r5, [r3, #0]
 800c776:	000e      	movs	r6, r1
 800c778:	187c      	adds	r4, r7, r1
 800c77a:	687a      	ldr	r2, [r7, #4]
 800c77c:	230b      	movs	r3, #11
 800c77e:	18fb      	adds	r3, r7, r3
 800c780:	7819      	ldrb	r1, [r3, #0]
 800c782:	002b      	movs	r3, r5
 800c784:	f7f6 fe31 	bl	80033ea <HAL_PCD_EP_Receive>
 800c788:	0003      	movs	r3, r0
 800c78a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c78c:	2516      	movs	r5, #22
 800c78e:	197c      	adds	r4, r7, r5
 800c790:	19bb      	adds	r3, r7, r6
 800c792:	781b      	ldrb	r3, [r3, #0]
 800c794:	0018      	movs	r0, r3
 800c796:	f000 f83a 	bl	800c80e <USBD_Get_USB_Status>
 800c79a:	0003      	movs	r3, r0
 800c79c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800c79e:	197b      	adds	r3, r7, r5
 800c7a0:	781b      	ldrb	r3, [r3, #0]
}
 800c7a2:	0018      	movs	r0, r3
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	b007      	add	sp, #28
 800c7a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c7aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b082      	sub	sp, #8
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	000a      	movs	r2, r1
 800c7b4:	1cfb      	adds	r3, r7, #3
 800c7b6:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c7b8:	687a      	ldr	r2, [r7, #4]
 800c7ba:	23b0      	movs	r3, #176	; 0xb0
 800c7bc:	009b      	lsls	r3, r3, #2
 800c7be:	58d2      	ldr	r2, [r2, r3]
 800c7c0:	1cfb      	adds	r3, r7, #3
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	0019      	movs	r1, r3
 800c7c6:	0010      	movs	r0, r2
 800c7c8:	f7f6 fe46 	bl	8003458 <HAL_PCD_EP_GetRxCount>
 800c7cc:	0003      	movs	r3, r0
}
 800c7ce:	0018      	movs	r0, r3
 800c7d0:	46bd      	mov	sp, r7
 800c7d2:	b002      	add	sp, #8
 800c7d4:	bd80      	pop	{r7, pc}
	...

0800c7d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b082      	sub	sp, #8
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c7e0:	4b02      	ldr	r3, [pc, #8]	; (800c7ec <USBD_static_malloc+0x14>)
}
 800c7e2:	0018      	movs	r0, r3
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	b002      	add	sp, #8
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	46c0      	nop			; (mov r8, r8)
 800c7ec:	2000122c 	.word	0x2000122c

0800c7f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]

}
 800c7f8:	46c0      	nop			; (mov r8, r8)
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	b002      	add	sp, #8
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c800:	b580      	push	{r7, lr}
 800c802:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c804:	f7f4 fc1a 	bl	800103c <SystemClock_Config>
}
 800c808:	46c0      	nop			; (mov r8, r8)
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b084      	sub	sp, #16
 800c812:	af00      	add	r7, sp, #0
 800c814:	0002      	movs	r2, r0
 800c816:	1dfb      	adds	r3, r7, #7
 800c818:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c81a:	230f      	movs	r3, #15
 800c81c:	18fb      	adds	r3, r7, r3
 800c81e:	2200      	movs	r2, #0
 800c820:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800c822:	1dfb      	adds	r3, r7, #7
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b03      	cmp	r3, #3
 800c828:	d017      	beq.n	800c85a <USBD_Get_USB_Status+0x4c>
 800c82a:	dc1b      	bgt.n	800c864 <USBD_Get_USB_Status+0x56>
 800c82c:	2b02      	cmp	r3, #2
 800c82e:	d00f      	beq.n	800c850 <USBD_Get_USB_Status+0x42>
 800c830:	dc18      	bgt.n	800c864 <USBD_Get_USB_Status+0x56>
 800c832:	2b00      	cmp	r3, #0
 800c834:	d002      	beq.n	800c83c <USBD_Get_USB_Status+0x2e>
 800c836:	2b01      	cmp	r3, #1
 800c838:	d005      	beq.n	800c846 <USBD_Get_USB_Status+0x38>
 800c83a:	e013      	b.n	800c864 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c83c:	230f      	movs	r3, #15
 800c83e:	18fb      	adds	r3, r7, r3
 800c840:	2200      	movs	r2, #0
 800c842:	701a      	strb	r2, [r3, #0]
    break;
 800c844:	e013      	b.n	800c86e <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c846:	230f      	movs	r3, #15
 800c848:	18fb      	adds	r3, r7, r3
 800c84a:	2202      	movs	r2, #2
 800c84c:	701a      	strb	r2, [r3, #0]
    break;
 800c84e:	e00e      	b.n	800c86e <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c850:	230f      	movs	r3, #15
 800c852:	18fb      	adds	r3, r7, r3
 800c854:	2201      	movs	r2, #1
 800c856:	701a      	strb	r2, [r3, #0]
    break;
 800c858:	e009      	b.n	800c86e <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c85a:	230f      	movs	r3, #15
 800c85c:	18fb      	adds	r3, r7, r3
 800c85e:	2202      	movs	r2, #2
 800c860:	701a      	strb	r2, [r3, #0]
    break;
 800c862:	e004      	b.n	800c86e <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800c864:	230f      	movs	r3, #15
 800c866:	18fb      	adds	r3, r7, r3
 800c868:	2202      	movs	r2, #2
 800c86a:	701a      	strb	r2, [r3, #0]
    break;
 800c86c:	46c0      	nop			; (mov r8, r8)
  }
  return usb_status;
 800c86e:	230f      	movs	r3, #15
 800c870:	18fb      	adds	r3, r7, r3
 800c872:	781b      	ldrb	r3, [r3, #0]
}
 800c874:	0018      	movs	r0, r3
 800c876:	46bd      	mov	sp, r7
 800c878:	b004      	add	sp, #16
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <__errno>:
 800c87c:	4b01      	ldr	r3, [pc, #4]	; (800c884 <__errno+0x8>)
 800c87e:	6818      	ldr	r0, [r3, #0]
 800c880:	4770      	bx	lr
 800c882:	46c0      	nop			; (mov r8, r8)
 800c884:	200001d4 	.word	0x200001d4

0800c888 <fiprintf>:
 800c888:	b40e      	push	{r1, r2, r3}
 800c88a:	b503      	push	{r0, r1, lr}
 800c88c:	0001      	movs	r1, r0
 800c88e:	ab03      	add	r3, sp, #12
 800c890:	4804      	ldr	r0, [pc, #16]	; (800c8a4 <fiprintf+0x1c>)
 800c892:	cb04      	ldmia	r3!, {r2}
 800c894:	6800      	ldr	r0, [r0, #0]
 800c896:	9301      	str	r3, [sp, #4]
 800c898:	f000 f86c 	bl	800c974 <_vfiprintf_r>
 800c89c:	b002      	add	sp, #8
 800c89e:	bc08      	pop	{r3}
 800c8a0:	b003      	add	sp, #12
 800c8a2:	4718      	bx	r3
 800c8a4:	200001d4 	.word	0x200001d4

0800c8a8 <getchar>:
 800c8a8:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <getchar+0x20>)
 800c8aa:	b510      	push	{r4, lr}
 800c8ac:	681c      	ldr	r4, [r3, #0]
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	d005      	beq.n	800c8be <getchar+0x16>
 800c8b2:	69a3      	ldr	r3, [r4, #24]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d102      	bne.n	800c8be <getchar+0x16>
 800c8b8:	0020      	movs	r0, r4
 800c8ba:	f000 ff51 	bl	800d760 <__sinit>
 800c8be:	0020      	movs	r0, r4
 800c8c0:	6861      	ldr	r1, [r4, #4]
 800c8c2:	f001 f809 	bl	800d8d8 <_getc_r>
 800c8c6:	bd10      	pop	{r4, pc}
 800c8c8:	200001d4 	.word	0x200001d4

0800c8cc <__libc_init_array>:
 800c8cc:	b570      	push	{r4, r5, r6, lr}
 800c8ce:	2600      	movs	r6, #0
 800c8d0:	4d0c      	ldr	r5, [pc, #48]	; (800c904 <__libc_init_array+0x38>)
 800c8d2:	4c0d      	ldr	r4, [pc, #52]	; (800c908 <__libc_init_array+0x3c>)
 800c8d4:	1b64      	subs	r4, r4, r5
 800c8d6:	10a4      	asrs	r4, r4, #2
 800c8d8:	42a6      	cmp	r6, r4
 800c8da:	d109      	bne.n	800c8f0 <__libc_init_array+0x24>
 800c8dc:	2600      	movs	r6, #0
 800c8de:	f002 f83d 	bl	800e95c <_init>
 800c8e2:	4d0a      	ldr	r5, [pc, #40]	; (800c90c <__libc_init_array+0x40>)
 800c8e4:	4c0a      	ldr	r4, [pc, #40]	; (800c910 <__libc_init_array+0x44>)
 800c8e6:	1b64      	subs	r4, r4, r5
 800c8e8:	10a4      	asrs	r4, r4, #2
 800c8ea:	42a6      	cmp	r6, r4
 800c8ec:	d105      	bne.n	800c8fa <__libc_init_array+0x2e>
 800c8ee:	bd70      	pop	{r4, r5, r6, pc}
 800c8f0:	00b3      	lsls	r3, r6, #2
 800c8f2:	58eb      	ldr	r3, [r5, r3]
 800c8f4:	4798      	blx	r3
 800c8f6:	3601      	adds	r6, #1
 800c8f8:	e7ee      	b.n	800c8d8 <__libc_init_array+0xc>
 800c8fa:	00b3      	lsls	r3, r6, #2
 800c8fc:	58eb      	ldr	r3, [r5, r3]
 800c8fe:	4798      	blx	r3
 800c900:	3601      	adds	r6, #1
 800c902:	e7f2      	b.n	800c8ea <__libc_init_array+0x1e>
 800c904:	0800f158 	.word	0x0800f158
 800c908:	0800f158 	.word	0x0800f158
 800c90c:	0800f158 	.word	0x0800f158
 800c910:	0800f15c 	.word	0x0800f15c

0800c914 <memset>:
 800c914:	0003      	movs	r3, r0
 800c916:	1882      	adds	r2, r0, r2
 800c918:	4293      	cmp	r3, r2
 800c91a:	d100      	bne.n	800c91e <memset+0xa>
 800c91c:	4770      	bx	lr
 800c91e:	7019      	strb	r1, [r3, #0]
 800c920:	3301      	adds	r3, #1
 800c922:	e7f9      	b.n	800c918 <memset+0x4>

0800c924 <__sfputc_r>:
 800c924:	6893      	ldr	r3, [r2, #8]
 800c926:	b510      	push	{r4, lr}
 800c928:	3b01      	subs	r3, #1
 800c92a:	6093      	str	r3, [r2, #8]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	da04      	bge.n	800c93a <__sfputc_r+0x16>
 800c930:	6994      	ldr	r4, [r2, #24]
 800c932:	42a3      	cmp	r3, r4
 800c934:	db07      	blt.n	800c946 <__sfputc_r+0x22>
 800c936:	290a      	cmp	r1, #10
 800c938:	d005      	beq.n	800c946 <__sfputc_r+0x22>
 800c93a:	6813      	ldr	r3, [r2, #0]
 800c93c:	1c58      	adds	r0, r3, #1
 800c93e:	6010      	str	r0, [r2, #0]
 800c940:	7019      	strb	r1, [r3, #0]
 800c942:	0008      	movs	r0, r1
 800c944:	bd10      	pop	{r4, pc}
 800c946:	f000 fcd3 	bl	800d2f0 <__swbuf_r>
 800c94a:	0001      	movs	r1, r0
 800c94c:	e7f9      	b.n	800c942 <__sfputc_r+0x1e>

0800c94e <__sfputs_r>:
 800c94e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c950:	0006      	movs	r6, r0
 800c952:	000f      	movs	r7, r1
 800c954:	0014      	movs	r4, r2
 800c956:	18d5      	adds	r5, r2, r3
 800c958:	42ac      	cmp	r4, r5
 800c95a:	d101      	bne.n	800c960 <__sfputs_r+0x12>
 800c95c:	2000      	movs	r0, #0
 800c95e:	e007      	b.n	800c970 <__sfputs_r+0x22>
 800c960:	7821      	ldrb	r1, [r4, #0]
 800c962:	003a      	movs	r2, r7
 800c964:	0030      	movs	r0, r6
 800c966:	f7ff ffdd 	bl	800c924 <__sfputc_r>
 800c96a:	3401      	adds	r4, #1
 800c96c:	1c43      	adds	r3, r0, #1
 800c96e:	d1f3      	bne.n	800c958 <__sfputs_r+0xa>
 800c970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c974 <_vfiprintf_r>:
 800c974:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c976:	b0a1      	sub	sp, #132	; 0x84
 800c978:	0006      	movs	r6, r0
 800c97a:	000c      	movs	r4, r1
 800c97c:	001f      	movs	r7, r3
 800c97e:	9203      	str	r2, [sp, #12]
 800c980:	2800      	cmp	r0, #0
 800c982:	d004      	beq.n	800c98e <_vfiprintf_r+0x1a>
 800c984:	6983      	ldr	r3, [r0, #24]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d101      	bne.n	800c98e <_vfiprintf_r+0x1a>
 800c98a:	f000 fee9 	bl	800d760 <__sinit>
 800c98e:	4b8e      	ldr	r3, [pc, #568]	; (800cbc8 <_vfiprintf_r+0x254>)
 800c990:	429c      	cmp	r4, r3
 800c992:	d11c      	bne.n	800c9ce <_vfiprintf_r+0x5a>
 800c994:	6874      	ldr	r4, [r6, #4]
 800c996:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c998:	07db      	lsls	r3, r3, #31
 800c99a:	d405      	bmi.n	800c9a8 <_vfiprintf_r+0x34>
 800c99c:	89a3      	ldrh	r3, [r4, #12]
 800c99e:	059b      	lsls	r3, r3, #22
 800c9a0:	d402      	bmi.n	800c9a8 <_vfiprintf_r+0x34>
 800c9a2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9a4:	f000 ffdb 	bl	800d95e <__retarget_lock_acquire_recursive>
 800c9a8:	89a3      	ldrh	r3, [r4, #12]
 800c9aa:	071b      	lsls	r3, r3, #28
 800c9ac:	d502      	bpl.n	800c9b4 <_vfiprintf_r+0x40>
 800c9ae:	6923      	ldr	r3, [r4, #16]
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d11d      	bne.n	800c9f0 <_vfiprintf_r+0x7c>
 800c9b4:	0021      	movs	r1, r4
 800c9b6:	0030      	movs	r0, r6
 800c9b8:	f000 fd04 	bl	800d3c4 <__swsetup_r>
 800c9bc:	2800      	cmp	r0, #0
 800c9be:	d017      	beq.n	800c9f0 <_vfiprintf_r+0x7c>
 800c9c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9c2:	07db      	lsls	r3, r3, #31
 800c9c4:	d50d      	bpl.n	800c9e2 <_vfiprintf_r+0x6e>
 800c9c6:	2001      	movs	r0, #1
 800c9c8:	4240      	negs	r0, r0
 800c9ca:	b021      	add	sp, #132	; 0x84
 800c9cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c9ce:	4b7f      	ldr	r3, [pc, #508]	; (800cbcc <_vfiprintf_r+0x258>)
 800c9d0:	429c      	cmp	r4, r3
 800c9d2:	d101      	bne.n	800c9d8 <_vfiprintf_r+0x64>
 800c9d4:	68b4      	ldr	r4, [r6, #8]
 800c9d6:	e7de      	b.n	800c996 <_vfiprintf_r+0x22>
 800c9d8:	4b7d      	ldr	r3, [pc, #500]	; (800cbd0 <_vfiprintf_r+0x25c>)
 800c9da:	429c      	cmp	r4, r3
 800c9dc:	d1db      	bne.n	800c996 <_vfiprintf_r+0x22>
 800c9de:	68f4      	ldr	r4, [r6, #12]
 800c9e0:	e7d9      	b.n	800c996 <_vfiprintf_r+0x22>
 800c9e2:	89a3      	ldrh	r3, [r4, #12]
 800c9e4:	059b      	lsls	r3, r3, #22
 800c9e6:	d4ee      	bmi.n	800c9c6 <_vfiprintf_r+0x52>
 800c9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9ea:	f000 ffb9 	bl	800d960 <__retarget_lock_release_recursive>
 800c9ee:	e7ea      	b.n	800c9c6 <_vfiprintf_r+0x52>
 800c9f0:	2300      	movs	r3, #0
 800c9f2:	ad08      	add	r5, sp, #32
 800c9f4:	616b      	str	r3, [r5, #20]
 800c9f6:	3320      	adds	r3, #32
 800c9f8:	766b      	strb	r3, [r5, #25]
 800c9fa:	3310      	adds	r3, #16
 800c9fc:	76ab      	strb	r3, [r5, #26]
 800c9fe:	9707      	str	r7, [sp, #28]
 800ca00:	9f03      	ldr	r7, [sp, #12]
 800ca02:	783b      	ldrb	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <_vfiprintf_r+0x98>
 800ca08:	2b25      	cmp	r3, #37	; 0x25
 800ca0a:	d14e      	bne.n	800caaa <_vfiprintf_r+0x136>
 800ca0c:	9b03      	ldr	r3, [sp, #12]
 800ca0e:	1afb      	subs	r3, r7, r3
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	9b03      	ldr	r3, [sp, #12]
 800ca14:	429f      	cmp	r7, r3
 800ca16:	d00d      	beq.n	800ca34 <_vfiprintf_r+0xc0>
 800ca18:	9b05      	ldr	r3, [sp, #20]
 800ca1a:	0021      	movs	r1, r4
 800ca1c:	0030      	movs	r0, r6
 800ca1e:	9a03      	ldr	r2, [sp, #12]
 800ca20:	f7ff ff95 	bl	800c94e <__sfputs_r>
 800ca24:	1c43      	adds	r3, r0, #1
 800ca26:	d100      	bne.n	800ca2a <_vfiprintf_r+0xb6>
 800ca28:	e0b5      	b.n	800cb96 <_vfiprintf_r+0x222>
 800ca2a:	696a      	ldr	r2, [r5, #20]
 800ca2c:	9b05      	ldr	r3, [sp, #20]
 800ca2e:	4694      	mov	ip, r2
 800ca30:	4463      	add	r3, ip
 800ca32:	616b      	str	r3, [r5, #20]
 800ca34:	783b      	ldrb	r3, [r7, #0]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d100      	bne.n	800ca3c <_vfiprintf_r+0xc8>
 800ca3a:	e0ac      	b.n	800cb96 <_vfiprintf_r+0x222>
 800ca3c:	2201      	movs	r2, #1
 800ca3e:	1c7b      	adds	r3, r7, #1
 800ca40:	9303      	str	r3, [sp, #12]
 800ca42:	2300      	movs	r3, #0
 800ca44:	4252      	negs	r2, r2
 800ca46:	606a      	str	r2, [r5, #4]
 800ca48:	a904      	add	r1, sp, #16
 800ca4a:	3254      	adds	r2, #84	; 0x54
 800ca4c:	1852      	adds	r2, r2, r1
 800ca4e:	602b      	str	r3, [r5, #0]
 800ca50:	60eb      	str	r3, [r5, #12]
 800ca52:	60ab      	str	r3, [r5, #8]
 800ca54:	7013      	strb	r3, [r2, #0]
 800ca56:	65ab      	str	r3, [r5, #88]	; 0x58
 800ca58:	9b03      	ldr	r3, [sp, #12]
 800ca5a:	2205      	movs	r2, #5
 800ca5c:	7819      	ldrb	r1, [r3, #0]
 800ca5e:	485d      	ldr	r0, [pc, #372]	; (800cbd4 <_vfiprintf_r+0x260>)
 800ca60:	f001 f80a 	bl	800da78 <memchr>
 800ca64:	9b03      	ldr	r3, [sp, #12]
 800ca66:	1c5f      	adds	r7, r3, #1
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	d120      	bne.n	800caae <_vfiprintf_r+0x13a>
 800ca6c:	682a      	ldr	r2, [r5, #0]
 800ca6e:	06d3      	lsls	r3, r2, #27
 800ca70:	d504      	bpl.n	800ca7c <_vfiprintf_r+0x108>
 800ca72:	2353      	movs	r3, #83	; 0x53
 800ca74:	a904      	add	r1, sp, #16
 800ca76:	185b      	adds	r3, r3, r1
 800ca78:	2120      	movs	r1, #32
 800ca7a:	7019      	strb	r1, [r3, #0]
 800ca7c:	0713      	lsls	r3, r2, #28
 800ca7e:	d504      	bpl.n	800ca8a <_vfiprintf_r+0x116>
 800ca80:	2353      	movs	r3, #83	; 0x53
 800ca82:	a904      	add	r1, sp, #16
 800ca84:	185b      	adds	r3, r3, r1
 800ca86:	212b      	movs	r1, #43	; 0x2b
 800ca88:	7019      	strb	r1, [r3, #0]
 800ca8a:	9b03      	ldr	r3, [sp, #12]
 800ca8c:	781b      	ldrb	r3, [r3, #0]
 800ca8e:	2b2a      	cmp	r3, #42	; 0x2a
 800ca90:	d016      	beq.n	800cac0 <_vfiprintf_r+0x14c>
 800ca92:	2100      	movs	r1, #0
 800ca94:	68eb      	ldr	r3, [r5, #12]
 800ca96:	9f03      	ldr	r7, [sp, #12]
 800ca98:	783a      	ldrb	r2, [r7, #0]
 800ca9a:	1c78      	adds	r0, r7, #1
 800ca9c:	3a30      	subs	r2, #48	; 0x30
 800ca9e:	4684      	mov	ip, r0
 800caa0:	2a09      	cmp	r2, #9
 800caa2:	d94f      	bls.n	800cb44 <_vfiprintf_r+0x1d0>
 800caa4:	2900      	cmp	r1, #0
 800caa6:	d111      	bne.n	800cacc <_vfiprintf_r+0x158>
 800caa8:	e017      	b.n	800cada <_vfiprintf_r+0x166>
 800caaa:	3701      	adds	r7, #1
 800caac:	e7a9      	b.n	800ca02 <_vfiprintf_r+0x8e>
 800caae:	4b49      	ldr	r3, [pc, #292]	; (800cbd4 <_vfiprintf_r+0x260>)
 800cab0:	682a      	ldr	r2, [r5, #0]
 800cab2:	1ac0      	subs	r0, r0, r3
 800cab4:	2301      	movs	r3, #1
 800cab6:	4083      	lsls	r3, r0
 800cab8:	4313      	orrs	r3, r2
 800caba:	602b      	str	r3, [r5, #0]
 800cabc:	9703      	str	r7, [sp, #12]
 800cabe:	e7cb      	b.n	800ca58 <_vfiprintf_r+0xe4>
 800cac0:	9b07      	ldr	r3, [sp, #28]
 800cac2:	1d19      	adds	r1, r3, #4
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	9107      	str	r1, [sp, #28]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	db01      	blt.n	800cad0 <_vfiprintf_r+0x15c>
 800cacc:	930b      	str	r3, [sp, #44]	; 0x2c
 800cace:	e004      	b.n	800cada <_vfiprintf_r+0x166>
 800cad0:	425b      	negs	r3, r3
 800cad2:	60eb      	str	r3, [r5, #12]
 800cad4:	2302      	movs	r3, #2
 800cad6:	4313      	orrs	r3, r2
 800cad8:	602b      	str	r3, [r5, #0]
 800cada:	783b      	ldrb	r3, [r7, #0]
 800cadc:	2b2e      	cmp	r3, #46	; 0x2e
 800cade:	d10a      	bne.n	800caf6 <_vfiprintf_r+0x182>
 800cae0:	787b      	ldrb	r3, [r7, #1]
 800cae2:	2b2a      	cmp	r3, #42	; 0x2a
 800cae4:	d137      	bne.n	800cb56 <_vfiprintf_r+0x1e2>
 800cae6:	9b07      	ldr	r3, [sp, #28]
 800cae8:	3702      	adds	r7, #2
 800caea:	1d1a      	adds	r2, r3, #4
 800caec:	681b      	ldr	r3, [r3, #0]
 800caee:	9207      	str	r2, [sp, #28]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	db2d      	blt.n	800cb50 <_vfiprintf_r+0x1dc>
 800caf4:	9309      	str	r3, [sp, #36]	; 0x24
 800caf6:	2203      	movs	r2, #3
 800caf8:	7839      	ldrb	r1, [r7, #0]
 800cafa:	4837      	ldr	r0, [pc, #220]	; (800cbd8 <_vfiprintf_r+0x264>)
 800cafc:	f000 ffbc 	bl	800da78 <memchr>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d007      	beq.n	800cb14 <_vfiprintf_r+0x1a0>
 800cb04:	4b34      	ldr	r3, [pc, #208]	; (800cbd8 <_vfiprintf_r+0x264>)
 800cb06:	682a      	ldr	r2, [r5, #0]
 800cb08:	1ac0      	subs	r0, r0, r3
 800cb0a:	2340      	movs	r3, #64	; 0x40
 800cb0c:	4083      	lsls	r3, r0
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	3701      	adds	r7, #1
 800cb12:	602b      	str	r3, [r5, #0]
 800cb14:	7839      	ldrb	r1, [r7, #0]
 800cb16:	1c7b      	adds	r3, r7, #1
 800cb18:	2206      	movs	r2, #6
 800cb1a:	4830      	ldr	r0, [pc, #192]	; (800cbdc <_vfiprintf_r+0x268>)
 800cb1c:	9303      	str	r3, [sp, #12]
 800cb1e:	7629      	strb	r1, [r5, #24]
 800cb20:	f000 ffaa 	bl	800da78 <memchr>
 800cb24:	2800      	cmp	r0, #0
 800cb26:	d045      	beq.n	800cbb4 <_vfiprintf_r+0x240>
 800cb28:	4b2d      	ldr	r3, [pc, #180]	; (800cbe0 <_vfiprintf_r+0x26c>)
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d127      	bne.n	800cb7e <_vfiprintf_r+0x20a>
 800cb2e:	2207      	movs	r2, #7
 800cb30:	9b07      	ldr	r3, [sp, #28]
 800cb32:	3307      	adds	r3, #7
 800cb34:	4393      	bics	r3, r2
 800cb36:	3308      	adds	r3, #8
 800cb38:	9307      	str	r3, [sp, #28]
 800cb3a:	696b      	ldr	r3, [r5, #20]
 800cb3c:	9a04      	ldr	r2, [sp, #16]
 800cb3e:	189b      	adds	r3, r3, r2
 800cb40:	616b      	str	r3, [r5, #20]
 800cb42:	e75d      	b.n	800ca00 <_vfiprintf_r+0x8c>
 800cb44:	210a      	movs	r1, #10
 800cb46:	434b      	muls	r3, r1
 800cb48:	4667      	mov	r7, ip
 800cb4a:	189b      	adds	r3, r3, r2
 800cb4c:	3909      	subs	r1, #9
 800cb4e:	e7a3      	b.n	800ca98 <_vfiprintf_r+0x124>
 800cb50:	2301      	movs	r3, #1
 800cb52:	425b      	negs	r3, r3
 800cb54:	e7ce      	b.n	800caf4 <_vfiprintf_r+0x180>
 800cb56:	2300      	movs	r3, #0
 800cb58:	001a      	movs	r2, r3
 800cb5a:	3701      	adds	r7, #1
 800cb5c:	606b      	str	r3, [r5, #4]
 800cb5e:	7839      	ldrb	r1, [r7, #0]
 800cb60:	1c78      	adds	r0, r7, #1
 800cb62:	3930      	subs	r1, #48	; 0x30
 800cb64:	4684      	mov	ip, r0
 800cb66:	2909      	cmp	r1, #9
 800cb68:	d903      	bls.n	800cb72 <_vfiprintf_r+0x1fe>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0c3      	beq.n	800caf6 <_vfiprintf_r+0x182>
 800cb6e:	9209      	str	r2, [sp, #36]	; 0x24
 800cb70:	e7c1      	b.n	800caf6 <_vfiprintf_r+0x182>
 800cb72:	230a      	movs	r3, #10
 800cb74:	435a      	muls	r2, r3
 800cb76:	4667      	mov	r7, ip
 800cb78:	1852      	adds	r2, r2, r1
 800cb7a:	3b09      	subs	r3, #9
 800cb7c:	e7ef      	b.n	800cb5e <_vfiprintf_r+0x1ea>
 800cb7e:	ab07      	add	r3, sp, #28
 800cb80:	9300      	str	r3, [sp, #0]
 800cb82:	0022      	movs	r2, r4
 800cb84:	0029      	movs	r1, r5
 800cb86:	0030      	movs	r0, r6
 800cb88:	4b16      	ldr	r3, [pc, #88]	; (800cbe4 <_vfiprintf_r+0x270>)
 800cb8a:	e000      	b.n	800cb8e <_vfiprintf_r+0x21a>
 800cb8c:	bf00      	nop
 800cb8e:	9004      	str	r0, [sp, #16]
 800cb90:	9b04      	ldr	r3, [sp, #16]
 800cb92:	3301      	adds	r3, #1
 800cb94:	d1d1      	bne.n	800cb3a <_vfiprintf_r+0x1c6>
 800cb96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb98:	07db      	lsls	r3, r3, #31
 800cb9a:	d405      	bmi.n	800cba8 <_vfiprintf_r+0x234>
 800cb9c:	89a3      	ldrh	r3, [r4, #12]
 800cb9e:	059b      	lsls	r3, r3, #22
 800cba0:	d402      	bmi.n	800cba8 <_vfiprintf_r+0x234>
 800cba2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cba4:	f000 fedc 	bl	800d960 <__retarget_lock_release_recursive>
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	065b      	lsls	r3, r3, #25
 800cbac:	d500      	bpl.n	800cbb0 <_vfiprintf_r+0x23c>
 800cbae:	e70a      	b.n	800c9c6 <_vfiprintf_r+0x52>
 800cbb0:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cbb2:	e70a      	b.n	800c9ca <_vfiprintf_r+0x56>
 800cbb4:	ab07      	add	r3, sp, #28
 800cbb6:	9300      	str	r3, [sp, #0]
 800cbb8:	0022      	movs	r2, r4
 800cbba:	0029      	movs	r1, r5
 800cbbc:	0030      	movs	r0, r6
 800cbbe:	4b09      	ldr	r3, [pc, #36]	; (800cbe4 <_vfiprintf_r+0x270>)
 800cbc0:	f000 f882 	bl	800ccc8 <_printf_i>
 800cbc4:	e7e3      	b.n	800cb8e <_vfiprintf_r+0x21a>
 800cbc6:	46c0      	nop			; (mov r8, r8)
 800cbc8:	0800effc 	.word	0x0800effc
 800cbcc:	0800f01c 	.word	0x0800f01c
 800cbd0:	0800efdc 	.word	0x0800efdc
 800cbd4:	0800efa8 	.word	0x0800efa8
 800cbd8:	0800efae 	.word	0x0800efae
 800cbdc:	0800efb2 	.word	0x0800efb2
 800cbe0:	00000000 	.word	0x00000000
 800cbe4:	0800c94f 	.word	0x0800c94f

0800cbe8 <_printf_common>:
 800cbe8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cbea:	0015      	movs	r5, r2
 800cbec:	9301      	str	r3, [sp, #4]
 800cbee:	688a      	ldr	r2, [r1, #8]
 800cbf0:	690b      	ldr	r3, [r1, #16]
 800cbf2:	000c      	movs	r4, r1
 800cbf4:	9000      	str	r0, [sp, #0]
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	da00      	bge.n	800cbfc <_printf_common+0x14>
 800cbfa:	0013      	movs	r3, r2
 800cbfc:	0022      	movs	r2, r4
 800cbfe:	602b      	str	r3, [r5, #0]
 800cc00:	3243      	adds	r2, #67	; 0x43
 800cc02:	7812      	ldrb	r2, [r2, #0]
 800cc04:	2a00      	cmp	r2, #0
 800cc06:	d001      	beq.n	800cc0c <_printf_common+0x24>
 800cc08:	3301      	adds	r3, #1
 800cc0a:	602b      	str	r3, [r5, #0]
 800cc0c:	6823      	ldr	r3, [r4, #0]
 800cc0e:	069b      	lsls	r3, r3, #26
 800cc10:	d502      	bpl.n	800cc18 <_printf_common+0x30>
 800cc12:	682b      	ldr	r3, [r5, #0]
 800cc14:	3302      	adds	r3, #2
 800cc16:	602b      	str	r3, [r5, #0]
 800cc18:	6822      	ldr	r2, [r4, #0]
 800cc1a:	2306      	movs	r3, #6
 800cc1c:	0017      	movs	r7, r2
 800cc1e:	401f      	ands	r7, r3
 800cc20:	421a      	tst	r2, r3
 800cc22:	d027      	beq.n	800cc74 <_printf_common+0x8c>
 800cc24:	0023      	movs	r3, r4
 800cc26:	3343      	adds	r3, #67	; 0x43
 800cc28:	781b      	ldrb	r3, [r3, #0]
 800cc2a:	1e5a      	subs	r2, r3, #1
 800cc2c:	4193      	sbcs	r3, r2
 800cc2e:	6822      	ldr	r2, [r4, #0]
 800cc30:	0692      	lsls	r2, r2, #26
 800cc32:	d430      	bmi.n	800cc96 <_printf_common+0xae>
 800cc34:	0022      	movs	r2, r4
 800cc36:	9901      	ldr	r1, [sp, #4]
 800cc38:	9800      	ldr	r0, [sp, #0]
 800cc3a:	9e08      	ldr	r6, [sp, #32]
 800cc3c:	3243      	adds	r2, #67	; 0x43
 800cc3e:	47b0      	blx	r6
 800cc40:	1c43      	adds	r3, r0, #1
 800cc42:	d025      	beq.n	800cc90 <_printf_common+0xa8>
 800cc44:	2306      	movs	r3, #6
 800cc46:	6820      	ldr	r0, [r4, #0]
 800cc48:	682a      	ldr	r2, [r5, #0]
 800cc4a:	68e1      	ldr	r1, [r4, #12]
 800cc4c:	2500      	movs	r5, #0
 800cc4e:	4003      	ands	r3, r0
 800cc50:	2b04      	cmp	r3, #4
 800cc52:	d103      	bne.n	800cc5c <_printf_common+0x74>
 800cc54:	1a8d      	subs	r5, r1, r2
 800cc56:	43eb      	mvns	r3, r5
 800cc58:	17db      	asrs	r3, r3, #31
 800cc5a:	401d      	ands	r5, r3
 800cc5c:	68a3      	ldr	r3, [r4, #8]
 800cc5e:	6922      	ldr	r2, [r4, #16]
 800cc60:	4293      	cmp	r3, r2
 800cc62:	dd01      	ble.n	800cc68 <_printf_common+0x80>
 800cc64:	1a9b      	subs	r3, r3, r2
 800cc66:	18ed      	adds	r5, r5, r3
 800cc68:	2700      	movs	r7, #0
 800cc6a:	42bd      	cmp	r5, r7
 800cc6c:	d120      	bne.n	800ccb0 <_printf_common+0xc8>
 800cc6e:	2000      	movs	r0, #0
 800cc70:	e010      	b.n	800cc94 <_printf_common+0xac>
 800cc72:	3701      	adds	r7, #1
 800cc74:	68e3      	ldr	r3, [r4, #12]
 800cc76:	682a      	ldr	r2, [r5, #0]
 800cc78:	1a9b      	subs	r3, r3, r2
 800cc7a:	42bb      	cmp	r3, r7
 800cc7c:	ddd2      	ble.n	800cc24 <_printf_common+0x3c>
 800cc7e:	0022      	movs	r2, r4
 800cc80:	2301      	movs	r3, #1
 800cc82:	9901      	ldr	r1, [sp, #4]
 800cc84:	9800      	ldr	r0, [sp, #0]
 800cc86:	9e08      	ldr	r6, [sp, #32]
 800cc88:	3219      	adds	r2, #25
 800cc8a:	47b0      	blx	r6
 800cc8c:	1c43      	adds	r3, r0, #1
 800cc8e:	d1f0      	bne.n	800cc72 <_printf_common+0x8a>
 800cc90:	2001      	movs	r0, #1
 800cc92:	4240      	negs	r0, r0
 800cc94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc96:	2030      	movs	r0, #48	; 0x30
 800cc98:	18e1      	adds	r1, r4, r3
 800cc9a:	3143      	adds	r1, #67	; 0x43
 800cc9c:	7008      	strb	r0, [r1, #0]
 800cc9e:	0021      	movs	r1, r4
 800cca0:	1c5a      	adds	r2, r3, #1
 800cca2:	3145      	adds	r1, #69	; 0x45
 800cca4:	7809      	ldrb	r1, [r1, #0]
 800cca6:	18a2      	adds	r2, r4, r2
 800cca8:	3243      	adds	r2, #67	; 0x43
 800ccaa:	3302      	adds	r3, #2
 800ccac:	7011      	strb	r1, [r2, #0]
 800ccae:	e7c1      	b.n	800cc34 <_printf_common+0x4c>
 800ccb0:	0022      	movs	r2, r4
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	9901      	ldr	r1, [sp, #4]
 800ccb6:	9800      	ldr	r0, [sp, #0]
 800ccb8:	9e08      	ldr	r6, [sp, #32]
 800ccba:	321a      	adds	r2, #26
 800ccbc:	47b0      	blx	r6
 800ccbe:	1c43      	adds	r3, r0, #1
 800ccc0:	d0e6      	beq.n	800cc90 <_printf_common+0xa8>
 800ccc2:	3701      	adds	r7, #1
 800ccc4:	e7d1      	b.n	800cc6a <_printf_common+0x82>
	...

0800ccc8 <_printf_i>:
 800ccc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ccca:	b08b      	sub	sp, #44	; 0x2c
 800cccc:	9206      	str	r2, [sp, #24]
 800ccce:	000a      	movs	r2, r1
 800ccd0:	3243      	adds	r2, #67	; 0x43
 800ccd2:	9307      	str	r3, [sp, #28]
 800ccd4:	9005      	str	r0, [sp, #20]
 800ccd6:	9204      	str	r2, [sp, #16]
 800ccd8:	7e0a      	ldrb	r2, [r1, #24]
 800ccda:	000c      	movs	r4, r1
 800ccdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ccde:	2a78      	cmp	r2, #120	; 0x78
 800cce0:	d807      	bhi.n	800ccf2 <_printf_i+0x2a>
 800cce2:	2a62      	cmp	r2, #98	; 0x62
 800cce4:	d809      	bhi.n	800ccfa <_printf_i+0x32>
 800cce6:	2a00      	cmp	r2, #0
 800cce8:	d100      	bne.n	800ccec <_printf_i+0x24>
 800ccea:	e0c1      	b.n	800ce70 <_printf_i+0x1a8>
 800ccec:	2a58      	cmp	r2, #88	; 0x58
 800ccee:	d100      	bne.n	800ccf2 <_printf_i+0x2a>
 800ccf0:	e08c      	b.n	800ce0c <_printf_i+0x144>
 800ccf2:	0026      	movs	r6, r4
 800ccf4:	3642      	adds	r6, #66	; 0x42
 800ccf6:	7032      	strb	r2, [r6, #0]
 800ccf8:	e022      	b.n	800cd40 <_printf_i+0x78>
 800ccfa:	0010      	movs	r0, r2
 800ccfc:	3863      	subs	r0, #99	; 0x63
 800ccfe:	2815      	cmp	r0, #21
 800cd00:	d8f7      	bhi.n	800ccf2 <_printf_i+0x2a>
 800cd02:	f7f3 fa13 	bl	800012c <__gnu_thumb1_case_shi>
 800cd06:	0016      	.short	0x0016
 800cd08:	fff6001f 	.word	0xfff6001f
 800cd0c:	fff6fff6 	.word	0xfff6fff6
 800cd10:	001ffff6 	.word	0x001ffff6
 800cd14:	fff6fff6 	.word	0xfff6fff6
 800cd18:	fff6fff6 	.word	0xfff6fff6
 800cd1c:	003600a8 	.word	0x003600a8
 800cd20:	fff6009a 	.word	0xfff6009a
 800cd24:	00b9fff6 	.word	0x00b9fff6
 800cd28:	0036fff6 	.word	0x0036fff6
 800cd2c:	fff6fff6 	.word	0xfff6fff6
 800cd30:	009e      	.short	0x009e
 800cd32:	0026      	movs	r6, r4
 800cd34:	681a      	ldr	r2, [r3, #0]
 800cd36:	3642      	adds	r6, #66	; 0x42
 800cd38:	1d11      	adds	r1, r2, #4
 800cd3a:	6019      	str	r1, [r3, #0]
 800cd3c:	6813      	ldr	r3, [r2, #0]
 800cd3e:	7033      	strb	r3, [r6, #0]
 800cd40:	2301      	movs	r3, #1
 800cd42:	e0a7      	b.n	800ce94 <_printf_i+0x1cc>
 800cd44:	6808      	ldr	r0, [r1, #0]
 800cd46:	6819      	ldr	r1, [r3, #0]
 800cd48:	1d0a      	adds	r2, r1, #4
 800cd4a:	0605      	lsls	r5, r0, #24
 800cd4c:	d50b      	bpl.n	800cd66 <_printf_i+0x9e>
 800cd4e:	680d      	ldr	r5, [r1, #0]
 800cd50:	601a      	str	r2, [r3, #0]
 800cd52:	2d00      	cmp	r5, #0
 800cd54:	da03      	bge.n	800cd5e <_printf_i+0x96>
 800cd56:	232d      	movs	r3, #45	; 0x2d
 800cd58:	9a04      	ldr	r2, [sp, #16]
 800cd5a:	426d      	negs	r5, r5
 800cd5c:	7013      	strb	r3, [r2, #0]
 800cd5e:	4b61      	ldr	r3, [pc, #388]	; (800cee4 <_printf_i+0x21c>)
 800cd60:	270a      	movs	r7, #10
 800cd62:	9303      	str	r3, [sp, #12]
 800cd64:	e01b      	b.n	800cd9e <_printf_i+0xd6>
 800cd66:	680d      	ldr	r5, [r1, #0]
 800cd68:	601a      	str	r2, [r3, #0]
 800cd6a:	0641      	lsls	r1, r0, #25
 800cd6c:	d5f1      	bpl.n	800cd52 <_printf_i+0x8a>
 800cd6e:	b22d      	sxth	r5, r5
 800cd70:	e7ef      	b.n	800cd52 <_printf_i+0x8a>
 800cd72:	680d      	ldr	r5, [r1, #0]
 800cd74:	6819      	ldr	r1, [r3, #0]
 800cd76:	1d08      	adds	r0, r1, #4
 800cd78:	6018      	str	r0, [r3, #0]
 800cd7a:	062e      	lsls	r6, r5, #24
 800cd7c:	d501      	bpl.n	800cd82 <_printf_i+0xba>
 800cd7e:	680d      	ldr	r5, [r1, #0]
 800cd80:	e003      	b.n	800cd8a <_printf_i+0xc2>
 800cd82:	066d      	lsls	r5, r5, #25
 800cd84:	d5fb      	bpl.n	800cd7e <_printf_i+0xb6>
 800cd86:	680d      	ldr	r5, [r1, #0]
 800cd88:	b2ad      	uxth	r5, r5
 800cd8a:	4b56      	ldr	r3, [pc, #344]	; (800cee4 <_printf_i+0x21c>)
 800cd8c:	2708      	movs	r7, #8
 800cd8e:	9303      	str	r3, [sp, #12]
 800cd90:	2a6f      	cmp	r2, #111	; 0x6f
 800cd92:	d000      	beq.n	800cd96 <_printf_i+0xce>
 800cd94:	3702      	adds	r7, #2
 800cd96:	0023      	movs	r3, r4
 800cd98:	2200      	movs	r2, #0
 800cd9a:	3343      	adds	r3, #67	; 0x43
 800cd9c:	701a      	strb	r2, [r3, #0]
 800cd9e:	6863      	ldr	r3, [r4, #4]
 800cda0:	60a3      	str	r3, [r4, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	db03      	blt.n	800cdae <_printf_i+0xe6>
 800cda6:	2204      	movs	r2, #4
 800cda8:	6821      	ldr	r1, [r4, #0]
 800cdaa:	4391      	bics	r1, r2
 800cdac:	6021      	str	r1, [r4, #0]
 800cdae:	2d00      	cmp	r5, #0
 800cdb0:	d102      	bne.n	800cdb8 <_printf_i+0xf0>
 800cdb2:	9e04      	ldr	r6, [sp, #16]
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00c      	beq.n	800cdd2 <_printf_i+0x10a>
 800cdb8:	9e04      	ldr	r6, [sp, #16]
 800cdba:	0028      	movs	r0, r5
 800cdbc:	0039      	movs	r1, r7
 800cdbe:	f7f3 fa45 	bl	800024c <__aeabi_uidivmod>
 800cdc2:	9b03      	ldr	r3, [sp, #12]
 800cdc4:	3e01      	subs	r6, #1
 800cdc6:	5c5b      	ldrb	r3, [r3, r1]
 800cdc8:	7033      	strb	r3, [r6, #0]
 800cdca:	002b      	movs	r3, r5
 800cdcc:	0005      	movs	r5, r0
 800cdce:	429f      	cmp	r7, r3
 800cdd0:	d9f3      	bls.n	800cdba <_printf_i+0xf2>
 800cdd2:	2f08      	cmp	r7, #8
 800cdd4:	d109      	bne.n	800cdea <_printf_i+0x122>
 800cdd6:	6823      	ldr	r3, [r4, #0]
 800cdd8:	07db      	lsls	r3, r3, #31
 800cdda:	d506      	bpl.n	800cdea <_printf_i+0x122>
 800cddc:	6863      	ldr	r3, [r4, #4]
 800cdde:	6922      	ldr	r2, [r4, #16]
 800cde0:	4293      	cmp	r3, r2
 800cde2:	dc02      	bgt.n	800cdea <_printf_i+0x122>
 800cde4:	2330      	movs	r3, #48	; 0x30
 800cde6:	3e01      	subs	r6, #1
 800cde8:	7033      	strb	r3, [r6, #0]
 800cdea:	9b04      	ldr	r3, [sp, #16]
 800cdec:	1b9b      	subs	r3, r3, r6
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	9b07      	ldr	r3, [sp, #28]
 800cdf2:	0021      	movs	r1, r4
 800cdf4:	9300      	str	r3, [sp, #0]
 800cdf6:	9805      	ldr	r0, [sp, #20]
 800cdf8:	9b06      	ldr	r3, [sp, #24]
 800cdfa:	aa09      	add	r2, sp, #36	; 0x24
 800cdfc:	f7ff fef4 	bl	800cbe8 <_printf_common>
 800ce00:	1c43      	adds	r3, r0, #1
 800ce02:	d14c      	bne.n	800ce9e <_printf_i+0x1d6>
 800ce04:	2001      	movs	r0, #1
 800ce06:	4240      	negs	r0, r0
 800ce08:	b00b      	add	sp, #44	; 0x2c
 800ce0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce0c:	3145      	adds	r1, #69	; 0x45
 800ce0e:	700a      	strb	r2, [r1, #0]
 800ce10:	4a34      	ldr	r2, [pc, #208]	; (800cee4 <_printf_i+0x21c>)
 800ce12:	9203      	str	r2, [sp, #12]
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	6821      	ldr	r1, [r4, #0]
 800ce18:	ca20      	ldmia	r2!, {r5}
 800ce1a:	601a      	str	r2, [r3, #0]
 800ce1c:	0608      	lsls	r0, r1, #24
 800ce1e:	d516      	bpl.n	800ce4e <_printf_i+0x186>
 800ce20:	07cb      	lsls	r3, r1, #31
 800ce22:	d502      	bpl.n	800ce2a <_printf_i+0x162>
 800ce24:	2320      	movs	r3, #32
 800ce26:	4319      	orrs	r1, r3
 800ce28:	6021      	str	r1, [r4, #0]
 800ce2a:	2710      	movs	r7, #16
 800ce2c:	2d00      	cmp	r5, #0
 800ce2e:	d1b2      	bne.n	800cd96 <_printf_i+0xce>
 800ce30:	2320      	movs	r3, #32
 800ce32:	6822      	ldr	r2, [r4, #0]
 800ce34:	439a      	bics	r2, r3
 800ce36:	6022      	str	r2, [r4, #0]
 800ce38:	e7ad      	b.n	800cd96 <_printf_i+0xce>
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	6809      	ldr	r1, [r1, #0]
 800ce3e:	430a      	orrs	r2, r1
 800ce40:	6022      	str	r2, [r4, #0]
 800ce42:	0022      	movs	r2, r4
 800ce44:	2178      	movs	r1, #120	; 0x78
 800ce46:	3245      	adds	r2, #69	; 0x45
 800ce48:	7011      	strb	r1, [r2, #0]
 800ce4a:	4a27      	ldr	r2, [pc, #156]	; (800cee8 <_printf_i+0x220>)
 800ce4c:	e7e1      	b.n	800ce12 <_printf_i+0x14a>
 800ce4e:	0648      	lsls	r0, r1, #25
 800ce50:	d5e6      	bpl.n	800ce20 <_printf_i+0x158>
 800ce52:	b2ad      	uxth	r5, r5
 800ce54:	e7e4      	b.n	800ce20 <_printf_i+0x158>
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	680d      	ldr	r5, [r1, #0]
 800ce5a:	1d10      	adds	r0, r2, #4
 800ce5c:	6949      	ldr	r1, [r1, #20]
 800ce5e:	6018      	str	r0, [r3, #0]
 800ce60:	6813      	ldr	r3, [r2, #0]
 800ce62:	062e      	lsls	r6, r5, #24
 800ce64:	d501      	bpl.n	800ce6a <_printf_i+0x1a2>
 800ce66:	6019      	str	r1, [r3, #0]
 800ce68:	e002      	b.n	800ce70 <_printf_i+0x1a8>
 800ce6a:	066d      	lsls	r5, r5, #25
 800ce6c:	d5fb      	bpl.n	800ce66 <_printf_i+0x19e>
 800ce6e:	8019      	strh	r1, [r3, #0]
 800ce70:	2300      	movs	r3, #0
 800ce72:	9e04      	ldr	r6, [sp, #16]
 800ce74:	6123      	str	r3, [r4, #16]
 800ce76:	e7bb      	b.n	800cdf0 <_printf_i+0x128>
 800ce78:	681a      	ldr	r2, [r3, #0]
 800ce7a:	1d11      	adds	r1, r2, #4
 800ce7c:	6019      	str	r1, [r3, #0]
 800ce7e:	6816      	ldr	r6, [r2, #0]
 800ce80:	2100      	movs	r1, #0
 800ce82:	0030      	movs	r0, r6
 800ce84:	6862      	ldr	r2, [r4, #4]
 800ce86:	f000 fdf7 	bl	800da78 <memchr>
 800ce8a:	2800      	cmp	r0, #0
 800ce8c:	d001      	beq.n	800ce92 <_printf_i+0x1ca>
 800ce8e:	1b80      	subs	r0, r0, r6
 800ce90:	6060      	str	r0, [r4, #4]
 800ce92:	6863      	ldr	r3, [r4, #4]
 800ce94:	6123      	str	r3, [r4, #16]
 800ce96:	2300      	movs	r3, #0
 800ce98:	9a04      	ldr	r2, [sp, #16]
 800ce9a:	7013      	strb	r3, [r2, #0]
 800ce9c:	e7a8      	b.n	800cdf0 <_printf_i+0x128>
 800ce9e:	6923      	ldr	r3, [r4, #16]
 800cea0:	0032      	movs	r2, r6
 800cea2:	9906      	ldr	r1, [sp, #24]
 800cea4:	9805      	ldr	r0, [sp, #20]
 800cea6:	9d07      	ldr	r5, [sp, #28]
 800cea8:	47a8      	blx	r5
 800ceaa:	1c43      	adds	r3, r0, #1
 800ceac:	d0aa      	beq.n	800ce04 <_printf_i+0x13c>
 800ceae:	6823      	ldr	r3, [r4, #0]
 800ceb0:	079b      	lsls	r3, r3, #30
 800ceb2:	d415      	bmi.n	800cee0 <_printf_i+0x218>
 800ceb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb6:	68e0      	ldr	r0, [r4, #12]
 800ceb8:	4298      	cmp	r0, r3
 800ceba:	daa5      	bge.n	800ce08 <_printf_i+0x140>
 800cebc:	0018      	movs	r0, r3
 800cebe:	e7a3      	b.n	800ce08 <_printf_i+0x140>
 800cec0:	0022      	movs	r2, r4
 800cec2:	2301      	movs	r3, #1
 800cec4:	9906      	ldr	r1, [sp, #24]
 800cec6:	9805      	ldr	r0, [sp, #20]
 800cec8:	9e07      	ldr	r6, [sp, #28]
 800ceca:	3219      	adds	r2, #25
 800cecc:	47b0      	blx	r6
 800cece:	1c43      	adds	r3, r0, #1
 800ced0:	d098      	beq.n	800ce04 <_printf_i+0x13c>
 800ced2:	3501      	adds	r5, #1
 800ced4:	68e3      	ldr	r3, [r4, #12]
 800ced6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ced8:	1a9b      	subs	r3, r3, r2
 800ceda:	42ab      	cmp	r3, r5
 800cedc:	dcf0      	bgt.n	800cec0 <_printf_i+0x1f8>
 800cede:	e7e9      	b.n	800ceb4 <_printf_i+0x1ec>
 800cee0:	2500      	movs	r5, #0
 800cee2:	e7f7      	b.n	800ced4 <_printf_i+0x20c>
 800cee4:	0800efb9 	.word	0x0800efb9
 800cee8:	0800efca 	.word	0x0800efca

0800ceec <iprintf>:
 800ceec:	b40f      	push	{r0, r1, r2, r3}
 800ceee:	4b0b      	ldr	r3, [pc, #44]	; (800cf1c <iprintf+0x30>)
 800cef0:	b513      	push	{r0, r1, r4, lr}
 800cef2:	681c      	ldr	r4, [r3, #0]
 800cef4:	2c00      	cmp	r4, #0
 800cef6:	d005      	beq.n	800cf04 <iprintf+0x18>
 800cef8:	69a3      	ldr	r3, [r4, #24]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d102      	bne.n	800cf04 <iprintf+0x18>
 800cefe:	0020      	movs	r0, r4
 800cf00:	f000 fc2e 	bl	800d760 <__sinit>
 800cf04:	ab05      	add	r3, sp, #20
 800cf06:	0020      	movs	r0, r4
 800cf08:	9a04      	ldr	r2, [sp, #16]
 800cf0a:	68a1      	ldr	r1, [r4, #8]
 800cf0c:	9301      	str	r3, [sp, #4]
 800cf0e:	f7ff fd31 	bl	800c974 <_vfiprintf_r>
 800cf12:	bc16      	pop	{r1, r2, r4}
 800cf14:	bc08      	pop	{r3}
 800cf16:	b004      	add	sp, #16
 800cf18:	4718      	bx	r3
 800cf1a:	46c0      	nop			; (mov r8, r8)
 800cf1c:	200001d4 	.word	0x200001d4

0800cf20 <putchar>:
 800cf20:	4b08      	ldr	r3, [pc, #32]	; (800cf44 <putchar+0x24>)
 800cf22:	b570      	push	{r4, r5, r6, lr}
 800cf24:	681c      	ldr	r4, [r3, #0]
 800cf26:	0005      	movs	r5, r0
 800cf28:	2c00      	cmp	r4, #0
 800cf2a:	d005      	beq.n	800cf38 <putchar+0x18>
 800cf2c:	69a3      	ldr	r3, [r4, #24]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d102      	bne.n	800cf38 <putchar+0x18>
 800cf32:	0020      	movs	r0, r4
 800cf34:	f000 fc14 	bl	800d760 <__sinit>
 800cf38:	0029      	movs	r1, r5
 800cf3a:	0020      	movs	r0, r4
 800cf3c:	68a2      	ldr	r2, [r4, #8]
 800cf3e:	f001 f9fb 	bl	800e338 <_putc_r>
 800cf42:	bd70      	pop	{r4, r5, r6, pc}
 800cf44:	200001d4 	.word	0x200001d4

0800cf48 <_puts_r>:
 800cf48:	b570      	push	{r4, r5, r6, lr}
 800cf4a:	0005      	movs	r5, r0
 800cf4c:	000e      	movs	r6, r1
 800cf4e:	2800      	cmp	r0, #0
 800cf50:	d004      	beq.n	800cf5c <_puts_r+0x14>
 800cf52:	6983      	ldr	r3, [r0, #24]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <_puts_r+0x14>
 800cf58:	f000 fc02 	bl	800d760 <__sinit>
 800cf5c:	69ab      	ldr	r3, [r5, #24]
 800cf5e:	68ac      	ldr	r4, [r5, #8]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d102      	bne.n	800cf6a <_puts_r+0x22>
 800cf64:	0028      	movs	r0, r5
 800cf66:	f000 fbfb 	bl	800d760 <__sinit>
 800cf6a:	4b2d      	ldr	r3, [pc, #180]	; (800d020 <_puts_r+0xd8>)
 800cf6c:	429c      	cmp	r4, r3
 800cf6e:	d122      	bne.n	800cfb6 <_puts_r+0x6e>
 800cf70:	686c      	ldr	r4, [r5, #4]
 800cf72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cf74:	07db      	lsls	r3, r3, #31
 800cf76:	d405      	bmi.n	800cf84 <_puts_r+0x3c>
 800cf78:	89a3      	ldrh	r3, [r4, #12]
 800cf7a:	059b      	lsls	r3, r3, #22
 800cf7c:	d402      	bmi.n	800cf84 <_puts_r+0x3c>
 800cf7e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cf80:	f000 fced 	bl	800d95e <__retarget_lock_acquire_recursive>
 800cf84:	89a3      	ldrh	r3, [r4, #12]
 800cf86:	071b      	lsls	r3, r3, #28
 800cf88:	d502      	bpl.n	800cf90 <_puts_r+0x48>
 800cf8a:	6923      	ldr	r3, [r4, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d129      	bne.n	800cfe4 <_puts_r+0x9c>
 800cf90:	0021      	movs	r1, r4
 800cf92:	0028      	movs	r0, r5
 800cf94:	f000 fa16 	bl	800d3c4 <__swsetup_r>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d023      	beq.n	800cfe4 <_puts_r+0x9c>
 800cf9c:	2501      	movs	r5, #1
 800cf9e:	426d      	negs	r5, r5
 800cfa0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cfa2:	07db      	lsls	r3, r3, #31
 800cfa4:	d405      	bmi.n	800cfb2 <_puts_r+0x6a>
 800cfa6:	89a3      	ldrh	r3, [r4, #12]
 800cfa8:	059b      	lsls	r3, r3, #22
 800cfaa:	d402      	bmi.n	800cfb2 <_puts_r+0x6a>
 800cfac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cfae:	f000 fcd7 	bl	800d960 <__retarget_lock_release_recursive>
 800cfb2:	0028      	movs	r0, r5
 800cfb4:	bd70      	pop	{r4, r5, r6, pc}
 800cfb6:	4b1b      	ldr	r3, [pc, #108]	; (800d024 <_puts_r+0xdc>)
 800cfb8:	429c      	cmp	r4, r3
 800cfba:	d101      	bne.n	800cfc0 <_puts_r+0x78>
 800cfbc:	68ac      	ldr	r4, [r5, #8]
 800cfbe:	e7d8      	b.n	800cf72 <_puts_r+0x2a>
 800cfc0:	4b19      	ldr	r3, [pc, #100]	; (800d028 <_puts_r+0xe0>)
 800cfc2:	429c      	cmp	r4, r3
 800cfc4:	d1d5      	bne.n	800cf72 <_puts_r+0x2a>
 800cfc6:	68ec      	ldr	r4, [r5, #12]
 800cfc8:	e7d3      	b.n	800cf72 <_puts_r+0x2a>
 800cfca:	3601      	adds	r6, #1
 800cfcc:	60a3      	str	r3, [r4, #8]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	da04      	bge.n	800cfdc <_puts_r+0x94>
 800cfd2:	69a2      	ldr	r2, [r4, #24]
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	dc16      	bgt.n	800d006 <_puts_r+0xbe>
 800cfd8:	290a      	cmp	r1, #10
 800cfda:	d014      	beq.n	800d006 <_puts_r+0xbe>
 800cfdc:	6823      	ldr	r3, [r4, #0]
 800cfde:	1c5a      	adds	r2, r3, #1
 800cfe0:	6022      	str	r2, [r4, #0]
 800cfe2:	7019      	strb	r1, [r3, #0]
 800cfe4:	68a3      	ldr	r3, [r4, #8]
 800cfe6:	7831      	ldrb	r1, [r6, #0]
 800cfe8:	3b01      	subs	r3, #1
 800cfea:	2900      	cmp	r1, #0
 800cfec:	d1ed      	bne.n	800cfca <_puts_r+0x82>
 800cfee:	60a3      	str	r3, [r4, #8]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	da0f      	bge.n	800d014 <_puts_r+0xcc>
 800cff4:	0028      	movs	r0, r5
 800cff6:	0022      	movs	r2, r4
 800cff8:	310a      	adds	r1, #10
 800cffa:	f000 f979 	bl	800d2f0 <__swbuf_r>
 800cffe:	250a      	movs	r5, #10
 800d000:	1c43      	adds	r3, r0, #1
 800d002:	d1cd      	bne.n	800cfa0 <_puts_r+0x58>
 800d004:	e7ca      	b.n	800cf9c <_puts_r+0x54>
 800d006:	0022      	movs	r2, r4
 800d008:	0028      	movs	r0, r5
 800d00a:	f000 f971 	bl	800d2f0 <__swbuf_r>
 800d00e:	1c43      	adds	r3, r0, #1
 800d010:	d1e8      	bne.n	800cfe4 <_puts_r+0x9c>
 800d012:	e7c3      	b.n	800cf9c <_puts_r+0x54>
 800d014:	250a      	movs	r5, #10
 800d016:	6823      	ldr	r3, [r4, #0]
 800d018:	1c5a      	adds	r2, r3, #1
 800d01a:	6022      	str	r2, [r4, #0]
 800d01c:	701d      	strb	r5, [r3, #0]
 800d01e:	e7bf      	b.n	800cfa0 <_puts_r+0x58>
 800d020:	0800effc 	.word	0x0800effc
 800d024:	0800f01c 	.word	0x0800f01c
 800d028:	0800efdc 	.word	0x0800efdc

0800d02c <puts>:
 800d02c:	b510      	push	{r4, lr}
 800d02e:	4b03      	ldr	r3, [pc, #12]	; (800d03c <puts+0x10>)
 800d030:	0001      	movs	r1, r0
 800d032:	6818      	ldr	r0, [r3, #0]
 800d034:	f7ff ff88 	bl	800cf48 <_puts_r>
 800d038:	bd10      	pop	{r4, pc}
 800d03a:	46c0      	nop			; (mov r8, r8)
 800d03c:	200001d4 	.word	0x200001d4

0800d040 <setvbuf>:
 800d040:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d042:	001d      	movs	r5, r3
 800d044:	4b5d      	ldr	r3, [pc, #372]	; (800d1bc <setvbuf+0x17c>)
 800d046:	b085      	sub	sp, #20
 800d048:	681e      	ldr	r6, [r3, #0]
 800d04a:	0004      	movs	r4, r0
 800d04c:	000f      	movs	r7, r1
 800d04e:	9200      	str	r2, [sp, #0]
 800d050:	2e00      	cmp	r6, #0
 800d052:	d005      	beq.n	800d060 <setvbuf+0x20>
 800d054:	69b3      	ldr	r3, [r6, #24]
 800d056:	2b00      	cmp	r3, #0
 800d058:	d102      	bne.n	800d060 <setvbuf+0x20>
 800d05a:	0030      	movs	r0, r6
 800d05c:	f000 fb80 	bl	800d760 <__sinit>
 800d060:	4b57      	ldr	r3, [pc, #348]	; (800d1c0 <setvbuf+0x180>)
 800d062:	429c      	cmp	r4, r3
 800d064:	d161      	bne.n	800d12a <setvbuf+0xea>
 800d066:	6874      	ldr	r4, [r6, #4]
 800d068:	9b00      	ldr	r3, [sp, #0]
 800d06a:	2b02      	cmp	r3, #2
 800d06c:	d005      	beq.n	800d07a <setvbuf+0x3a>
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d900      	bls.n	800d074 <setvbuf+0x34>
 800d072:	e09d      	b.n	800d1b0 <setvbuf+0x170>
 800d074:	2d00      	cmp	r5, #0
 800d076:	da00      	bge.n	800d07a <setvbuf+0x3a>
 800d078:	e09a      	b.n	800d1b0 <setvbuf+0x170>
 800d07a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d07c:	07db      	lsls	r3, r3, #31
 800d07e:	d405      	bmi.n	800d08c <setvbuf+0x4c>
 800d080:	89a3      	ldrh	r3, [r4, #12]
 800d082:	059b      	lsls	r3, r3, #22
 800d084:	d402      	bmi.n	800d08c <setvbuf+0x4c>
 800d086:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d088:	f000 fc69 	bl	800d95e <__retarget_lock_acquire_recursive>
 800d08c:	0021      	movs	r1, r4
 800d08e:	0030      	movs	r0, r6
 800d090:	f000 faae 	bl	800d5f0 <_fflush_r>
 800d094:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d096:	2900      	cmp	r1, #0
 800d098:	d008      	beq.n	800d0ac <setvbuf+0x6c>
 800d09a:	0023      	movs	r3, r4
 800d09c:	3344      	adds	r3, #68	; 0x44
 800d09e:	4299      	cmp	r1, r3
 800d0a0:	d002      	beq.n	800d0a8 <setvbuf+0x68>
 800d0a2:	0030      	movs	r0, r6
 800d0a4:	f000 fcfc 	bl	800daa0 <_free_r>
 800d0a8:	2300      	movs	r3, #0
 800d0aa:	6363      	str	r3, [r4, #52]	; 0x34
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	61a3      	str	r3, [r4, #24]
 800d0b0:	6063      	str	r3, [r4, #4]
 800d0b2:	89a3      	ldrh	r3, [r4, #12]
 800d0b4:	061b      	lsls	r3, r3, #24
 800d0b6:	d503      	bpl.n	800d0c0 <setvbuf+0x80>
 800d0b8:	0030      	movs	r0, r6
 800d0ba:	6921      	ldr	r1, [r4, #16]
 800d0bc:	f000 fcf0 	bl	800daa0 <_free_r>
 800d0c0:	89a3      	ldrh	r3, [r4, #12]
 800d0c2:	4a40      	ldr	r2, [pc, #256]	; (800d1c4 <setvbuf+0x184>)
 800d0c4:	4013      	ands	r3, r2
 800d0c6:	81a3      	strh	r3, [r4, #12]
 800d0c8:	9b00      	ldr	r3, [sp, #0]
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d100      	bne.n	800d0d0 <setvbuf+0x90>
 800d0ce:	e069      	b.n	800d1a4 <setvbuf+0x164>
 800d0d0:	ab03      	add	r3, sp, #12
 800d0d2:	0021      	movs	r1, r4
 800d0d4:	0030      	movs	r0, r6
 800d0d6:	aa02      	add	r2, sp, #8
 800d0d8:	f000 fc58 	bl	800d98c <__swhatbuf_r>
 800d0dc:	89a3      	ldrh	r3, [r4, #12]
 800d0de:	4303      	orrs	r3, r0
 800d0e0:	81a3      	strh	r3, [r4, #12]
 800d0e2:	2d00      	cmp	r5, #0
 800d0e4:	d12b      	bne.n	800d13e <setvbuf+0xfe>
 800d0e6:	9d02      	ldr	r5, [sp, #8]
 800d0e8:	0028      	movs	r0, r5
 800d0ea:	f000 fcbb 	bl	800da64 <malloc>
 800d0ee:	1e07      	subs	r7, r0, #0
 800d0f0:	d153      	bne.n	800d19a <setvbuf+0x15a>
 800d0f2:	9b02      	ldr	r3, [sp, #8]
 800d0f4:	9301      	str	r3, [sp, #4]
 800d0f6:	42ab      	cmp	r3, r5
 800d0f8:	d149      	bne.n	800d18e <setvbuf+0x14e>
 800d0fa:	2501      	movs	r5, #1
 800d0fc:	426d      	negs	r5, r5
 800d0fe:	2302      	movs	r3, #2
 800d100:	89a2      	ldrh	r2, [r4, #12]
 800d102:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d104:	4313      	orrs	r3, r2
 800d106:	2200      	movs	r2, #0
 800d108:	60a2      	str	r2, [r4, #8]
 800d10a:	0022      	movs	r2, r4
 800d10c:	3247      	adds	r2, #71	; 0x47
 800d10e:	6022      	str	r2, [r4, #0]
 800d110:	6122      	str	r2, [r4, #16]
 800d112:	2201      	movs	r2, #1
 800d114:	b21b      	sxth	r3, r3
 800d116:	81a3      	strh	r3, [r4, #12]
 800d118:	6162      	str	r2, [r4, #20]
 800d11a:	4211      	tst	r1, r2
 800d11c:	d134      	bne.n	800d188 <setvbuf+0x148>
 800d11e:	059b      	lsls	r3, r3, #22
 800d120:	d432      	bmi.n	800d188 <setvbuf+0x148>
 800d122:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d124:	f000 fc1c 	bl	800d960 <__retarget_lock_release_recursive>
 800d128:	e02e      	b.n	800d188 <setvbuf+0x148>
 800d12a:	4b27      	ldr	r3, [pc, #156]	; (800d1c8 <setvbuf+0x188>)
 800d12c:	429c      	cmp	r4, r3
 800d12e:	d101      	bne.n	800d134 <setvbuf+0xf4>
 800d130:	68b4      	ldr	r4, [r6, #8]
 800d132:	e799      	b.n	800d068 <setvbuf+0x28>
 800d134:	4b25      	ldr	r3, [pc, #148]	; (800d1cc <setvbuf+0x18c>)
 800d136:	429c      	cmp	r4, r3
 800d138:	d196      	bne.n	800d068 <setvbuf+0x28>
 800d13a:	68f4      	ldr	r4, [r6, #12]
 800d13c:	e794      	b.n	800d068 <setvbuf+0x28>
 800d13e:	2f00      	cmp	r7, #0
 800d140:	d0d2      	beq.n	800d0e8 <setvbuf+0xa8>
 800d142:	69b3      	ldr	r3, [r6, #24]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d102      	bne.n	800d14e <setvbuf+0x10e>
 800d148:	0030      	movs	r0, r6
 800d14a:	f000 fb09 	bl	800d760 <__sinit>
 800d14e:	9b00      	ldr	r3, [sp, #0]
 800d150:	2b01      	cmp	r3, #1
 800d152:	d102      	bne.n	800d15a <setvbuf+0x11a>
 800d154:	89a2      	ldrh	r2, [r4, #12]
 800d156:	4313      	orrs	r3, r2
 800d158:	81a3      	strh	r3, [r4, #12]
 800d15a:	89a2      	ldrh	r2, [r4, #12]
 800d15c:	2308      	movs	r3, #8
 800d15e:	0011      	movs	r1, r2
 800d160:	6027      	str	r7, [r4, #0]
 800d162:	6127      	str	r7, [r4, #16]
 800d164:	6165      	str	r5, [r4, #20]
 800d166:	4019      	ands	r1, r3
 800d168:	421a      	tst	r2, r3
 800d16a:	d01f      	beq.n	800d1ac <setvbuf+0x16c>
 800d16c:	07d3      	lsls	r3, r2, #31
 800d16e:	d51b      	bpl.n	800d1a8 <setvbuf+0x168>
 800d170:	2300      	movs	r3, #0
 800d172:	426d      	negs	r5, r5
 800d174:	60a3      	str	r3, [r4, #8]
 800d176:	61a5      	str	r5, [r4, #24]
 800d178:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800d17a:	2301      	movs	r3, #1
 800d17c:	000d      	movs	r5, r1
 800d17e:	401d      	ands	r5, r3
 800d180:	4219      	tst	r1, r3
 800d182:	d118      	bne.n	800d1b6 <setvbuf+0x176>
 800d184:	0593      	lsls	r3, r2, #22
 800d186:	d5cc      	bpl.n	800d122 <setvbuf+0xe2>
 800d188:	0028      	movs	r0, r5
 800d18a:	b005      	add	sp, #20
 800d18c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d18e:	9801      	ldr	r0, [sp, #4]
 800d190:	f000 fc68 	bl	800da64 <malloc>
 800d194:	9d01      	ldr	r5, [sp, #4]
 800d196:	1e07      	subs	r7, r0, #0
 800d198:	d0af      	beq.n	800d0fa <setvbuf+0xba>
 800d19a:	2380      	movs	r3, #128	; 0x80
 800d19c:	89a2      	ldrh	r2, [r4, #12]
 800d19e:	4313      	orrs	r3, r2
 800d1a0:	81a3      	strh	r3, [r4, #12]
 800d1a2:	e7ce      	b.n	800d142 <setvbuf+0x102>
 800d1a4:	2500      	movs	r5, #0
 800d1a6:	e7aa      	b.n	800d0fe <setvbuf+0xbe>
 800d1a8:	60a5      	str	r5, [r4, #8]
 800d1aa:	e7e5      	b.n	800d178 <setvbuf+0x138>
 800d1ac:	60a1      	str	r1, [r4, #8]
 800d1ae:	e7e3      	b.n	800d178 <setvbuf+0x138>
 800d1b0:	2501      	movs	r5, #1
 800d1b2:	426d      	negs	r5, r5
 800d1b4:	e7e8      	b.n	800d188 <setvbuf+0x148>
 800d1b6:	2500      	movs	r5, #0
 800d1b8:	e7e6      	b.n	800d188 <setvbuf+0x148>
 800d1ba:	46c0      	nop			; (mov r8, r8)
 800d1bc:	200001d4 	.word	0x200001d4
 800d1c0:	0800effc 	.word	0x0800effc
 800d1c4:	fffff35c 	.word	0xfffff35c
 800d1c8:	0800f01c 	.word	0x0800f01c
 800d1cc:	0800efdc 	.word	0x0800efdc

0800d1d0 <siscanf>:
 800d1d0:	b40e      	push	{r1, r2, r3}
 800d1d2:	b530      	push	{r4, r5, lr}
 800d1d4:	2381      	movs	r3, #129	; 0x81
 800d1d6:	b09c      	sub	sp, #112	; 0x70
 800d1d8:	466a      	mov	r2, sp
 800d1da:	ac1f      	add	r4, sp, #124	; 0x7c
 800d1dc:	009b      	lsls	r3, r3, #2
 800d1de:	cc20      	ldmia	r4!, {r5}
 800d1e0:	8293      	strh	r3, [r2, #20]
 800d1e2:	9002      	str	r0, [sp, #8]
 800d1e4:	9006      	str	r0, [sp, #24]
 800d1e6:	f7f2 ff99 	bl	800011c <strlen>
 800d1ea:	4b0b      	ldr	r3, [pc, #44]	; (800d218 <siscanf+0x48>)
 800d1ec:	466a      	mov	r2, sp
 800d1ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	9003      	str	r0, [sp, #12]
 800d1f4:	9007      	str	r0, [sp, #28]
 800d1f6:	4809      	ldr	r0, [pc, #36]	; (800d21c <siscanf+0x4c>)
 800d1f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1fa:	9314      	str	r3, [sp, #80]	; 0x50
 800d1fc:	3b01      	subs	r3, #1
 800d1fe:	82d3      	strh	r3, [r2, #22]
 800d200:	a902      	add	r1, sp, #8
 800d202:	0023      	movs	r3, r4
 800d204:	002a      	movs	r2, r5
 800d206:	6800      	ldr	r0, [r0, #0]
 800d208:	9401      	str	r4, [sp, #4]
 800d20a:	f000 fdb5 	bl	800dd78 <__ssvfiscanf_r>
 800d20e:	b01c      	add	sp, #112	; 0x70
 800d210:	bc30      	pop	{r4, r5}
 800d212:	bc08      	pop	{r3}
 800d214:	b003      	add	sp, #12
 800d216:	4718      	bx	r3
 800d218:	0800d249 	.word	0x0800d249
 800d21c:	200001d4 	.word	0x200001d4

0800d220 <__sread>:
 800d220:	b570      	push	{r4, r5, r6, lr}
 800d222:	000c      	movs	r4, r1
 800d224:	250e      	movs	r5, #14
 800d226:	5f49      	ldrsh	r1, [r1, r5]
 800d228:	f001 f8d0 	bl	800e3cc <_read_r>
 800d22c:	2800      	cmp	r0, #0
 800d22e:	db03      	blt.n	800d238 <__sread+0x18>
 800d230:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800d232:	181b      	adds	r3, r3, r0
 800d234:	6563      	str	r3, [r4, #84]	; 0x54
 800d236:	bd70      	pop	{r4, r5, r6, pc}
 800d238:	89a3      	ldrh	r3, [r4, #12]
 800d23a:	4a02      	ldr	r2, [pc, #8]	; (800d244 <__sread+0x24>)
 800d23c:	4013      	ands	r3, r2
 800d23e:	81a3      	strh	r3, [r4, #12]
 800d240:	e7f9      	b.n	800d236 <__sread+0x16>
 800d242:	46c0      	nop			; (mov r8, r8)
 800d244:	ffffefff 	.word	0xffffefff

0800d248 <__seofread>:
 800d248:	2000      	movs	r0, #0
 800d24a:	4770      	bx	lr

0800d24c <__swrite>:
 800d24c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d24e:	001f      	movs	r7, r3
 800d250:	898b      	ldrh	r3, [r1, #12]
 800d252:	0005      	movs	r5, r0
 800d254:	000c      	movs	r4, r1
 800d256:	0016      	movs	r6, r2
 800d258:	05db      	lsls	r3, r3, #23
 800d25a:	d505      	bpl.n	800d268 <__swrite+0x1c>
 800d25c:	230e      	movs	r3, #14
 800d25e:	5ec9      	ldrsh	r1, [r1, r3]
 800d260:	2200      	movs	r2, #0
 800d262:	2302      	movs	r3, #2
 800d264:	f000 fb7e 	bl	800d964 <_lseek_r>
 800d268:	89a3      	ldrh	r3, [r4, #12]
 800d26a:	4a05      	ldr	r2, [pc, #20]	; (800d280 <__swrite+0x34>)
 800d26c:	0028      	movs	r0, r5
 800d26e:	4013      	ands	r3, r2
 800d270:	81a3      	strh	r3, [r4, #12]
 800d272:	0032      	movs	r2, r6
 800d274:	230e      	movs	r3, #14
 800d276:	5ee1      	ldrsh	r1, [r4, r3]
 800d278:	003b      	movs	r3, r7
 800d27a:	f000 f88f 	bl	800d39c <_write_r>
 800d27e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d280:	ffffefff 	.word	0xffffefff

0800d284 <__sseek>:
 800d284:	b570      	push	{r4, r5, r6, lr}
 800d286:	000c      	movs	r4, r1
 800d288:	250e      	movs	r5, #14
 800d28a:	5f49      	ldrsh	r1, [r1, r5]
 800d28c:	f000 fb6a 	bl	800d964 <_lseek_r>
 800d290:	89a3      	ldrh	r3, [r4, #12]
 800d292:	1c42      	adds	r2, r0, #1
 800d294:	d103      	bne.n	800d29e <__sseek+0x1a>
 800d296:	4a05      	ldr	r2, [pc, #20]	; (800d2ac <__sseek+0x28>)
 800d298:	4013      	ands	r3, r2
 800d29a:	81a3      	strh	r3, [r4, #12]
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
 800d29e:	2280      	movs	r2, #128	; 0x80
 800d2a0:	0152      	lsls	r2, r2, #5
 800d2a2:	4313      	orrs	r3, r2
 800d2a4:	81a3      	strh	r3, [r4, #12]
 800d2a6:	6560      	str	r0, [r4, #84]	; 0x54
 800d2a8:	e7f8      	b.n	800d29c <__sseek+0x18>
 800d2aa:	46c0      	nop			; (mov r8, r8)
 800d2ac:	ffffefff 	.word	0xffffefff

0800d2b0 <__sclose>:
 800d2b0:	b510      	push	{r4, lr}
 800d2b2:	230e      	movs	r3, #14
 800d2b4:	5ec9      	ldrsh	r1, [r1, r3]
 800d2b6:	f000 f8fd 	bl	800d4b4 <_close_r>
 800d2ba:	bd10      	pop	{r4, pc}

0800d2bc <strcpy>:
 800d2bc:	0003      	movs	r3, r0
 800d2be:	780a      	ldrb	r2, [r1, #0]
 800d2c0:	3101      	adds	r1, #1
 800d2c2:	701a      	strb	r2, [r3, #0]
 800d2c4:	3301      	adds	r3, #1
 800d2c6:	2a00      	cmp	r2, #0
 800d2c8:	d1f9      	bne.n	800d2be <strcpy+0x2>
 800d2ca:	4770      	bx	lr

0800d2cc <strncmp>:
 800d2cc:	b530      	push	{r4, r5, lr}
 800d2ce:	0005      	movs	r5, r0
 800d2d0:	1e10      	subs	r0, r2, #0
 800d2d2:	d008      	beq.n	800d2e6 <strncmp+0x1a>
 800d2d4:	2400      	movs	r4, #0
 800d2d6:	3a01      	subs	r2, #1
 800d2d8:	5d2b      	ldrb	r3, [r5, r4]
 800d2da:	5d08      	ldrb	r0, [r1, r4]
 800d2dc:	4283      	cmp	r3, r0
 800d2de:	d101      	bne.n	800d2e4 <strncmp+0x18>
 800d2e0:	4294      	cmp	r4, r2
 800d2e2:	d101      	bne.n	800d2e8 <strncmp+0x1c>
 800d2e4:	1a18      	subs	r0, r3, r0
 800d2e6:	bd30      	pop	{r4, r5, pc}
 800d2e8:	3401      	adds	r4, #1
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1f4      	bne.n	800d2d8 <strncmp+0xc>
 800d2ee:	e7f9      	b.n	800d2e4 <strncmp+0x18>

0800d2f0 <__swbuf_r>:
 800d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2f2:	0005      	movs	r5, r0
 800d2f4:	000e      	movs	r6, r1
 800d2f6:	0014      	movs	r4, r2
 800d2f8:	2800      	cmp	r0, #0
 800d2fa:	d004      	beq.n	800d306 <__swbuf_r+0x16>
 800d2fc:	6983      	ldr	r3, [r0, #24]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d101      	bne.n	800d306 <__swbuf_r+0x16>
 800d302:	f000 fa2d 	bl	800d760 <__sinit>
 800d306:	4b22      	ldr	r3, [pc, #136]	; (800d390 <__swbuf_r+0xa0>)
 800d308:	429c      	cmp	r4, r3
 800d30a:	d12e      	bne.n	800d36a <__swbuf_r+0x7a>
 800d30c:	686c      	ldr	r4, [r5, #4]
 800d30e:	69a3      	ldr	r3, [r4, #24]
 800d310:	60a3      	str	r3, [r4, #8]
 800d312:	89a3      	ldrh	r3, [r4, #12]
 800d314:	071b      	lsls	r3, r3, #28
 800d316:	d532      	bpl.n	800d37e <__swbuf_r+0x8e>
 800d318:	6923      	ldr	r3, [r4, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d02f      	beq.n	800d37e <__swbuf_r+0x8e>
 800d31e:	6823      	ldr	r3, [r4, #0]
 800d320:	6922      	ldr	r2, [r4, #16]
 800d322:	b2f7      	uxtb	r7, r6
 800d324:	1a98      	subs	r0, r3, r2
 800d326:	6963      	ldr	r3, [r4, #20]
 800d328:	b2f6      	uxtb	r6, r6
 800d32a:	4283      	cmp	r3, r0
 800d32c:	dc05      	bgt.n	800d33a <__swbuf_r+0x4a>
 800d32e:	0021      	movs	r1, r4
 800d330:	0028      	movs	r0, r5
 800d332:	f000 f95d 	bl	800d5f0 <_fflush_r>
 800d336:	2800      	cmp	r0, #0
 800d338:	d127      	bne.n	800d38a <__swbuf_r+0x9a>
 800d33a:	68a3      	ldr	r3, [r4, #8]
 800d33c:	3001      	adds	r0, #1
 800d33e:	3b01      	subs	r3, #1
 800d340:	60a3      	str	r3, [r4, #8]
 800d342:	6823      	ldr	r3, [r4, #0]
 800d344:	1c5a      	adds	r2, r3, #1
 800d346:	6022      	str	r2, [r4, #0]
 800d348:	701f      	strb	r7, [r3, #0]
 800d34a:	6963      	ldr	r3, [r4, #20]
 800d34c:	4283      	cmp	r3, r0
 800d34e:	d004      	beq.n	800d35a <__swbuf_r+0x6a>
 800d350:	89a3      	ldrh	r3, [r4, #12]
 800d352:	07db      	lsls	r3, r3, #31
 800d354:	d507      	bpl.n	800d366 <__swbuf_r+0x76>
 800d356:	2e0a      	cmp	r6, #10
 800d358:	d105      	bne.n	800d366 <__swbuf_r+0x76>
 800d35a:	0021      	movs	r1, r4
 800d35c:	0028      	movs	r0, r5
 800d35e:	f000 f947 	bl	800d5f0 <_fflush_r>
 800d362:	2800      	cmp	r0, #0
 800d364:	d111      	bne.n	800d38a <__swbuf_r+0x9a>
 800d366:	0030      	movs	r0, r6
 800d368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d36a:	4b0a      	ldr	r3, [pc, #40]	; (800d394 <__swbuf_r+0xa4>)
 800d36c:	429c      	cmp	r4, r3
 800d36e:	d101      	bne.n	800d374 <__swbuf_r+0x84>
 800d370:	68ac      	ldr	r4, [r5, #8]
 800d372:	e7cc      	b.n	800d30e <__swbuf_r+0x1e>
 800d374:	4b08      	ldr	r3, [pc, #32]	; (800d398 <__swbuf_r+0xa8>)
 800d376:	429c      	cmp	r4, r3
 800d378:	d1c9      	bne.n	800d30e <__swbuf_r+0x1e>
 800d37a:	68ec      	ldr	r4, [r5, #12]
 800d37c:	e7c7      	b.n	800d30e <__swbuf_r+0x1e>
 800d37e:	0021      	movs	r1, r4
 800d380:	0028      	movs	r0, r5
 800d382:	f000 f81f 	bl	800d3c4 <__swsetup_r>
 800d386:	2800      	cmp	r0, #0
 800d388:	d0c9      	beq.n	800d31e <__swbuf_r+0x2e>
 800d38a:	2601      	movs	r6, #1
 800d38c:	4276      	negs	r6, r6
 800d38e:	e7ea      	b.n	800d366 <__swbuf_r+0x76>
 800d390:	0800effc 	.word	0x0800effc
 800d394:	0800f01c 	.word	0x0800f01c
 800d398:	0800efdc 	.word	0x0800efdc

0800d39c <_write_r>:
 800d39c:	b570      	push	{r4, r5, r6, lr}
 800d39e:	0004      	movs	r4, r0
 800d3a0:	0008      	movs	r0, r1
 800d3a2:	0011      	movs	r1, r2
 800d3a4:	001a      	movs	r2, r3
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	4d05      	ldr	r5, [pc, #20]	; (800d3c0 <_write_r+0x24>)
 800d3aa:	602b      	str	r3, [r5, #0]
 800d3ac:	f7f3 fde5 	bl	8000f7a <_write>
 800d3b0:	1c43      	adds	r3, r0, #1
 800d3b2:	d103      	bne.n	800d3bc <_write_r+0x20>
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d000      	beq.n	800d3bc <_write_r+0x20>
 800d3ba:	6023      	str	r3, [r4, #0]
 800d3bc:	bd70      	pop	{r4, r5, r6, pc}
 800d3be:	46c0      	nop			; (mov r8, r8)
 800d3c0:	20001458 	.word	0x20001458

0800d3c4 <__swsetup_r>:
 800d3c4:	4b37      	ldr	r3, [pc, #220]	; (800d4a4 <__swsetup_r+0xe0>)
 800d3c6:	b570      	push	{r4, r5, r6, lr}
 800d3c8:	681d      	ldr	r5, [r3, #0]
 800d3ca:	0006      	movs	r6, r0
 800d3cc:	000c      	movs	r4, r1
 800d3ce:	2d00      	cmp	r5, #0
 800d3d0:	d005      	beq.n	800d3de <__swsetup_r+0x1a>
 800d3d2:	69ab      	ldr	r3, [r5, #24]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <__swsetup_r+0x1a>
 800d3d8:	0028      	movs	r0, r5
 800d3da:	f000 f9c1 	bl	800d760 <__sinit>
 800d3de:	4b32      	ldr	r3, [pc, #200]	; (800d4a8 <__swsetup_r+0xe4>)
 800d3e0:	429c      	cmp	r4, r3
 800d3e2:	d10f      	bne.n	800d404 <__swsetup_r+0x40>
 800d3e4:	686c      	ldr	r4, [r5, #4]
 800d3e6:	230c      	movs	r3, #12
 800d3e8:	5ee2      	ldrsh	r2, [r4, r3]
 800d3ea:	b293      	uxth	r3, r2
 800d3ec:	0711      	lsls	r1, r2, #28
 800d3ee:	d42d      	bmi.n	800d44c <__swsetup_r+0x88>
 800d3f0:	06d9      	lsls	r1, r3, #27
 800d3f2:	d411      	bmi.n	800d418 <__swsetup_r+0x54>
 800d3f4:	2309      	movs	r3, #9
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	6033      	str	r3, [r6, #0]
 800d3fa:	3337      	adds	r3, #55	; 0x37
 800d3fc:	4313      	orrs	r3, r2
 800d3fe:	81a3      	strh	r3, [r4, #12]
 800d400:	4240      	negs	r0, r0
 800d402:	bd70      	pop	{r4, r5, r6, pc}
 800d404:	4b29      	ldr	r3, [pc, #164]	; (800d4ac <__swsetup_r+0xe8>)
 800d406:	429c      	cmp	r4, r3
 800d408:	d101      	bne.n	800d40e <__swsetup_r+0x4a>
 800d40a:	68ac      	ldr	r4, [r5, #8]
 800d40c:	e7eb      	b.n	800d3e6 <__swsetup_r+0x22>
 800d40e:	4b28      	ldr	r3, [pc, #160]	; (800d4b0 <__swsetup_r+0xec>)
 800d410:	429c      	cmp	r4, r3
 800d412:	d1e8      	bne.n	800d3e6 <__swsetup_r+0x22>
 800d414:	68ec      	ldr	r4, [r5, #12]
 800d416:	e7e6      	b.n	800d3e6 <__swsetup_r+0x22>
 800d418:	075b      	lsls	r3, r3, #29
 800d41a:	d513      	bpl.n	800d444 <__swsetup_r+0x80>
 800d41c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d41e:	2900      	cmp	r1, #0
 800d420:	d008      	beq.n	800d434 <__swsetup_r+0x70>
 800d422:	0023      	movs	r3, r4
 800d424:	3344      	adds	r3, #68	; 0x44
 800d426:	4299      	cmp	r1, r3
 800d428:	d002      	beq.n	800d430 <__swsetup_r+0x6c>
 800d42a:	0030      	movs	r0, r6
 800d42c:	f000 fb38 	bl	800daa0 <_free_r>
 800d430:	2300      	movs	r3, #0
 800d432:	6363      	str	r3, [r4, #52]	; 0x34
 800d434:	2224      	movs	r2, #36	; 0x24
 800d436:	89a3      	ldrh	r3, [r4, #12]
 800d438:	4393      	bics	r3, r2
 800d43a:	81a3      	strh	r3, [r4, #12]
 800d43c:	2300      	movs	r3, #0
 800d43e:	6063      	str	r3, [r4, #4]
 800d440:	6923      	ldr	r3, [r4, #16]
 800d442:	6023      	str	r3, [r4, #0]
 800d444:	2308      	movs	r3, #8
 800d446:	89a2      	ldrh	r2, [r4, #12]
 800d448:	4313      	orrs	r3, r2
 800d44a:	81a3      	strh	r3, [r4, #12]
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10b      	bne.n	800d46a <__swsetup_r+0xa6>
 800d452:	21a0      	movs	r1, #160	; 0xa0
 800d454:	2280      	movs	r2, #128	; 0x80
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	0089      	lsls	r1, r1, #2
 800d45a:	0092      	lsls	r2, r2, #2
 800d45c:	400b      	ands	r3, r1
 800d45e:	4293      	cmp	r3, r2
 800d460:	d003      	beq.n	800d46a <__swsetup_r+0xa6>
 800d462:	0021      	movs	r1, r4
 800d464:	0030      	movs	r0, r6
 800d466:	f000 fab9 	bl	800d9dc <__smakebuf_r>
 800d46a:	220c      	movs	r2, #12
 800d46c:	5ea3      	ldrsh	r3, [r4, r2]
 800d46e:	2001      	movs	r0, #1
 800d470:	001a      	movs	r2, r3
 800d472:	b299      	uxth	r1, r3
 800d474:	4002      	ands	r2, r0
 800d476:	4203      	tst	r3, r0
 800d478:	d00f      	beq.n	800d49a <__swsetup_r+0xd6>
 800d47a:	2200      	movs	r2, #0
 800d47c:	60a2      	str	r2, [r4, #8]
 800d47e:	6962      	ldr	r2, [r4, #20]
 800d480:	4252      	negs	r2, r2
 800d482:	61a2      	str	r2, [r4, #24]
 800d484:	2000      	movs	r0, #0
 800d486:	6922      	ldr	r2, [r4, #16]
 800d488:	4282      	cmp	r2, r0
 800d48a:	d1ba      	bne.n	800d402 <__swsetup_r+0x3e>
 800d48c:	060a      	lsls	r2, r1, #24
 800d48e:	d5b8      	bpl.n	800d402 <__swsetup_r+0x3e>
 800d490:	2240      	movs	r2, #64	; 0x40
 800d492:	4313      	orrs	r3, r2
 800d494:	81a3      	strh	r3, [r4, #12]
 800d496:	3801      	subs	r0, #1
 800d498:	e7b3      	b.n	800d402 <__swsetup_r+0x3e>
 800d49a:	0788      	lsls	r0, r1, #30
 800d49c:	d400      	bmi.n	800d4a0 <__swsetup_r+0xdc>
 800d49e:	6962      	ldr	r2, [r4, #20]
 800d4a0:	60a2      	str	r2, [r4, #8]
 800d4a2:	e7ef      	b.n	800d484 <__swsetup_r+0xc0>
 800d4a4:	200001d4 	.word	0x200001d4
 800d4a8:	0800effc 	.word	0x0800effc
 800d4ac:	0800f01c 	.word	0x0800f01c
 800d4b0:	0800efdc 	.word	0x0800efdc

0800d4b4 <_close_r>:
 800d4b4:	2300      	movs	r3, #0
 800d4b6:	b570      	push	{r4, r5, r6, lr}
 800d4b8:	4d06      	ldr	r5, [pc, #24]	; (800d4d4 <_close_r+0x20>)
 800d4ba:	0004      	movs	r4, r0
 800d4bc:	0008      	movs	r0, r1
 800d4be:	602b      	str	r3, [r5, #0]
 800d4c0:	f7f4 fde4 	bl	800208c <_close>
 800d4c4:	1c43      	adds	r3, r0, #1
 800d4c6:	d103      	bne.n	800d4d0 <_close_r+0x1c>
 800d4c8:	682b      	ldr	r3, [r5, #0]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d000      	beq.n	800d4d0 <_close_r+0x1c>
 800d4ce:	6023      	str	r3, [r4, #0]
 800d4d0:	bd70      	pop	{r4, r5, r6, pc}
 800d4d2:	46c0      	nop			; (mov r8, r8)
 800d4d4:	20001458 	.word	0x20001458

0800d4d8 <__sflush_r>:
 800d4d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d4da:	898b      	ldrh	r3, [r1, #12]
 800d4dc:	0005      	movs	r5, r0
 800d4de:	000c      	movs	r4, r1
 800d4e0:	071a      	lsls	r2, r3, #28
 800d4e2:	d45f      	bmi.n	800d5a4 <__sflush_r+0xcc>
 800d4e4:	684a      	ldr	r2, [r1, #4]
 800d4e6:	2a00      	cmp	r2, #0
 800d4e8:	dc04      	bgt.n	800d4f4 <__sflush_r+0x1c>
 800d4ea:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800d4ec:	2a00      	cmp	r2, #0
 800d4ee:	dc01      	bgt.n	800d4f4 <__sflush_r+0x1c>
 800d4f0:	2000      	movs	r0, #0
 800d4f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d4f4:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d4f6:	2f00      	cmp	r7, #0
 800d4f8:	d0fa      	beq.n	800d4f0 <__sflush_r+0x18>
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2180      	movs	r1, #128	; 0x80
 800d4fe:	682e      	ldr	r6, [r5, #0]
 800d500:	602a      	str	r2, [r5, #0]
 800d502:	001a      	movs	r2, r3
 800d504:	0149      	lsls	r1, r1, #5
 800d506:	400a      	ands	r2, r1
 800d508:	420b      	tst	r3, r1
 800d50a:	d034      	beq.n	800d576 <__sflush_r+0x9e>
 800d50c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d50e:	89a3      	ldrh	r3, [r4, #12]
 800d510:	075b      	lsls	r3, r3, #29
 800d512:	d506      	bpl.n	800d522 <__sflush_r+0x4a>
 800d514:	6863      	ldr	r3, [r4, #4]
 800d516:	1ac0      	subs	r0, r0, r3
 800d518:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d001      	beq.n	800d522 <__sflush_r+0x4a>
 800d51e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d520:	1ac0      	subs	r0, r0, r3
 800d522:	0002      	movs	r2, r0
 800d524:	6a21      	ldr	r1, [r4, #32]
 800d526:	2300      	movs	r3, #0
 800d528:	0028      	movs	r0, r5
 800d52a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800d52c:	47b8      	blx	r7
 800d52e:	89a1      	ldrh	r1, [r4, #12]
 800d530:	1c43      	adds	r3, r0, #1
 800d532:	d106      	bne.n	800d542 <__sflush_r+0x6a>
 800d534:	682b      	ldr	r3, [r5, #0]
 800d536:	2b1d      	cmp	r3, #29
 800d538:	d831      	bhi.n	800d59e <__sflush_r+0xc6>
 800d53a:	4a2c      	ldr	r2, [pc, #176]	; (800d5ec <__sflush_r+0x114>)
 800d53c:	40da      	lsrs	r2, r3
 800d53e:	07d3      	lsls	r3, r2, #31
 800d540:	d52d      	bpl.n	800d59e <__sflush_r+0xc6>
 800d542:	2300      	movs	r3, #0
 800d544:	6063      	str	r3, [r4, #4]
 800d546:	6923      	ldr	r3, [r4, #16]
 800d548:	6023      	str	r3, [r4, #0]
 800d54a:	04cb      	lsls	r3, r1, #19
 800d54c:	d505      	bpl.n	800d55a <__sflush_r+0x82>
 800d54e:	1c43      	adds	r3, r0, #1
 800d550:	d102      	bne.n	800d558 <__sflush_r+0x80>
 800d552:	682b      	ldr	r3, [r5, #0]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d100      	bne.n	800d55a <__sflush_r+0x82>
 800d558:	6560      	str	r0, [r4, #84]	; 0x54
 800d55a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d55c:	602e      	str	r6, [r5, #0]
 800d55e:	2900      	cmp	r1, #0
 800d560:	d0c6      	beq.n	800d4f0 <__sflush_r+0x18>
 800d562:	0023      	movs	r3, r4
 800d564:	3344      	adds	r3, #68	; 0x44
 800d566:	4299      	cmp	r1, r3
 800d568:	d002      	beq.n	800d570 <__sflush_r+0x98>
 800d56a:	0028      	movs	r0, r5
 800d56c:	f000 fa98 	bl	800daa0 <_free_r>
 800d570:	2000      	movs	r0, #0
 800d572:	6360      	str	r0, [r4, #52]	; 0x34
 800d574:	e7bd      	b.n	800d4f2 <__sflush_r+0x1a>
 800d576:	2301      	movs	r3, #1
 800d578:	0028      	movs	r0, r5
 800d57a:	6a21      	ldr	r1, [r4, #32]
 800d57c:	47b8      	blx	r7
 800d57e:	1c43      	adds	r3, r0, #1
 800d580:	d1c5      	bne.n	800d50e <__sflush_r+0x36>
 800d582:	682b      	ldr	r3, [r5, #0]
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0c2      	beq.n	800d50e <__sflush_r+0x36>
 800d588:	2b1d      	cmp	r3, #29
 800d58a:	d001      	beq.n	800d590 <__sflush_r+0xb8>
 800d58c:	2b16      	cmp	r3, #22
 800d58e:	d101      	bne.n	800d594 <__sflush_r+0xbc>
 800d590:	602e      	str	r6, [r5, #0]
 800d592:	e7ad      	b.n	800d4f0 <__sflush_r+0x18>
 800d594:	2340      	movs	r3, #64	; 0x40
 800d596:	89a2      	ldrh	r2, [r4, #12]
 800d598:	4313      	orrs	r3, r2
 800d59a:	81a3      	strh	r3, [r4, #12]
 800d59c:	e7a9      	b.n	800d4f2 <__sflush_r+0x1a>
 800d59e:	2340      	movs	r3, #64	; 0x40
 800d5a0:	430b      	orrs	r3, r1
 800d5a2:	e7fa      	b.n	800d59a <__sflush_r+0xc2>
 800d5a4:	690f      	ldr	r7, [r1, #16]
 800d5a6:	2f00      	cmp	r7, #0
 800d5a8:	d0a2      	beq.n	800d4f0 <__sflush_r+0x18>
 800d5aa:	680a      	ldr	r2, [r1, #0]
 800d5ac:	600f      	str	r7, [r1, #0]
 800d5ae:	1bd2      	subs	r2, r2, r7
 800d5b0:	9201      	str	r2, [sp, #4]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	079b      	lsls	r3, r3, #30
 800d5b6:	d100      	bne.n	800d5ba <__sflush_r+0xe2>
 800d5b8:	694a      	ldr	r2, [r1, #20]
 800d5ba:	60a2      	str	r2, [r4, #8]
 800d5bc:	9b01      	ldr	r3, [sp, #4]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	dc00      	bgt.n	800d5c4 <__sflush_r+0xec>
 800d5c2:	e795      	b.n	800d4f0 <__sflush_r+0x18>
 800d5c4:	003a      	movs	r2, r7
 800d5c6:	0028      	movs	r0, r5
 800d5c8:	9b01      	ldr	r3, [sp, #4]
 800d5ca:	6a21      	ldr	r1, [r4, #32]
 800d5cc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5ce:	47b0      	blx	r6
 800d5d0:	2800      	cmp	r0, #0
 800d5d2:	dc06      	bgt.n	800d5e2 <__sflush_r+0x10a>
 800d5d4:	2340      	movs	r3, #64	; 0x40
 800d5d6:	2001      	movs	r0, #1
 800d5d8:	89a2      	ldrh	r2, [r4, #12]
 800d5da:	4240      	negs	r0, r0
 800d5dc:	4313      	orrs	r3, r2
 800d5de:	81a3      	strh	r3, [r4, #12]
 800d5e0:	e787      	b.n	800d4f2 <__sflush_r+0x1a>
 800d5e2:	9b01      	ldr	r3, [sp, #4]
 800d5e4:	183f      	adds	r7, r7, r0
 800d5e6:	1a1b      	subs	r3, r3, r0
 800d5e8:	9301      	str	r3, [sp, #4]
 800d5ea:	e7e7      	b.n	800d5bc <__sflush_r+0xe4>
 800d5ec:	20400001 	.word	0x20400001

0800d5f0 <_fflush_r>:
 800d5f0:	690b      	ldr	r3, [r1, #16]
 800d5f2:	b570      	push	{r4, r5, r6, lr}
 800d5f4:	0005      	movs	r5, r0
 800d5f6:	000c      	movs	r4, r1
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d102      	bne.n	800d602 <_fflush_r+0x12>
 800d5fc:	2500      	movs	r5, #0
 800d5fe:	0028      	movs	r0, r5
 800d600:	bd70      	pop	{r4, r5, r6, pc}
 800d602:	2800      	cmp	r0, #0
 800d604:	d004      	beq.n	800d610 <_fflush_r+0x20>
 800d606:	6983      	ldr	r3, [r0, #24]
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d101      	bne.n	800d610 <_fflush_r+0x20>
 800d60c:	f000 f8a8 	bl	800d760 <__sinit>
 800d610:	4b14      	ldr	r3, [pc, #80]	; (800d664 <_fflush_r+0x74>)
 800d612:	429c      	cmp	r4, r3
 800d614:	d11b      	bne.n	800d64e <_fflush_r+0x5e>
 800d616:	686c      	ldr	r4, [r5, #4]
 800d618:	220c      	movs	r2, #12
 800d61a:	5ea3      	ldrsh	r3, [r4, r2]
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d0ed      	beq.n	800d5fc <_fflush_r+0xc>
 800d620:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d622:	07d2      	lsls	r2, r2, #31
 800d624:	d404      	bmi.n	800d630 <_fflush_r+0x40>
 800d626:	059b      	lsls	r3, r3, #22
 800d628:	d402      	bmi.n	800d630 <_fflush_r+0x40>
 800d62a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d62c:	f000 f997 	bl	800d95e <__retarget_lock_acquire_recursive>
 800d630:	0028      	movs	r0, r5
 800d632:	0021      	movs	r1, r4
 800d634:	f7ff ff50 	bl	800d4d8 <__sflush_r>
 800d638:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d63a:	0005      	movs	r5, r0
 800d63c:	07db      	lsls	r3, r3, #31
 800d63e:	d4de      	bmi.n	800d5fe <_fflush_r+0xe>
 800d640:	89a3      	ldrh	r3, [r4, #12]
 800d642:	059b      	lsls	r3, r3, #22
 800d644:	d4db      	bmi.n	800d5fe <_fflush_r+0xe>
 800d646:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d648:	f000 f98a 	bl	800d960 <__retarget_lock_release_recursive>
 800d64c:	e7d7      	b.n	800d5fe <_fflush_r+0xe>
 800d64e:	4b06      	ldr	r3, [pc, #24]	; (800d668 <_fflush_r+0x78>)
 800d650:	429c      	cmp	r4, r3
 800d652:	d101      	bne.n	800d658 <_fflush_r+0x68>
 800d654:	68ac      	ldr	r4, [r5, #8]
 800d656:	e7df      	b.n	800d618 <_fflush_r+0x28>
 800d658:	4b04      	ldr	r3, [pc, #16]	; (800d66c <_fflush_r+0x7c>)
 800d65a:	429c      	cmp	r4, r3
 800d65c:	d1dc      	bne.n	800d618 <_fflush_r+0x28>
 800d65e:	68ec      	ldr	r4, [r5, #12]
 800d660:	e7da      	b.n	800d618 <_fflush_r+0x28>
 800d662:	46c0      	nop			; (mov r8, r8)
 800d664:	0800effc 	.word	0x0800effc
 800d668:	0800f01c 	.word	0x0800f01c
 800d66c:	0800efdc 	.word	0x0800efdc

0800d670 <fflush>:
 800d670:	0001      	movs	r1, r0
 800d672:	b510      	push	{r4, lr}
 800d674:	2800      	cmp	r0, #0
 800d676:	d105      	bne.n	800d684 <fflush+0x14>
 800d678:	4b05      	ldr	r3, [pc, #20]	; (800d690 <fflush+0x20>)
 800d67a:	4906      	ldr	r1, [pc, #24]	; (800d694 <fflush+0x24>)
 800d67c:	6818      	ldr	r0, [r3, #0]
 800d67e:	f000 f90a 	bl	800d896 <_fwalk_reent>
 800d682:	bd10      	pop	{r4, pc}
 800d684:	4b04      	ldr	r3, [pc, #16]	; (800d698 <fflush+0x28>)
 800d686:	6818      	ldr	r0, [r3, #0]
 800d688:	f7ff ffb2 	bl	800d5f0 <_fflush_r>
 800d68c:	e7f9      	b.n	800d682 <fflush+0x12>
 800d68e:	46c0      	nop			; (mov r8, r8)
 800d690:	0800efa4 	.word	0x0800efa4
 800d694:	0800d5f1 	.word	0x0800d5f1
 800d698:	200001d4 	.word	0x200001d4

0800d69c <std>:
 800d69c:	2300      	movs	r3, #0
 800d69e:	b510      	push	{r4, lr}
 800d6a0:	0004      	movs	r4, r0
 800d6a2:	6003      	str	r3, [r0, #0]
 800d6a4:	6043      	str	r3, [r0, #4]
 800d6a6:	6083      	str	r3, [r0, #8]
 800d6a8:	8181      	strh	r1, [r0, #12]
 800d6aa:	6643      	str	r3, [r0, #100]	; 0x64
 800d6ac:	0019      	movs	r1, r3
 800d6ae:	81c2      	strh	r2, [r0, #14]
 800d6b0:	6103      	str	r3, [r0, #16]
 800d6b2:	6143      	str	r3, [r0, #20]
 800d6b4:	6183      	str	r3, [r0, #24]
 800d6b6:	2208      	movs	r2, #8
 800d6b8:	305c      	adds	r0, #92	; 0x5c
 800d6ba:	f7ff f92b 	bl	800c914 <memset>
 800d6be:	4b05      	ldr	r3, [pc, #20]	; (800d6d4 <std+0x38>)
 800d6c0:	6224      	str	r4, [r4, #32]
 800d6c2:	6263      	str	r3, [r4, #36]	; 0x24
 800d6c4:	4b04      	ldr	r3, [pc, #16]	; (800d6d8 <std+0x3c>)
 800d6c6:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6c8:	4b04      	ldr	r3, [pc, #16]	; (800d6dc <std+0x40>)
 800d6ca:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6cc:	4b04      	ldr	r3, [pc, #16]	; (800d6e0 <std+0x44>)
 800d6ce:	6323      	str	r3, [r4, #48]	; 0x30
 800d6d0:	bd10      	pop	{r4, pc}
 800d6d2:	46c0      	nop			; (mov r8, r8)
 800d6d4:	0800d221 	.word	0x0800d221
 800d6d8:	0800d24d 	.word	0x0800d24d
 800d6dc:	0800d285 	.word	0x0800d285
 800d6e0:	0800d2b1 	.word	0x0800d2b1

0800d6e4 <_cleanup_r>:
 800d6e4:	b510      	push	{r4, lr}
 800d6e6:	4902      	ldr	r1, [pc, #8]	; (800d6f0 <_cleanup_r+0xc>)
 800d6e8:	f000 f8d5 	bl	800d896 <_fwalk_reent>
 800d6ec:	bd10      	pop	{r4, pc}
 800d6ee:	46c0      	nop			; (mov r8, r8)
 800d6f0:	0800d5f1 	.word	0x0800d5f1

0800d6f4 <__sfmoreglue>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	2568      	movs	r5, #104	; 0x68
 800d6f8:	1e4a      	subs	r2, r1, #1
 800d6fa:	4355      	muls	r5, r2
 800d6fc:	000e      	movs	r6, r1
 800d6fe:	0029      	movs	r1, r5
 800d700:	3174      	adds	r1, #116	; 0x74
 800d702:	f000 fa39 	bl	800db78 <_malloc_r>
 800d706:	1e04      	subs	r4, r0, #0
 800d708:	d008      	beq.n	800d71c <__sfmoreglue+0x28>
 800d70a:	2100      	movs	r1, #0
 800d70c:	002a      	movs	r2, r5
 800d70e:	6001      	str	r1, [r0, #0]
 800d710:	6046      	str	r6, [r0, #4]
 800d712:	300c      	adds	r0, #12
 800d714:	60a0      	str	r0, [r4, #8]
 800d716:	3268      	adds	r2, #104	; 0x68
 800d718:	f7ff f8fc 	bl	800c914 <memset>
 800d71c:	0020      	movs	r0, r4
 800d71e:	bd70      	pop	{r4, r5, r6, pc}

0800d720 <__sfp_lock_acquire>:
 800d720:	b510      	push	{r4, lr}
 800d722:	4802      	ldr	r0, [pc, #8]	; (800d72c <__sfp_lock_acquire+0xc>)
 800d724:	f000 f91b 	bl	800d95e <__retarget_lock_acquire_recursive>
 800d728:	bd10      	pop	{r4, pc}
 800d72a:	46c0      	nop			; (mov r8, r8)
 800d72c:	2000144d 	.word	0x2000144d

0800d730 <__sfp_lock_release>:
 800d730:	b510      	push	{r4, lr}
 800d732:	4802      	ldr	r0, [pc, #8]	; (800d73c <__sfp_lock_release+0xc>)
 800d734:	f000 f914 	bl	800d960 <__retarget_lock_release_recursive>
 800d738:	bd10      	pop	{r4, pc}
 800d73a:	46c0      	nop			; (mov r8, r8)
 800d73c:	2000144d 	.word	0x2000144d

0800d740 <__sinit_lock_acquire>:
 800d740:	b510      	push	{r4, lr}
 800d742:	4802      	ldr	r0, [pc, #8]	; (800d74c <__sinit_lock_acquire+0xc>)
 800d744:	f000 f90b 	bl	800d95e <__retarget_lock_acquire_recursive>
 800d748:	bd10      	pop	{r4, pc}
 800d74a:	46c0      	nop			; (mov r8, r8)
 800d74c:	2000144e 	.word	0x2000144e

0800d750 <__sinit_lock_release>:
 800d750:	b510      	push	{r4, lr}
 800d752:	4802      	ldr	r0, [pc, #8]	; (800d75c <__sinit_lock_release+0xc>)
 800d754:	f000 f904 	bl	800d960 <__retarget_lock_release_recursive>
 800d758:	bd10      	pop	{r4, pc}
 800d75a:	46c0      	nop			; (mov r8, r8)
 800d75c:	2000144e 	.word	0x2000144e

0800d760 <__sinit>:
 800d760:	b513      	push	{r0, r1, r4, lr}
 800d762:	0004      	movs	r4, r0
 800d764:	f7ff ffec 	bl	800d740 <__sinit_lock_acquire>
 800d768:	69a3      	ldr	r3, [r4, #24]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d002      	beq.n	800d774 <__sinit+0x14>
 800d76e:	f7ff ffef 	bl	800d750 <__sinit_lock_release>
 800d772:	bd13      	pop	{r0, r1, r4, pc}
 800d774:	64a3      	str	r3, [r4, #72]	; 0x48
 800d776:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d778:	6523      	str	r3, [r4, #80]	; 0x50
 800d77a:	4b13      	ldr	r3, [pc, #76]	; (800d7c8 <__sinit+0x68>)
 800d77c:	4a13      	ldr	r2, [pc, #76]	; (800d7cc <__sinit+0x6c>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	62a2      	str	r2, [r4, #40]	; 0x28
 800d782:	9301      	str	r3, [sp, #4]
 800d784:	42a3      	cmp	r3, r4
 800d786:	d101      	bne.n	800d78c <__sinit+0x2c>
 800d788:	2301      	movs	r3, #1
 800d78a:	61a3      	str	r3, [r4, #24]
 800d78c:	0020      	movs	r0, r4
 800d78e:	f000 f81f 	bl	800d7d0 <__sfp>
 800d792:	6060      	str	r0, [r4, #4]
 800d794:	0020      	movs	r0, r4
 800d796:	f000 f81b 	bl	800d7d0 <__sfp>
 800d79a:	60a0      	str	r0, [r4, #8]
 800d79c:	0020      	movs	r0, r4
 800d79e:	f000 f817 	bl	800d7d0 <__sfp>
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2104      	movs	r1, #4
 800d7a6:	60e0      	str	r0, [r4, #12]
 800d7a8:	6860      	ldr	r0, [r4, #4]
 800d7aa:	f7ff ff77 	bl	800d69c <std>
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	2109      	movs	r1, #9
 800d7b2:	68a0      	ldr	r0, [r4, #8]
 800d7b4:	f7ff ff72 	bl	800d69c <std>
 800d7b8:	2202      	movs	r2, #2
 800d7ba:	2112      	movs	r1, #18
 800d7bc:	68e0      	ldr	r0, [r4, #12]
 800d7be:	f7ff ff6d 	bl	800d69c <std>
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	61a3      	str	r3, [r4, #24]
 800d7c6:	e7d2      	b.n	800d76e <__sinit+0xe>
 800d7c8:	0800efa4 	.word	0x0800efa4
 800d7cc:	0800d6e5 	.word	0x0800d6e5

0800d7d0 <__sfp>:
 800d7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7d2:	0007      	movs	r7, r0
 800d7d4:	f7ff ffa4 	bl	800d720 <__sfp_lock_acquire>
 800d7d8:	4b1f      	ldr	r3, [pc, #124]	; (800d858 <__sfp+0x88>)
 800d7da:	681e      	ldr	r6, [r3, #0]
 800d7dc:	69b3      	ldr	r3, [r6, #24]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d102      	bne.n	800d7e8 <__sfp+0x18>
 800d7e2:	0030      	movs	r0, r6
 800d7e4:	f7ff ffbc 	bl	800d760 <__sinit>
 800d7e8:	3648      	adds	r6, #72	; 0x48
 800d7ea:	68b4      	ldr	r4, [r6, #8]
 800d7ec:	6873      	ldr	r3, [r6, #4]
 800d7ee:	3b01      	subs	r3, #1
 800d7f0:	d504      	bpl.n	800d7fc <__sfp+0x2c>
 800d7f2:	6833      	ldr	r3, [r6, #0]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d022      	beq.n	800d83e <__sfp+0x6e>
 800d7f8:	6836      	ldr	r6, [r6, #0]
 800d7fa:	e7f6      	b.n	800d7ea <__sfp+0x1a>
 800d7fc:	220c      	movs	r2, #12
 800d7fe:	5ea5      	ldrsh	r5, [r4, r2]
 800d800:	2d00      	cmp	r5, #0
 800d802:	d11a      	bne.n	800d83a <__sfp+0x6a>
 800d804:	0020      	movs	r0, r4
 800d806:	4b15      	ldr	r3, [pc, #84]	; (800d85c <__sfp+0x8c>)
 800d808:	3058      	adds	r0, #88	; 0x58
 800d80a:	60e3      	str	r3, [r4, #12]
 800d80c:	6665      	str	r5, [r4, #100]	; 0x64
 800d80e:	f000 f8a5 	bl	800d95c <__retarget_lock_init_recursive>
 800d812:	f7ff ff8d 	bl	800d730 <__sfp_lock_release>
 800d816:	0020      	movs	r0, r4
 800d818:	2208      	movs	r2, #8
 800d81a:	0029      	movs	r1, r5
 800d81c:	6025      	str	r5, [r4, #0]
 800d81e:	60a5      	str	r5, [r4, #8]
 800d820:	6065      	str	r5, [r4, #4]
 800d822:	6125      	str	r5, [r4, #16]
 800d824:	6165      	str	r5, [r4, #20]
 800d826:	61a5      	str	r5, [r4, #24]
 800d828:	305c      	adds	r0, #92	; 0x5c
 800d82a:	f7ff f873 	bl	800c914 <memset>
 800d82e:	6365      	str	r5, [r4, #52]	; 0x34
 800d830:	63a5      	str	r5, [r4, #56]	; 0x38
 800d832:	64a5      	str	r5, [r4, #72]	; 0x48
 800d834:	64e5      	str	r5, [r4, #76]	; 0x4c
 800d836:	0020      	movs	r0, r4
 800d838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d83a:	3468      	adds	r4, #104	; 0x68
 800d83c:	e7d7      	b.n	800d7ee <__sfp+0x1e>
 800d83e:	2104      	movs	r1, #4
 800d840:	0038      	movs	r0, r7
 800d842:	f7ff ff57 	bl	800d6f4 <__sfmoreglue>
 800d846:	1e04      	subs	r4, r0, #0
 800d848:	6030      	str	r0, [r6, #0]
 800d84a:	d1d5      	bne.n	800d7f8 <__sfp+0x28>
 800d84c:	f7ff ff70 	bl	800d730 <__sfp_lock_release>
 800d850:	230c      	movs	r3, #12
 800d852:	603b      	str	r3, [r7, #0]
 800d854:	e7ef      	b.n	800d836 <__sfp+0x66>
 800d856:	46c0      	nop			; (mov r8, r8)
 800d858:	0800efa4 	.word	0x0800efa4
 800d85c:	ffff0001 	.word	0xffff0001

0800d860 <_fwalk>:
 800d860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d862:	3048      	adds	r0, #72	; 0x48
 800d864:	0004      	movs	r4, r0
 800d866:	2600      	movs	r6, #0
 800d868:	9101      	str	r1, [sp, #4]
 800d86a:	68a5      	ldr	r5, [r4, #8]
 800d86c:	6867      	ldr	r7, [r4, #4]
 800d86e:	3f01      	subs	r7, #1
 800d870:	d504      	bpl.n	800d87c <_fwalk+0x1c>
 800d872:	6824      	ldr	r4, [r4, #0]
 800d874:	2c00      	cmp	r4, #0
 800d876:	d1f8      	bne.n	800d86a <_fwalk+0xa>
 800d878:	0030      	movs	r0, r6
 800d87a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d87c:	89ab      	ldrh	r3, [r5, #12]
 800d87e:	2b01      	cmp	r3, #1
 800d880:	d907      	bls.n	800d892 <_fwalk+0x32>
 800d882:	220e      	movs	r2, #14
 800d884:	5eab      	ldrsh	r3, [r5, r2]
 800d886:	3301      	adds	r3, #1
 800d888:	d003      	beq.n	800d892 <_fwalk+0x32>
 800d88a:	0028      	movs	r0, r5
 800d88c:	9b01      	ldr	r3, [sp, #4]
 800d88e:	4798      	blx	r3
 800d890:	4306      	orrs	r6, r0
 800d892:	3568      	adds	r5, #104	; 0x68
 800d894:	e7eb      	b.n	800d86e <_fwalk+0xe>

0800d896 <_fwalk_reent>:
 800d896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d898:	0004      	movs	r4, r0
 800d89a:	0006      	movs	r6, r0
 800d89c:	2700      	movs	r7, #0
 800d89e:	9101      	str	r1, [sp, #4]
 800d8a0:	3448      	adds	r4, #72	; 0x48
 800d8a2:	6863      	ldr	r3, [r4, #4]
 800d8a4:	68a5      	ldr	r5, [r4, #8]
 800d8a6:	9300      	str	r3, [sp, #0]
 800d8a8:	9b00      	ldr	r3, [sp, #0]
 800d8aa:	3b01      	subs	r3, #1
 800d8ac:	9300      	str	r3, [sp, #0]
 800d8ae:	d504      	bpl.n	800d8ba <_fwalk_reent+0x24>
 800d8b0:	6824      	ldr	r4, [r4, #0]
 800d8b2:	2c00      	cmp	r4, #0
 800d8b4:	d1f5      	bne.n	800d8a2 <_fwalk_reent+0xc>
 800d8b6:	0038      	movs	r0, r7
 800d8b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8ba:	89ab      	ldrh	r3, [r5, #12]
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d908      	bls.n	800d8d2 <_fwalk_reent+0x3c>
 800d8c0:	220e      	movs	r2, #14
 800d8c2:	5eab      	ldrsh	r3, [r5, r2]
 800d8c4:	3301      	adds	r3, #1
 800d8c6:	d004      	beq.n	800d8d2 <_fwalk_reent+0x3c>
 800d8c8:	0029      	movs	r1, r5
 800d8ca:	0030      	movs	r0, r6
 800d8cc:	9b01      	ldr	r3, [sp, #4]
 800d8ce:	4798      	blx	r3
 800d8d0:	4307      	orrs	r7, r0
 800d8d2:	3568      	adds	r5, #104	; 0x68
 800d8d4:	e7e8      	b.n	800d8a8 <_fwalk_reent+0x12>
	...

0800d8d8 <_getc_r>:
 800d8d8:	b570      	push	{r4, r5, r6, lr}
 800d8da:	0005      	movs	r5, r0
 800d8dc:	000c      	movs	r4, r1
 800d8de:	2800      	cmp	r0, #0
 800d8e0:	d004      	beq.n	800d8ec <_getc_r+0x14>
 800d8e2:	6983      	ldr	r3, [r0, #24]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d101      	bne.n	800d8ec <_getc_r+0x14>
 800d8e8:	f7ff ff3a 	bl	800d760 <__sinit>
 800d8ec:	4b18      	ldr	r3, [pc, #96]	; (800d950 <_getc_r+0x78>)
 800d8ee:	429c      	cmp	r4, r3
 800d8f0:	d11e      	bne.n	800d930 <_getc_r+0x58>
 800d8f2:	686c      	ldr	r4, [r5, #4]
 800d8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8f6:	07db      	lsls	r3, r3, #31
 800d8f8:	d405      	bmi.n	800d906 <_getc_r+0x2e>
 800d8fa:	89a3      	ldrh	r3, [r4, #12]
 800d8fc:	059b      	lsls	r3, r3, #22
 800d8fe:	d402      	bmi.n	800d906 <_getc_r+0x2e>
 800d900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d902:	f000 f82c 	bl	800d95e <__retarget_lock_acquire_recursive>
 800d906:	6863      	ldr	r3, [r4, #4]
 800d908:	3b01      	subs	r3, #1
 800d90a:	6063      	str	r3, [r4, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	da19      	bge.n	800d944 <_getc_r+0x6c>
 800d910:	0028      	movs	r0, r5
 800d912:	0021      	movs	r1, r4
 800d914:	f000 fd6e 	bl	800e3f4 <__srget_r>
 800d918:	0005      	movs	r5, r0
 800d91a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d91c:	07db      	lsls	r3, r3, #31
 800d91e:	d405      	bmi.n	800d92c <_getc_r+0x54>
 800d920:	89a3      	ldrh	r3, [r4, #12]
 800d922:	059b      	lsls	r3, r3, #22
 800d924:	d402      	bmi.n	800d92c <_getc_r+0x54>
 800d926:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d928:	f000 f81a 	bl	800d960 <__retarget_lock_release_recursive>
 800d92c:	0028      	movs	r0, r5
 800d92e:	bd70      	pop	{r4, r5, r6, pc}
 800d930:	4b08      	ldr	r3, [pc, #32]	; (800d954 <_getc_r+0x7c>)
 800d932:	429c      	cmp	r4, r3
 800d934:	d101      	bne.n	800d93a <_getc_r+0x62>
 800d936:	68ac      	ldr	r4, [r5, #8]
 800d938:	e7dc      	b.n	800d8f4 <_getc_r+0x1c>
 800d93a:	4b07      	ldr	r3, [pc, #28]	; (800d958 <_getc_r+0x80>)
 800d93c:	429c      	cmp	r4, r3
 800d93e:	d1d9      	bne.n	800d8f4 <_getc_r+0x1c>
 800d940:	68ec      	ldr	r4, [r5, #12]
 800d942:	e7d7      	b.n	800d8f4 <_getc_r+0x1c>
 800d944:	6823      	ldr	r3, [r4, #0]
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	6022      	str	r2, [r4, #0]
 800d94a:	781d      	ldrb	r5, [r3, #0]
 800d94c:	e7e5      	b.n	800d91a <_getc_r+0x42>
 800d94e:	46c0      	nop			; (mov r8, r8)
 800d950:	0800effc 	.word	0x0800effc
 800d954:	0800f01c 	.word	0x0800f01c
 800d958:	0800efdc 	.word	0x0800efdc

0800d95c <__retarget_lock_init_recursive>:
 800d95c:	4770      	bx	lr

0800d95e <__retarget_lock_acquire_recursive>:
 800d95e:	4770      	bx	lr

0800d960 <__retarget_lock_release_recursive>:
 800d960:	4770      	bx	lr
	...

0800d964 <_lseek_r>:
 800d964:	b570      	push	{r4, r5, r6, lr}
 800d966:	0004      	movs	r4, r0
 800d968:	0008      	movs	r0, r1
 800d96a:	0011      	movs	r1, r2
 800d96c:	001a      	movs	r2, r3
 800d96e:	2300      	movs	r3, #0
 800d970:	4d05      	ldr	r5, [pc, #20]	; (800d988 <_lseek_r+0x24>)
 800d972:	602b      	str	r3, [r5, #0]
 800d974:	f7f4 fbab 	bl	80020ce <_lseek>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	d103      	bne.n	800d984 <_lseek_r+0x20>
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d000      	beq.n	800d984 <_lseek_r+0x20>
 800d982:	6023      	str	r3, [r4, #0]
 800d984:	bd70      	pop	{r4, r5, r6, pc}
 800d986:	46c0      	nop			; (mov r8, r8)
 800d988:	20001458 	.word	0x20001458

0800d98c <__swhatbuf_r>:
 800d98c:	b570      	push	{r4, r5, r6, lr}
 800d98e:	000e      	movs	r6, r1
 800d990:	001d      	movs	r5, r3
 800d992:	230e      	movs	r3, #14
 800d994:	5ec9      	ldrsh	r1, [r1, r3]
 800d996:	0014      	movs	r4, r2
 800d998:	b096      	sub	sp, #88	; 0x58
 800d99a:	2900      	cmp	r1, #0
 800d99c:	da08      	bge.n	800d9b0 <__swhatbuf_r+0x24>
 800d99e:	220c      	movs	r2, #12
 800d9a0:	5eb3      	ldrsh	r3, [r6, r2]
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	602a      	str	r2, [r5, #0]
 800d9a6:	061b      	lsls	r3, r3, #24
 800d9a8:	d411      	bmi.n	800d9ce <__swhatbuf_r+0x42>
 800d9aa:	2380      	movs	r3, #128	; 0x80
 800d9ac:	00db      	lsls	r3, r3, #3
 800d9ae:	e00f      	b.n	800d9d0 <__swhatbuf_r+0x44>
 800d9b0:	466a      	mov	r2, sp
 800d9b2:	f000 fefb 	bl	800e7ac <_fstat_r>
 800d9b6:	2800      	cmp	r0, #0
 800d9b8:	dbf1      	blt.n	800d99e <__swhatbuf_r+0x12>
 800d9ba:	23f0      	movs	r3, #240	; 0xf0
 800d9bc:	9901      	ldr	r1, [sp, #4]
 800d9be:	021b      	lsls	r3, r3, #8
 800d9c0:	4019      	ands	r1, r3
 800d9c2:	4b05      	ldr	r3, [pc, #20]	; (800d9d8 <__swhatbuf_r+0x4c>)
 800d9c4:	18c9      	adds	r1, r1, r3
 800d9c6:	424b      	negs	r3, r1
 800d9c8:	4159      	adcs	r1, r3
 800d9ca:	6029      	str	r1, [r5, #0]
 800d9cc:	e7ed      	b.n	800d9aa <__swhatbuf_r+0x1e>
 800d9ce:	2340      	movs	r3, #64	; 0x40
 800d9d0:	2000      	movs	r0, #0
 800d9d2:	6023      	str	r3, [r4, #0]
 800d9d4:	b016      	add	sp, #88	; 0x58
 800d9d6:	bd70      	pop	{r4, r5, r6, pc}
 800d9d8:	ffffe000 	.word	0xffffe000

0800d9dc <__smakebuf_r>:
 800d9dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9de:	2602      	movs	r6, #2
 800d9e0:	898b      	ldrh	r3, [r1, #12]
 800d9e2:	0005      	movs	r5, r0
 800d9e4:	000c      	movs	r4, r1
 800d9e6:	4233      	tst	r3, r6
 800d9e8:	d006      	beq.n	800d9f8 <__smakebuf_r+0x1c>
 800d9ea:	0023      	movs	r3, r4
 800d9ec:	3347      	adds	r3, #71	; 0x47
 800d9ee:	6023      	str	r3, [r4, #0]
 800d9f0:	6123      	str	r3, [r4, #16]
 800d9f2:	2301      	movs	r3, #1
 800d9f4:	6163      	str	r3, [r4, #20]
 800d9f6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800d9f8:	466a      	mov	r2, sp
 800d9fa:	ab01      	add	r3, sp, #4
 800d9fc:	f7ff ffc6 	bl	800d98c <__swhatbuf_r>
 800da00:	9900      	ldr	r1, [sp, #0]
 800da02:	0007      	movs	r7, r0
 800da04:	0028      	movs	r0, r5
 800da06:	f000 f8b7 	bl	800db78 <_malloc_r>
 800da0a:	2800      	cmp	r0, #0
 800da0c:	d108      	bne.n	800da20 <__smakebuf_r+0x44>
 800da0e:	220c      	movs	r2, #12
 800da10:	5ea3      	ldrsh	r3, [r4, r2]
 800da12:	059a      	lsls	r2, r3, #22
 800da14:	d4ef      	bmi.n	800d9f6 <__smakebuf_r+0x1a>
 800da16:	2203      	movs	r2, #3
 800da18:	4393      	bics	r3, r2
 800da1a:	431e      	orrs	r6, r3
 800da1c:	81a6      	strh	r6, [r4, #12]
 800da1e:	e7e4      	b.n	800d9ea <__smakebuf_r+0xe>
 800da20:	4b0f      	ldr	r3, [pc, #60]	; (800da60 <__smakebuf_r+0x84>)
 800da22:	62ab      	str	r3, [r5, #40]	; 0x28
 800da24:	2380      	movs	r3, #128	; 0x80
 800da26:	89a2      	ldrh	r2, [r4, #12]
 800da28:	6020      	str	r0, [r4, #0]
 800da2a:	4313      	orrs	r3, r2
 800da2c:	81a3      	strh	r3, [r4, #12]
 800da2e:	9b00      	ldr	r3, [sp, #0]
 800da30:	6120      	str	r0, [r4, #16]
 800da32:	6163      	str	r3, [r4, #20]
 800da34:	9b01      	ldr	r3, [sp, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d00d      	beq.n	800da56 <__smakebuf_r+0x7a>
 800da3a:	0028      	movs	r0, r5
 800da3c:	230e      	movs	r3, #14
 800da3e:	5ee1      	ldrsh	r1, [r4, r3]
 800da40:	f000 fec6 	bl	800e7d0 <_isatty_r>
 800da44:	2800      	cmp	r0, #0
 800da46:	d006      	beq.n	800da56 <__smakebuf_r+0x7a>
 800da48:	2203      	movs	r2, #3
 800da4a:	89a3      	ldrh	r3, [r4, #12]
 800da4c:	4393      	bics	r3, r2
 800da4e:	001a      	movs	r2, r3
 800da50:	2301      	movs	r3, #1
 800da52:	4313      	orrs	r3, r2
 800da54:	81a3      	strh	r3, [r4, #12]
 800da56:	89a0      	ldrh	r0, [r4, #12]
 800da58:	4307      	orrs	r7, r0
 800da5a:	81a7      	strh	r7, [r4, #12]
 800da5c:	e7cb      	b.n	800d9f6 <__smakebuf_r+0x1a>
 800da5e:	46c0      	nop			; (mov r8, r8)
 800da60:	0800d6e5 	.word	0x0800d6e5

0800da64 <malloc>:
 800da64:	b510      	push	{r4, lr}
 800da66:	4b03      	ldr	r3, [pc, #12]	; (800da74 <malloc+0x10>)
 800da68:	0001      	movs	r1, r0
 800da6a:	6818      	ldr	r0, [r3, #0]
 800da6c:	f000 f884 	bl	800db78 <_malloc_r>
 800da70:	bd10      	pop	{r4, pc}
 800da72:	46c0      	nop			; (mov r8, r8)
 800da74:	200001d4 	.word	0x200001d4

0800da78 <memchr>:
 800da78:	b2c9      	uxtb	r1, r1
 800da7a:	1882      	adds	r2, r0, r2
 800da7c:	4290      	cmp	r0, r2
 800da7e:	d101      	bne.n	800da84 <memchr+0xc>
 800da80:	2000      	movs	r0, #0
 800da82:	4770      	bx	lr
 800da84:	7803      	ldrb	r3, [r0, #0]
 800da86:	428b      	cmp	r3, r1
 800da88:	d0fb      	beq.n	800da82 <memchr+0xa>
 800da8a:	3001      	adds	r0, #1
 800da8c:	e7f6      	b.n	800da7c <memchr+0x4>

0800da8e <memcpy>:
 800da8e:	2300      	movs	r3, #0
 800da90:	b510      	push	{r4, lr}
 800da92:	429a      	cmp	r2, r3
 800da94:	d100      	bne.n	800da98 <memcpy+0xa>
 800da96:	bd10      	pop	{r4, pc}
 800da98:	5ccc      	ldrb	r4, [r1, r3]
 800da9a:	54c4      	strb	r4, [r0, r3]
 800da9c:	3301      	adds	r3, #1
 800da9e:	e7f8      	b.n	800da92 <memcpy+0x4>

0800daa0 <_free_r>:
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	0005      	movs	r5, r0
 800daa4:	2900      	cmp	r1, #0
 800daa6:	d010      	beq.n	800daca <_free_r+0x2a>
 800daa8:	1f0c      	subs	r4, r1, #4
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	da00      	bge.n	800dab2 <_free_r+0x12>
 800dab0:	18e4      	adds	r4, r4, r3
 800dab2:	0028      	movs	r0, r5
 800dab4:	f000 fe9e 	bl	800e7f4 <__malloc_lock>
 800dab8:	4a1d      	ldr	r2, [pc, #116]	; (800db30 <_free_r+0x90>)
 800daba:	6813      	ldr	r3, [r2, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d105      	bne.n	800dacc <_free_r+0x2c>
 800dac0:	6063      	str	r3, [r4, #4]
 800dac2:	6014      	str	r4, [r2, #0]
 800dac4:	0028      	movs	r0, r5
 800dac6:	f000 fe9d 	bl	800e804 <__malloc_unlock>
 800daca:	bd70      	pop	{r4, r5, r6, pc}
 800dacc:	42a3      	cmp	r3, r4
 800dace:	d908      	bls.n	800dae2 <_free_r+0x42>
 800dad0:	6821      	ldr	r1, [r4, #0]
 800dad2:	1860      	adds	r0, r4, r1
 800dad4:	4283      	cmp	r3, r0
 800dad6:	d1f3      	bne.n	800dac0 <_free_r+0x20>
 800dad8:	6818      	ldr	r0, [r3, #0]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	1841      	adds	r1, r0, r1
 800dade:	6021      	str	r1, [r4, #0]
 800dae0:	e7ee      	b.n	800dac0 <_free_r+0x20>
 800dae2:	001a      	movs	r2, r3
 800dae4:	685b      	ldr	r3, [r3, #4]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <_free_r+0x4e>
 800daea:	42a3      	cmp	r3, r4
 800daec:	d9f9      	bls.n	800dae2 <_free_r+0x42>
 800daee:	6811      	ldr	r1, [r2, #0]
 800daf0:	1850      	adds	r0, r2, r1
 800daf2:	42a0      	cmp	r0, r4
 800daf4:	d10b      	bne.n	800db0e <_free_r+0x6e>
 800daf6:	6820      	ldr	r0, [r4, #0]
 800daf8:	1809      	adds	r1, r1, r0
 800dafa:	1850      	adds	r0, r2, r1
 800dafc:	6011      	str	r1, [r2, #0]
 800dafe:	4283      	cmp	r3, r0
 800db00:	d1e0      	bne.n	800dac4 <_free_r+0x24>
 800db02:	6818      	ldr	r0, [r3, #0]
 800db04:	685b      	ldr	r3, [r3, #4]
 800db06:	1841      	adds	r1, r0, r1
 800db08:	6011      	str	r1, [r2, #0]
 800db0a:	6053      	str	r3, [r2, #4]
 800db0c:	e7da      	b.n	800dac4 <_free_r+0x24>
 800db0e:	42a0      	cmp	r0, r4
 800db10:	d902      	bls.n	800db18 <_free_r+0x78>
 800db12:	230c      	movs	r3, #12
 800db14:	602b      	str	r3, [r5, #0]
 800db16:	e7d5      	b.n	800dac4 <_free_r+0x24>
 800db18:	6821      	ldr	r1, [r4, #0]
 800db1a:	1860      	adds	r0, r4, r1
 800db1c:	4283      	cmp	r3, r0
 800db1e:	d103      	bne.n	800db28 <_free_r+0x88>
 800db20:	6818      	ldr	r0, [r3, #0]
 800db22:	685b      	ldr	r3, [r3, #4]
 800db24:	1841      	adds	r1, r0, r1
 800db26:	6021      	str	r1, [r4, #0]
 800db28:	6063      	str	r3, [r4, #4]
 800db2a:	6054      	str	r4, [r2, #4]
 800db2c:	e7ca      	b.n	800dac4 <_free_r+0x24>
 800db2e:	46c0      	nop			; (mov r8, r8)
 800db30:	20001450 	.word	0x20001450

0800db34 <sbrk_aligned>:
 800db34:	b570      	push	{r4, r5, r6, lr}
 800db36:	4e0f      	ldr	r6, [pc, #60]	; (800db74 <sbrk_aligned+0x40>)
 800db38:	000d      	movs	r5, r1
 800db3a:	6831      	ldr	r1, [r6, #0]
 800db3c:	0004      	movs	r4, r0
 800db3e:	2900      	cmp	r1, #0
 800db40:	d102      	bne.n	800db48 <sbrk_aligned+0x14>
 800db42:	f000 fc87 	bl	800e454 <_sbrk_r>
 800db46:	6030      	str	r0, [r6, #0]
 800db48:	0029      	movs	r1, r5
 800db4a:	0020      	movs	r0, r4
 800db4c:	f000 fc82 	bl	800e454 <_sbrk_r>
 800db50:	1c43      	adds	r3, r0, #1
 800db52:	d00a      	beq.n	800db6a <sbrk_aligned+0x36>
 800db54:	2303      	movs	r3, #3
 800db56:	1cc5      	adds	r5, r0, #3
 800db58:	439d      	bics	r5, r3
 800db5a:	42a8      	cmp	r0, r5
 800db5c:	d007      	beq.n	800db6e <sbrk_aligned+0x3a>
 800db5e:	1a29      	subs	r1, r5, r0
 800db60:	0020      	movs	r0, r4
 800db62:	f000 fc77 	bl	800e454 <_sbrk_r>
 800db66:	1c43      	adds	r3, r0, #1
 800db68:	d101      	bne.n	800db6e <sbrk_aligned+0x3a>
 800db6a:	2501      	movs	r5, #1
 800db6c:	426d      	negs	r5, r5
 800db6e:	0028      	movs	r0, r5
 800db70:	bd70      	pop	{r4, r5, r6, pc}
 800db72:	46c0      	nop			; (mov r8, r8)
 800db74:	20001454 	.word	0x20001454

0800db78 <_malloc_r>:
 800db78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db7a:	2203      	movs	r2, #3
 800db7c:	1ccb      	adds	r3, r1, #3
 800db7e:	4393      	bics	r3, r2
 800db80:	3308      	adds	r3, #8
 800db82:	0006      	movs	r6, r0
 800db84:	001f      	movs	r7, r3
 800db86:	2b0c      	cmp	r3, #12
 800db88:	d232      	bcs.n	800dbf0 <_malloc_r+0x78>
 800db8a:	270c      	movs	r7, #12
 800db8c:	42b9      	cmp	r1, r7
 800db8e:	d831      	bhi.n	800dbf4 <_malloc_r+0x7c>
 800db90:	0030      	movs	r0, r6
 800db92:	f000 fe2f 	bl	800e7f4 <__malloc_lock>
 800db96:	4d32      	ldr	r5, [pc, #200]	; (800dc60 <_malloc_r+0xe8>)
 800db98:	682b      	ldr	r3, [r5, #0]
 800db9a:	001c      	movs	r4, r3
 800db9c:	2c00      	cmp	r4, #0
 800db9e:	d12e      	bne.n	800dbfe <_malloc_r+0x86>
 800dba0:	0039      	movs	r1, r7
 800dba2:	0030      	movs	r0, r6
 800dba4:	f7ff ffc6 	bl	800db34 <sbrk_aligned>
 800dba8:	0004      	movs	r4, r0
 800dbaa:	1c43      	adds	r3, r0, #1
 800dbac:	d11e      	bne.n	800dbec <_malloc_r+0x74>
 800dbae:	682c      	ldr	r4, [r5, #0]
 800dbb0:	0025      	movs	r5, r4
 800dbb2:	2d00      	cmp	r5, #0
 800dbb4:	d14a      	bne.n	800dc4c <_malloc_r+0xd4>
 800dbb6:	6823      	ldr	r3, [r4, #0]
 800dbb8:	0029      	movs	r1, r5
 800dbba:	18e3      	adds	r3, r4, r3
 800dbbc:	0030      	movs	r0, r6
 800dbbe:	9301      	str	r3, [sp, #4]
 800dbc0:	f000 fc48 	bl	800e454 <_sbrk_r>
 800dbc4:	9b01      	ldr	r3, [sp, #4]
 800dbc6:	4283      	cmp	r3, r0
 800dbc8:	d143      	bne.n	800dc52 <_malloc_r+0xda>
 800dbca:	6823      	ldr	r3, [r4, #0]
 800dbcc:	3703      	adds	r7, #3
 800dbce:	1aff      	subs	r7, r7, r3
 800dbd0:	2303      	movs	r3, #3
 800dbd2:	439f      	bics	r7, r3
 800dbd4:	3708      	adds	r7, #8
 800dbd6:	2f0c      	cmp	r7, #12
 800dbd8:	d200      	bcs.n	800dbdc <_malloc_r+0x64>
 800dbda:	270c      	movs	r7, #12
 800dbdc:	0039      	movs	r1, r7
 800dbde:	0030      	movs	r0, r6
 800dbe0:	f7ff ffa8 	bl	800db34 <sbrk_aligned>
 800dbe4:	1c43      	adds	r3, r0, #1
 800dbe6:	d034      	beq.n	800dc52 <_malloc_r+0xda>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	19df      	adds	r7, r3, r7
 800dbec:	6027      	str	r7, [r4, #0]
 800dbee:	e013      	b.n	800dc18 <_malloc_r+0xa0>
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	dacb      	bge.n	800db8c <_malloc_r+0x14>
 800dbf4:	230c      	movs	r3, #12
 800dbf6:	2500      	movs	r5, #0
 800dbf8:	6033      	str	r3, [r6, #0]
 800dbfa:	0028      	movs	r0, r5
 800dbfc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dbfe:	6822      	ldr	r2, [r4, #0]
 800dc00:	1bd1      	subs	r1, r2, r7
 800dc02:	d420      	bmi.n	800dc46 <_malloc_r+0xce>
 800dc04:	290b      	cmp	r1, #11
 800dc06:	d917      	bls.n	800dc38 <_malloc_r+0xc0>
 800dc08:	19e2      	adds	r2, r4, r7
 800dc0a:	6027      	str	r7, [r4, #0]
 800dc0c:	42a3      	cmp	r3, r4
 800dc0e:	d111      	bne.n	800dc34 <_malloc_r+0xbc>
 800dc10:	602a      	str	r2, [r5, #0]
 800dc12:	6863      	ldr	r3, [r4, #4]
 800dc14:	6011      	str	r1, [r2, #0]
 800dc16:	6053      	str	r3, [r2, #4]
 800dc18:	0030      	movs	r0, r6
 800dc1a:	0025      	movs	r5, r4
 800dc1c:	f000 fdf2 	bl	800e804 <__malloc_unlock>
 800dc20:	2207      	movs	r2, #7
 800dc22:	350b      	adds	r5, #11
 800dc24:	1d23      	adds	r3, r4, #4
 800dc26:	4395      	bics	r5, r2
 800dc28:	1aea      	subs	r2, r5, r3
 800dc2a:	429d      	cmp	r5, r3
 800dc2c:	d0e5      	beq.n	800dbfa <_malloc_r+0x82>
 800dc2e:	1b5b      	subs	r3, r3, r5
 800dc30:	50a3      	str	r3, [r4, r2]
 800dc32:	e7e2      	b.n	800dbfa <_malloc_r+0x82>
 800dc34:	605a      	str	r2, [r3, #4]
 800dc36:	e7ec      	b.n	800dc12 <_malloc_r+0x9a>
 800dc38:	6862      	ldr	r2, [r4, #4]
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	d101      	bne.n	800dc42 <_malloc_r+0xca>
 800dc3e:	602a      	str	r2, [r5, #0]
 800dc40:	e7ea      	b.n	800dc18 <_malloc_r+0xa0>
 800dc42:	605a      	str	r2, [r3, #4]
 800dc44:	e7e8      	b.n	800dc18 <_malloc_r+0xa0>
 800dc46:	0023      	movs	r3, r4
 800dc48:	6864      	ldr	r4, [r4, #4]
 800dc4a:	e7a7      	b.n	800db9c <_malloc_r+0x24>
 800dc4c:	002c      	movs	r4, r5
 800dc4e:	686d      	ldr	r5, [r5, #4]
 800dc50:	e7af      	b.n	800dbb2 <_malloc_r+0x3a>
 800dc52:	230c      	movs	r3, #12
 800dc54:	0030      	movs	r0, r6
 800dc56:	6033      	str	r3, [r6, #0]
 800dc58:	f000 fdd4 	bl	800e804 <__malloc_unlock>
 800dc5c:	e7cd      	b.n	800dbfa <_malloc_r+0x82>
 800dc5e:	46c0      	nop			; (mov r8, r8)
 800dc60:	20001450 	.word	0x20001450

0800dc64 <_realloc_r>:
 800dc64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc66:	0007      	movs	r7, r0
 800dc68:	000e      	movs	r6, r1
 800dc6a:	0014      	movs	r4, r2
 800dc6c:	2900      	cmp	r1, #0
 800dc6e:	d105      	bne.n	800dc7c <_realloc_r+0x18>
 800dc70:	0011      	movs	r1, r2
 800dc72:	f7ff ff81 	bl	800db78 <_malloc_r>
 800dc76:	0005      	movs	r5, r0
 800dc78:	0028      	movs	r0, r5
 800dc7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc7c:	2a00      	cmp	r2, #0
 800dc7e:	d103      	bne.n	800dc88 <_realloc_r+0x24>
 800dc80:	f7ff ff0e 	bl	800daa0 <_free_r>
 800dc84:	0025      	movs	r5, r4
 800dc86:	e7f7      	b.n	800dc78 <_realloc_r+0x14>
 800dc88:	f000 fdc4 	bl	800e814 <_malloc_usable_size_r>
 800dc8c:	9001      	str	r0, [sp, #4]
 800dc8e:	4284      	cmp	r4, r0
 800dc90:	d803      	bhi.n	800dc9a <_realloc_r+0x36>
 800dc92:	0035      	movs	r5, r6
 800dc94:	0843      	lsrs	r3, r0, #1
 800dc96:	42a3      	cmp	r3, r4
 800dc98:	d3ee      	bcc.n	800dc78 <_realloc_r+0x14>
 800dc9a:	0021      	movs	r1, r4
 800dc9c:	0038      	movs	r0, r7
 800dc9e:	f7ff ff6b 	bl	800db78 <_malloc_r>
 800dca2:	1e05      	subs	r5, r0, #0
 800dca4:	d0e8      	beq.n	800dc78 <_realloc_r+0x14>
 800dca6:	9b01      	ldr	r3, [sp, #4]
 800dca8:	0022      	movs	r2, r4
 800dcaa:	429c      	cmp	r4, r3
 800dcac:	d900      	bls.n	800dcb0 <_realloc_r+0x4c>
 800dcae:	001a      	movs	r2, r3
 800dcb0:	0031      	movs	r1, r6
 800dcb2:	0028      	movs	r0, r5
 800dcb4:	f7ff feeb 	bl	800da8e <memcpy>
 800dcb8:	0031      	movs	r1, r6
 800dcba:	0038      	movs	r0, r7
 800dcbc:	f7ff fef0 	bl	800daa0 <_free_r>
 800dcc0:	e7da      	b.n	800dc78 <_realloc_r+0x14>

0800dcc2 <_sungetc_r>:
 800dcc2:	b570      	push	{r4, r5, r6, lr}
 800dcc4:	0014      	movs	r4, r2
 800dcc6:	1c4b      	adds	r3, r1, #1
 800dcc8:	d103      	bne.n	800dcd2 <_sungetc_r+0x10>
 800dcca:	2501      	movs	r5, #1
 800dccc:	426d      	negs	r5, r5
 800dcce:	0028      	movs	r0, r5
 800dcd0:	bd70      	pop	{r4, r5, r6, pc}
 800dcd2:	8993      	ldrh	r3, [r2, #12]
 800dcd4:	2220      	movs	r2, #32
 800dcd6:	4393      	bics	r3, r2
 800dcd8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dcda:	81a3      	strh	r3, [r4, #12]
 800dcdc:	b2ce      	uxtb	r6, r1
 800dcde:	6863      	ldr	r3, [r4, #4]
 800dce0:	b2cd      	uxtb	r5, r1
 800dce2:	2a00      	cmp	r2, #0
 800dce4:	d010      	beq.n	800dd08 <_sungetc_r+0x46>
 800dce6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800dce8:	429a      	cmp	r2, r3
 800dcea:	dd07      	ble.n	800dcfc <_sungetc_r+0x3a>
 800dcec:	6823      	ldr	r3, [r4, #0]
 800dcee:	3b01      	subs	r3, #1
 800dcf0:	6023      	str	r3, [r4, #0]
 800dcf2:	701e      	strb	r6, [r3, #0]
 800dcf4:	6863      	ldr	r3, [r4, #4]
 800dcf6:	3301      	adds	r3, #1
 800dcf8:	6063      	str	r3, [r4, #4]
 800dcfa:	e7e8      	b.n	800dcce <_sungetc_r+0xc>
 800dcfc:	0021      	movs	r1, r4
 800dcfe:	f000 fd17 	bl	800e730 <__submore>
 800dd02:	2800      	cmp	r0, #0
 800dd04:	d0f2      	beq.n	800dcec <_sungetc_r+0x2a>
 800dd06:	e7e0      	b.n	800dcca <_sungetc_r+0x8>
 800dd08:	6921      	ldr	r1, [r4, #16]
 800dd0a:	6822      	ldr	r2, [r4, #0]
 800dd0c:	2900      	cmp	r1, #0
 800dd0e:	d007      	beq.n	800dd20 <_sungetc_r+0x5e>
 800dd10:	4291      	cmp	r1, r2
 800dd12:	d205      	bcs.n	800dd20 <_sungetc_r+0x5e>
 800dd14:	1e51      	subs	r1, r2, #1
 800dd16:	7808      	ldrb	r0, [r1, #0]
 800dd18:	42a8      	cmp	r0, r5
 800dd1a:	d101      	bne.n	800dd20 <_sungetc_r+0x5e>
 800dd1c:	6021      	str	r1, [r4, #0]
 800dd1e:	e7ea      	b.n	800dcf6 <_sungetc_r+0x34>
 800dd20:	6423      	str	r3, [r4, #64]	; 0x40
 800dd22:	0023      	movs	r3, r4
 800dd24:	3344      	adds	r3, #68	; 0x44
 800dd26:	6363      	str	r3, [r4, #52]	; 0x34
 800dd28:	2303      	movs	r3, #3
 800dd2a:	63a3      	str	r3, [r4, #56]	; 0x38
 800dd2c:	0023      	movs	r3, r4
 800dd2e:	3346      	adds	r3, #70	; 0x46
 800dd30:	63e2      	str	r2, [r4, #60]	; 0x3c
 800dd32:	701e      	strb	r6, [r3, #0]
 800dd34:	6023      	str	r3, [r4, #0]
 800dd36:	2301      	movs	r3, #1
 800dd38:	e7de      	b.n	800dcf8 <_sungetc_r+0x36>

0800dd3a <__ssrefill_r>:
 800dd3a:	b510      	push	{r4, lr}
 800dd3c:	000c      	movs	r4, r1
 800dd3e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800dd40:	2900      	cmp	r1, #0
 800dd42:	d00e      	beq.n	800dd62 <__ssrefill_r+0x28>
 800dd44:	0023      	movs	r3, r4
 800dd46:	3344      	adds	r3, #68	; 0x44
 800dd48:	4299      	cmp	r1, r3
 800dd4a:	d001      	beq.n	800dd50 <__ssrefill_r+0x16>
 800dd4c:	f7ff fea8 	bl	800daa0 <_free_r>
 800dd50:	2000      	movs	r0, #0
 800dd52:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dd54:	6360      	str	r0, [r4, #52]	; 0x34
 800dd56:	6063      	str	r3, [r4, #4]
 800dd58:	4283      	cmp	r3, r0
 800dd5a:	d002      	beq.n	800dd62 <__ssrefill_r+0x28>
 800dd5c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800dd5e:	6023      	str	r3, [r4, #0]
 800dd60:	bd10      	pop	{r4, pc}
 800dd62:	6923      	ldr	r3, [r4, #16]
 800dd64:	2001      	movs	r0, #1
 800dd66:	6023      	str	r3, [r4, #0]
 800dd68:	2300      	movs	r3, #0
 800dd6a:	89a2      	ldrh	r2, [r4, #12]
 800dd6c:	6063      	str	r3, [r4, #4]
 800dd6e:	3320      	adds	r3, #32
 800dd70:	4313      	orrs	r3, r2
 800dd72:	81a3      	strh	r3, [r4, #12]
 800dd74:	4240      	negs	r0, r0
 800dd76:	e7f3      	b.n	800dd60 <__ssrefill_r+0x26>

0800dd78 <__ssvfiscanf_r>:
 800dd78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd7a:	4cb8      	ldr	r4, [pc, #736]	; (800e05c <__ssvfiscanf_r+0x2e4>)
 800dd7c:	0006      	movs	r6, r0
 800dd7e:	44a5      	add	sp, r4
 800dd80:	000c      	movs	r4, r1
 800dd82:	2100      	movs	r1, #0
 800dd84:	9146      	str	r1, [sp, #280]	; 0x118
 800dd86:	9147      	str	r1, [sp, #284]	; 0x11c
 800dd88:	a903      	add	r1, sp, #12
 800dd8a:	9148      	str	r1, [sp, #288]	; 0x120
 800dd8c:	21be      	movs	r1, #190	; 0xbe
 800dd8e:	48b4      	ldr	r0, [pc, #720]	; (800e060 <__ssvfiscanf_r+0x2e8>)
 800dd90:	0049      	lsls	r1, r1, #1
 800dd92:	ad43      	add	r5, sp, #268	; 0x10c
 800dd94:	5068      	str	r0, [r5, r1]
 800dd96:	25c0      	movs	r5, #192	; 0xc0
 800dd98:	49b2      	ldr	r1, [pc, #712]	; (800e064 <__ssvfiscanf_r+0x2ec>)
 800dd9a:	006d      	lsls	r5, r5, #1
 800dd9c:	a843      	add	r0, sp, #268	; 0x10c
 800dd9e:	5141      	str	r1, [r0, r5]
 800dda0:	9302      	str	r3, [sp, #8]
 800dda2:	7813      	ldrb	r3, [r2, #0]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d100      	bne.n	800ddaa <__ssvfiscanf_r+0x32>
 800dda8:	e155      	b.n	800e056 <__ssvfiscanf_r+0x2de>
 800ddaa:	49af      	ldr	r1, [pc, #700]	; (800e068 <__ssvfiscanf_r+0x2f0>)
 800ddac:	2508      	movs	r5, #8
 800ddae:	5cc8      	ldrb	r0, [r1, r3]
 800ddb0:	2108      	movs	r1, #8
 800ddb2:	1c57      	adds	r7, r2, #1
 800ddb4:	4001      	ands	r1, r0
 800ddb6:	4228      	tst	r0, r5
 800ddb8:	d020      	beq.n	800ddfc <__ssvfiscanf_r+0x84>
 800ddba:	6863      	ldr	r3, [r4, #4]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	dd12      	ble.n	800dde6 <__ssvfiscanf_r+0x6e>
 800ddc0:	6823      	ldr	r3, [r4, #0]
 800ddc2:	49a9      	ldr	r1, [pc, #676]	; (800e068 <__ssvfiscanf_r+0x2f0>)
 800ddc4:	781a      	ldrb	r2, [r3, #0]
 800ddc6:	5c8a      	ldrb	r2, [r1, r2]
 800ddc8:	2108      	movs	r1, #8
 800ddca:	420a      	tst	r2, r1
 800ddcc:	d101      	bne.n	800ddd2 <__ssvfiscanf_r+0x5a>
 800ddce:	003a      	movs	r2, r7
 800ddd0:	e7e7      	b.n	800dda2 <__ssvfiscanf_r+0x2a>
 800ddd2:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	9200      	str	r2, [sp, #0]
 800ddd8:	3201      	adds	r2, #1
 800ddda:	9247      	str	r2, [sp, #284]	; 0x11c
 800dddc:	6862      	ldr	r2, [r4, #4]
 800ddde:	6023      	str	r3, [r4, #0]
 800dde0:	3a01      	subs	r2, #1
 800dde2:	6062      	str	r2, [r4, #4]
 800dde4:	e7e9      	b.n	800ddba <__ssvfiscanf_r+0x42>
 800dde6:	22c0      	movs	r2, #192	; 0xc0
 800dde8:	ab43      	add	r3, sp, #268	; 0x10c
 800ddea:	0052      	lsls	r2, r2, #1
 800ddec:	589b      	ldr	r3, [r3, r2]
 800ddee:	0021      	movs	r1, r4
 800ddf0:	0030      	movs	r0, r6
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	4798      	blx	r3
 800ddf6:	2800      	cmp	r0, #0
 800ddf8:	d0e2      	beq.n	800ddc0 <__ssvfiscanf_r+0x48>
 800ddfa:	e7e8      	b.n	800ddce <__ssvfiscanf_r+0x56>
 800ddfc:	001d      	movs	r5, r3
 800ddfe:	2b25      	cmp	r3, #37	; 0x25
 800de00:	d164      	bne.n	800decc <__ssvfiscanf_r+0x154>
 800de02:	9145      	str	r1, [sp, #276]	; 0x114
 800de04:	9143      	str	r1, [sp, #268]	; 0x10c
 800de06:	7853      	ldrb	r3, [r2, #1]
 800de08:	2b2a      	cmp	r3, #42	; 0x2a
 800de0a:	d102      	bne.n	800de12 <__ssvfiscanf_r+0x9a>
 800de0c:	3b1a      	subs	r3, #26
 800de0e:	9343      	str	r3, [sp, #268]	; 0x10c
 800de10:	1c97      	adds	r7, r2, #2
 800de12:	003d      	movs	r5, r7
 800de14:	220a      	movs	r2, #10
 800de16:	7829      	ldrb	r1, [r5, #0]
 800de18:	1c6b      	adds	r3, r5, #1
 800de1a:	9300      	str	r3, [sp, #0]
 800de1c:	000b      	movs	r3, r1
 800de1e:	3b30      	subs	r3, #48	; 0x30
 800de20:	2b09      	cmp	r3, #9
 800de22:	d91f      	bls.n	800de64 <__ssvfiscanf_r+0xec>
 800de24:	4f91      	ldr	r7, [pc, #580]	; (800e06c <__ssvfiscanf_r+0x2f4>)
 800de26:	2203      	movs	r2, #3
 800de28:	0038      	movs	r0, r7
 800de2a:	f7ff fe25 	bl	800da78 <memchr>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d007      	beq.n	800de42 <__ssvfiscanf_r+0xca>
 800de32:	2301      	movs	r3, #1
 800de34:	1bc0      	subs	r0, r0, r7
 800de36:	4083      	lsls	r3, r0
 800de38:	9a43      	ldr	r2, [sp, #268]	; 0x10c
 800de3a:	9d00      	ldr	r5, [sp, #0]
 800de3c:	4313      	orrs	r3, r2
 800de3e:	9201      	str	r2, [sp, #4]
 800de40:	9343      	str	r3, [sp, #268]	; 0x10c
 800de42:	1c6f      	adds	r7, r5, #1
 800de44:	782d      	ldrb	r5, [r5, #0]
 800de46:	2d78      	cmp	r5, #120	; 0x78
 800de48:	d807      	bhi.n	800de5a <__ssvfiscanf_r+0xe2>
 800de4a:	2d57      	cmp	r5, #87	; 0x57
 800de4c:	d812      	bhi.n	800de74 <__ssvfiscanf_r+0xfc>
 800de4e:	2d25      	cmp	r5, #37	; 0x25
 800de50:	d03c      	beq.n	800decc <__ssvfiscanf_r+0x154>
 800de52:	d836      	bhi.n	800dec2 <__ssvfiscanf_r+0x14a>
 800de54:	2d00      	cmp	r5, #0
 800de56:	d100      	bne.n	800de5a <__ssvfiscanf_r+0xe2>
 800de58:	e0fa      	b.n	800e050 <__ssvfiscanf_r+0x2d8>
 800de5a:	2303      	movs	r3, #3
 800de5c:	9349      	str	r3, [sp, #292]	; 0x124
 800de5e:	3307      	adds	r3, #7
 800de60:	9344      	str	r3, [sp, #272]	; 0x110
 800de62:	e06d      	b.n	800df40 <__ssvfiscanf_r+0x1c8>
 800de64:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800de66:	9d00      	ldr	r5, [sp, #0]
 800de68:	9301      	str	r3, [sp, #4]
 800de6a:	4353      	muls	r3, r2
 800de6c:	3b30      	subs	r3, #48	; 0x30
 800de6e:	185b      	adds	r3, r3, r1
 800de70:	9345      	str	r3, [sp, #276]	; 0x114
 800de72:	e7d0      	b.n	800de16 <__ssvfiscanf_r+0x9e>
 800de74:	0028      	movs	r0, r5
 800de76:	3858      	subs	r0, #88	; 0x58
 800de78:	2820      	cmp	r0, #32
 800de7a:	d8ee      	bhi.n	800de5a <__ssvfiscanf_r+0xe2>
 800de7c:	f7f2 f956 	bl	800012c <__gnu_thumb1_case_shi>
 800de80:	ffed0051 	.word	0xffed0051
 800de84:	0087ffed 	.word	0x0087ffed
 800de88:	ffedffed 	.word	0xffedffed
 800de8c:	ffedffed 	.word	0xffedffed
 800de90:	ffedffed 	.word	0xffedffed
 800de94:	0095ffed 	.word	0x0095ffed
 800de98:	0024007d 	.word	0x0024007d
 800de9c:	00240024 	.word	0x00240024
 800dea0:	007fffed 	.word	0x007fffed
 800dea4:	ffedffed 	.word	0xffedffed
 800dea8:	ffedffed 	.word	0xffedffed
 800deac:	0083009f 	.word	0x0083009f
 800deb0:	ffed004b 	.word	0xffed004b
 800deb4:	009dffed 	.word	0x009dffed
 800deb8:	007dffed 	.word	0x007dffed
 800debc:	ffedffed 	.word	0xffedffed
 800dec0:	0051      	.short	0x0051
 800dec2:	3d45      	subs	r5, #69	; 0x45
 800dec4:	2d02      	cmp	r5, #2
 800dec6:	d8c8      	bhi.n	800de5a <__ssvfiscanf_r+0xe2>
 800dec8:	2305      	movs	r3, #5
 800deca:	e06c      	b.n	800dfa6 <__ssvfiscanf_r+0x22e>
 800decc:	6863      	ldr	r3, [r4, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	dd0e      	ble.n	800def0 <__ssvfiscanf_r+0x178>
 800ded2:	6823      	ldr	r3, [r4, #0]
 800ded4:	781a      	ldrb	r2, [r3, #0]
 800ded6:	42aa      	cmp	r2, r5
 800ded8:	d000      	beq.n	800dedc <__ssvfiscanf_r+0x164>
 800deda:	e0bc      	b.n	800e056 <__ssvfiscanf_r+0x2de>
 800dedc:	3301      	adds	r3, #1
 800dede:	6862      	ldr	r2, [r4, #4]
 800dee0:	6023      	str	r3, [r4, #0]
 800dee2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800dee4:	3a01      	subs	r2, #1
 800dee6:	9300      	str	r3, [sp, #0]
 800dee8:	3301      	adds	r3, #1
 800deea:	6062      	str	r2, [r4, #4]
 800deec:	9347      	str	r3, [sp, #284]	; 0x11c
 800deee:	e76e      	b.n	800ddce <__ssvfiscanf_r+0x56>
 800def0:	22c0      	movs	r2, #192	; 0xc0
 800def2:	ab43      	add	r3, sp, #268	; 0x10c
 800def4:	0052      	lsls	r2, r2, #1
 800def6:	589b      	ldr	r3, [r3, r2]
 800def8:	0021      	movs	r1, r4
 800defa:	0030      	movs	r0, r6
 800defc:	9300      	str	r3, [sp, #0]
 800defe:	4798      	blx	r3
 800df00:	2800      	cmp	r0, #0
 800df02:	d0e6      	beq.n	800ded2 <__ssvfiscanf_r+0x15a>
 800df04:	9846      	ldr	r0, [sp, #280]	; 0x118
 800df06:	2800      	cmp	r0, #0
 800df08:	d000      	beq.n	800df0c <__ssvfiscanf_r+0x194>
 800df0a:	e09d      	b.n	800e048 <__ssvfiscanf_r+0x2d0>
 800df0c:	3801      	subs	r0, #1
 800df0e:	23a5      	movs	r3, #165	; 0xa5
 800df10:	009b      	lsls	r3, r3, #2
 800df12:	449d      	add	sp, r3
 800df14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df16:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	2320      	movs	r3, #32
 800df1c:	9a00      	ldr	r2, [sp, #0]
 800df1e:	4313      	orrs	r3, r2
 800df20:	9343      	str	r3, [sp, #268]	; 0x10c
 800df22:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800df24:	9300      	str	r3, [sp, #0]
 800df26:	2380      	movs	r3, #128	; 0x80
 800df28:	9a00      	ldr	r2, [sp, #0]
 800df2a:	009b      	lsls	r3, r3, #2
 800df2c:	4313      	orrs	r3, r2
 800df2e:	9343      	str	r3, [sp, #268]	; 0x10c
 800df30:	2310      	movs	r3, #16
 800df32:	9344      	str	r3, [sp, #272]	; 0x110
 800df34:	236e      	movs	r3, #110	; 0x6e
 800df36:	42ab      	cmp	r3, r5
 800df38:	41ad      	sbcs	r5, r5
 800df3a:	426d      	negs	r5, r5
 800df3c:	3503      	adds	r5, #3
 800df3e:	9549      	str	r5, [sp, #292]	; 0x124
 800df40:	6863      	ldr	r3, [r4, #4]
 800df42:	2b00      	cmp	r3, #0
 800df44:	dd4a      	ble.n	800dfdc <__ssvfiscanf_r+0x264>
 800df46:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800df48:	9300      	str	r3, [sp, #0]
 800df4a:	065b      	lsls	r3, r3, #25
 800df4c:	d406      	bmi.n	800df5c <__ssvfiscanf_r+0x1e4>
 800df4e:	6823      	ldr	r3, [r4, #0]
 800df50:	4945      	ldr	r1, [pc, #276]	; (800e068 <__ssvfiscanf_r+0x2f0>)
 800df52:	781a      	ldrb	r2, [r3, #0]
 800df54:	5c8a      	ldrb	r2, [r1, r2]
 800df56:	2108      	movs	r1, #8
 800df58:	420a      	tst	r2, r1
 800df5a:	d14a      	bne.n	800dff2 <__ssvfiscanf_r+0x27a>
 800df5c:	9b49      	ldr	r3, [sp, #292]	; 0x124
 800df5e:	2b02      	cmp	r3, #2
 800df60:	dc5e      	bgt.n	800e020 <__ssvfiscanf_r+0x2a8>
 800df62:	0022      	movs	r2, r4
 800df64:	0030      	movs	r0, r6
 800df66:	ab02      	add	r3, sp, #8
 800df68:	a943      	add	r1, sp, #268	; 0x10c
 800df6a:	f000 f883 	bl	800e074 <_scanf_chars>
 800df6e:	2801      	cmp	r0, #1
 800df70:	d071      	beq.n	800e056 <__ssvfiscanf_r+0x2de>
 800df72:	2802      	cmp	r0, #2
 800df74:	d000      	beq.n	800df78 <__ssvfiscanf_r+0x200>
 800df76:	e72a      	b.n	800ddce <__ssvfiscanf_r+0x56>
 800df78:	e7c4      	b.n	800df04 <__ssvfiscanf_r+0x18c>
 800df7a:	230a      	movs	r3, #10
 800df7c:	e7d9      	b.n	800df32 <__ssvfiscanf_r+0x1ba>
 800df7e:	2300      	movs	r3, #0
 800df80:	2503      	movs	r5, #3
 800df82:	9344      	str	r3, [sp, #272]	; 0x110
 800df84:	e7db      	b.n	800df3e <__ssvfiscanf_r+0x1c6>
 800df86:	2308      	movs	r3, #8
 800df88:	2504      	movs	r5, #4
 800df8a:	9344      	str	r3, [sp, #272]	; 0x110
 800df8c:	e7d7      	b.n	800df3e <__ssvfiscanf_r+0x1c6>
 800df8e:	0039      	movs	r1, r7
 800df90:	a803      	add	r0, sp, #12
 800df92:	f000 fa71 	bl	800e478 <__sccl>
 800df96:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800df98:	0007      	movs	r7, r0
 800df9a:	9300      	str	r3, [sp, #0]
 800df9c:	2340      	movs	r3, #64	; 0x40
 800df9e:	9a00      	ldr	r2, [sp, #0]
 800dfa0:	4313      	orrs	r3, r2
 800dfa2:	9343      	str	r3, [sp, #268]	; 0x10c
 800dfa4:	2301      	movs	r3, #1
 800dfa6:	9349      	str	r3, [sp, #292]	; 0x124
 800dfa8:	e7ca      	b.n	800df40 <__ssvfiscanf_r+0x1c8>
 800dfaa:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800dfac:	9300      	str	r3, [sp, #0]
 800dfae:	2340      	movs	r3, #64	; 0x40
 800dfb0:	9a00      	ldr	r2, [sp, #0]
 800dfb2:	4313      	orrs	r3, r2
 800dfb4:	9343      	str	r3, [sp, #268]	; 0x10c
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	e7f5      	b.n	800dfa6 <__ssvfiscanf_r+0x22e>
 800dfba:	2302      	movs	r3, #2
 800dfbc:	e7f3      	b.n	800dfa6 <__ssvfiscanf_r+0x22e>
 800dfbe:	9843      	ldr	r0, [sp, #268]	; 0x10c
 800dfc0:	06c3      	lsls	r3, r0, #27
 800dfc2:	d500      	bpl.n	800dfc6 <__ssvfiscanf_r+0x24e>
 800dfc4:	e703      	b.n	800ddce <__ssvfiscanf_r+0x56>
 800dfc6:	9b02      	ldr	r3, [sp, #8]
 800dfc8:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800dfca:	1d19      	adds	r1, r3, #4
 800dfcc:	9102      	str	r1, [sp, #8]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	07c5      	lsls	r5, r0, #31
 800dfd2:	d501      	bpl.n	800dfd8 <__ssvfiscanf_r+0x260>
 800dfd4:	801a      	strh	r2, [r3, #0]
 800dfd6:	e6fa      	b.n	800ddce <__ssvfiscanf_r+0x56>
 800dfd8:	601a      	str	r2, [r3, #0]
 800dfda:	e6f8      	b.n	800ddce <__ssvfiscanf_r+0x56>
 800dfdc:	22c0      	movs	r2, #192	; 0xc0
 800dfde:	ab43      	add	r3, sp, #268	; 0x10c
 800dfe0:	0052      	lsls	r2, r2, #1
 800dfe2:	589b      	ldr	r3, [r3, r2]
 800dfe4:	0021      	movs	r1, r4
 800dfe6:	0030      	movs	r0, r6
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	4798      	blx	r3
 800dfec:	2800      	cmp	r0, #0
 800dfee:	d0aa      	beq.n	800df46 <__ssvfiscanf_r+0x1ce>
 800dff0:	e788      	b.n	800df04 <__ssvfiscanf_r+0x18c>
 800dff2:	9a47      	ldr	r2, [sp, #284]	; 0x11c
 800dff4:	9200      	str	r2, [sp, #0]
 800dff6:	3201      	adds	r2, #1
 800dff8:	9247      	str	r2, [sp, #284]	; 0x11c
 800dffa:	6862      	ldr	r2, [r4, #4]
 800dffc:	3a01      	subs	r2, #1
 800dffe:	6062      	str	r2, [r4, #4]
 800e000:	2a00      	cmp	r2, #0
 800e002:	dd02      	ble.n	800e00a <__ssvfiscanf_r+0x292>
 800e004:	3301      	adds	r3, #1
 800e006:	6023      	str	r3, [r4, #0]
 800e008:	e7a1      	b.n	800df4e <__ssvfiscanf_r+0x1d6>
 800e00a:	22c0      	movs	r2, #192	; 0xc0
 800e00c:	ab43      	add	r3, sp, #268	; 0x10c
 800e00e:	0052      	lsls	r2, r2, #1
 800e010:	589b      	ldr	r3, [r3, r2]
 800e012:	0021      	movs	r1, r4
 800e014:	0030      	movs	r0, r6
 800e016:	9300      	str	r3, [sp, #0]
 800e018:	4798      	blx	r3
 800e01a:	2800      	cmp	r0, #0
 800e01c:	d097      	beq.n	800df4e <__ssvfiscanf_r+0x1d6>
 800e01e:	e771      	b.n	800df04 <__ssvfiscanf_r+0x18c>
 800e020:	2b04      	cmp	r3, #4
 800e022:	dc06      	bgt.n	800e032 <__ssvfiscanf_r+0x2ba>
 800e024:	0022      	movs	r2, r4
 800e026:	0030      	movs	r0, r6
 800e028:	ab02      	add	r3, sp, #8
 800e02a:	a943      	add	r1, sp, #268	; 0x10c
 800e02c:	f000 f880 	bl	800e130 <_scanf_i>
 800e030:	e79d      	b.n	800df6e <__ssvfiscanf_r+0x1f6>
 800e032:	4b0f      	ldr	r3, [pc, #60]	; (800e070 <__ssvfiscanf_r+0x2f8>)
 800e034:	2b00      	cmp	r3, #0
 800e036:	d100      	bne.n	800e03a <__ssvfiscanf_r+0x2c2>
 800e038:	e6c9      	b.n	800ddce <__ssvfiscanf_r+0x56>
 800e03a:	0022      	movs	r2, r4
 800e03c:	0030      	movs	r0, r6
 800e03e:	ab02      	add	r3, sp, #8
 800e040:	a943      	add	r1, sp, #268	; 0x10c
 800e042:	e000      	b.n	800e046 <__ssvfiscanf_r+0x2ce>
 800e044:	bf00      	nop
 800e046:	e792      	b.n	800df6e <__ssvfiscanf_r+0x1f6>
 800e048:	89a3      	ldrh	r3, [r4, #12]
 800e04a:	065b      	lsls	r3, r3, #25
 800e04c:	d400      	bmi.n	800e050 <__ssvfiscanf_r+0x2d8>
 800e04e:	e75e      	b.n	800df0e <__ssvfiscanf_r+0x196>
 800e050:	2001      	movs	r0, #1
 800e052:	4240      	negs	r0, r0
 800e054:	e75b      	b.n	800df0e <__ssvfiscanf_r+0x196>
 800e056:	9846      	ldr	r0, [sp, #280]	; 0x118
 800e058:	e759      	b.n	800df0e <__ssvfiscanf_r+0x196>
 800e05a:	46c0      	nop			; (mov r8, r8)
 800e05c:	fffffd6c 	.word	0xfffffd6c
 800e060:	0800dcc3 	.word	0x0800dcc3
 800e064:	0800dd3b 	.word	0x0800dd3b
 800e068:	0800f058 	.word	0x0800f058
 800e06c:	0800efae 	.word	0x0800efae
 800e070:	00000000 	.word	0x00000000

0800e074 <_scanf_chars>:
 800e074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e076:	0015      	movs	r5, r2
 800e078:	688a      	ldr	r2, [r1, #8]
 800e07a:	000c      	movs	r4, r1
 800e07c:	9001      	str	r0, [sp, #4]
 800e07e:	2a00      	cmp	r2, #0
 800e080:	d105      	bne.n	800e08e <_scanf_chars+0x1a>
 800e082:	6989      	ldr	r1, [r1, #24]
 800e084:	3201      	adds	r2, #1
 800e086:	2900      	cmp	r1, #0
 800e088:	d000      	beq.n	800e08c <_scanf_chars+0x18>
 800e08a:	3a02      	subs	r2, #2
 800e08c:	60a2      	str	r2, [r4, #8]
 800e08e:	6822      	ldr	r2, [r4, #0]
 800e090:	06d2      	lsls	r2, r2, #27
 800e092:	d403      	bmi.n	800e09c <_scanf_chars+0x28>
 800e094:	681a      	ldr	r2, [r3, #0]
 800e096:	1d11      	adds	r1, r2, #4
 800e098:	6019      	str	r1, [r3, #0]
 800e09a:	6817      	ldr	r7, [r2, #0]
 800e09c:	2600      	movs	r6, #0
 800e09e:	69a0      	ldr	r0, [r4, #24]
 800e0a0:	2800      	cmp	r0, #0
 800e0a2:	d013      	beq.n	800e0cc <_scanf_chars+0x58>
 800e0a4:	2801      	cmp	r0, #1
 800e0a6:	d108      	bne.n	800e0ba <_scanf_chars+0x46>
 800e0a8:	682b      	ldr	r3, [r5, #0]
 800e0aa:	6962      	ldr	r2, [r4, #20]
 800e0ac:	781b      	ldrb	r3, [r3, #0]
 800e0ae:	5cd3      	ldrb	r3, [r2, r3]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10b      	bne.n	800e0cc <_scanf_chars+0x58>
 800e0b4:	2e00      	cmp	r6, #0
 800e0b6:	d038      	beq.n	800e12a <_scanf_chars+0xb6>
 800e0b8:	e026      	b.n	800e108 <_scanf_chars+0x94>
 800e0ba:	2802      	cmp	r0, #2
 800e0bc:	d124      	bne.n	800e108 <_scanf_chars+0x94>
 800e0be:	682b      	ldr	r3, [r5, #0]
 800e0c0:	4a1a      	ldr	r2, [pc, #104]	; (800e12c <_scanf_chars+0xb8>)
 800e0c2:	781b      	ldrb	r3, [r3, #0]
 800e0c4:	5cd3      	ldrb	r3, [r2, r3]
 800e0c6:	2208      	movs	r2, #8
 800e0c8:	4213      	tst	r3, r2
 800e0ca:	d11d      	bne.n	800e108 <_scanf_chars+0x94>
 800e0cc:	2210      	movs	r2, #16
 800e0ce:	6823      	ldr	r3, [r4, #0]
 800e0d0:	3601      	adds	r6, #1
 800e0d2:	4213      	tst	r3, r2
 800e0d4:	d103      	bne.n	800e0de <_scanf_chars+0x6a>
 800e0d6:	682b      	ldr	r3, [r5, #0]
 800e0d8:	781b      	ldrb	r3, [r3, #0]
 800e0da:	703b      	strb	r3, [r7, #0]
 800e0dc:	3701      	adds	r7, #1
 800e0de:	682a      	ldr	r2, [r5, #0]
 800e0e0:	686b      	ldr	r3, [r5, #4]
 800e0e2:	3201      	adds	r2, #1
 800e0e4:	602a      	str	r2, [r5, #0]
 800e0e6:	68a2      	ldr	r2, [r4, #8]
 800e0e8:	3b01      	subs	r3, #1
 800e0ea:	3a01      	subs	r2, #1
 800e0ec:	606b      	str	r3, [r5, #4]
 800e0ee:	60a2      	str	r2, [r4, #8]
 800e0f0:	2a00      	cmp	r2, #0
 800e0f2:	d009      	beq.n	800e108 <_scanf_chars+0x94>
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dcd2      	bgt.n	800e09e <_scanf_chars+0x2a>
 800e0f8:	23c0      	movs	r3, #192	; 0xc0
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	0029      	movs	r1, r5
 800e0fe:	58e3      	ldr	r3, [r4, r3]
 800e100:	9801      	ldr	r0, [sp, #4]
 800e102:	4798      	blx	r3
 800e104:	2800      	cmp	r0, #0
 800e106:	d0ca      	beq.n	800e09e <_scanf_chars+0x2a>
 800e108:	6822      	ldr	r2, [r4, #0]
 800e10a:	2310      	movs	r3, #16
 800e10c:	0011      	movs	r1, r2
 800e10e:	4019      	ands	r1, r3
 800e110:	421a      	tst	r2, r3
 800e112:	d106      	bne.n	800e122 <_scanf_chars+0xae>
 800e114:	68e3      	ldr	r3, [r4, #12]
 800e116:	3301      	adds	r3, #1
 800e118:	60e3      	str	r3, [r4, #12]
 800e11a:	69a3      	ldr	r3, [r4, #24]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d000      	beq.n	800e122 <_scanf_chars+0xae>
 800e120:	7039      	strb	r1, [r7, #0]
 800e122:	2000      	movs	r0, #0
 800e124:	6923      	ldr	r3, [r4, #16]
 800e126:	199e      	adds	r6, r3, r6
 800e128:	6126      	str	r6, [r4, #16]
 800e12a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e12c:	0800f058 	.word	0x0800f058

0800e130 <_scanf_i>:
 800e130:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e132:	000c      	movs	r4, r1
 800e134:	b08d      	sub	sp, #52	; 0x34
 800e136:	9302      	str	r3, [sp, #8]
 800e138:	4b79      	ldr	r3, [pc, #484]	; (800e320 <_scanf_i+0x1f0>)
 800e13a:	0016      	movs	r6, r2
 800e13c:	9005      	str	r0, [sp, #20]
 800e13e:	aa09      	add	r2, sp, #36	; 0x24
 800e140:	cb23      	ldmia	r3!, {r0, r1, r5}
 800e142:	c223      	stmia	r2!, {r0, r1, r5}
 800e144:	4b77      	ldr	r3, [pc, #476]	; (800e324 <_scanf_i+0x1f4>)
 800e146:	9306      	str	r3, [sp, #24]
 800e148:	69a3      	ldr	r3, [r4, #24]
 800e14a:	2b03      	cmp	r3, #3
 800e14c:	d001      	beq.n	800e152 <_scanf_i+0x22>
 800e14e:	4b76      	ldr	r3, [pc, #472]	; (800e328 <_scanf_i+0x1f8>)
 800e150:	9306      	str	r3, [sp, #24]
 800e152:	22ae      	movs	r2, #174	; 0xae
 800e154:	2000      	movs	r0, #0
 800e156:	68a3      	ldr	r3, [r4, #8]
 800e158:	0052      	lsls	r2, r2, #1
 800e15a:	1e59      	subs	r1, r3, #1
 800e15c:	9004      	str	r0, [sp, #16]
 800e15e:	4291      	cmp	r1, r2
 800e160:	d905      	bls.n	800e16e <_scanf_i+0x3e>
 800e162:	3b5e      	subs	r3, #94	; 0x5e
 800e164:	3bff      	subs	r3, #255	; 0xff
 800e166:	9304      	str	r3, [sp, #16]
 800e168:	235e      	movs	r3, #94	; 0x5e
 800e16a:	33ff      	adds	r3, #255	; 0xff
 800e16c:	60a3      	str	r3, [r4, #8]
 800e16e:	0023      	movs	r3, r4
 800e170:	331c      	adds	r3, #28
 800e172:	9301      	str	r3, [sp, #4]
 800e174:	23d0      	movs	r3, #208	; 0xd0
 800e176:	2700      	movs	r7, #0
 800e178:	6822      	ldr	r2, [r4, #0]
 800e17a:	011b      	lsls	r3, r3, #4
 800e17c:	4313      	orrs	r3, r2
 800e17e:	6023      	str	r3, [r4, #0]
 800e180:	9b01      	ldr	r3, [sp, #4]
 800e182:	9303      	str	r3, [sp, #12]
 800e184:	6833      	ldr	r3, [r6, #0]
 800e186:	a809      	add	r0, sp, #36	; 0x24
 800e188:	7819      	ldrb	r1, [r3, #0]
 800e18a:	00bb      	lsls	r3, r7, #2
 800e18c:	2202      	movs	r2, #2
 800e18e:	5818      	ldr	r0, [r3, r0]
 800e190:	f7ff fc72 	bl	800da78 <memchr>
 800e194:	2800      	cmp	r0, #0
 800e196:	d02b      	beq.n	800e1f0 <_scanf_i+0xc0>
 800e198:	2f01      	cmp	r7, #1
 800e19a:	d162      	bne.n	800e262 <_scanf_i+0x132>
 800e19c:	6863      	ldr	r3, [r4, #4]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d106      	bne.n	800e1b0 <_scanf_i+0x80>
 800e1a2:	3308      	adds	r3, #8
 800e1a4:	6822      	ldr	r2, [r4, #0]
 800e1a6:	6063      	str	r3, [r4, #4]
 800e1a8:	33f9      	adds	r3, #249	; 0xf9
 800e1aa:	33ff      	adds	r3, #255	; 0xff
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	6023      	str	r3, [r4, #0]
 800e1b0:	4b5e      	ldr	r3, [pc, #376]	; (800e32c <_scanf_i+0x1fc>)
 800e1b2:	6822      	ldr	r2, [r4, #0]
 800e1b4:	4013      	ands	r3, r2
 800e1b6:	6023      	str	r3, [r4, #0]
 800e1b8:	68a3      	ldr	r3, [r4, #8]
 800e1ba:	1e5a      	subs	r2, r3, #1
 800e1bc:	60a2      	str	r2, [r4, #8]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d016      	beq.n	800e1f0 <_scanf_i+0xc0>
 800e1c2:	6833      	ldr	r3, [r6, #0]
 800e1c4:	1c5a      	adds	r2, r3, #1
 800e1c6:	6032      	str	r2, [r6, #0]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	9a03      	ldr	r2, [sp, #12]
 800e1cc:	7013      	strb	r3, [r2, #0]
 800e1ce:	6873      	ldr	r3, [r6, #4]
 800e1d0:	1c55      	adds	r5, r2, #1
 800e1d2:	3b01      	subs	r3, #1
 800e1d4:	6073      	str	r3, [r6, #4]
 800e1d6:	9503      	str	r5, [sp, #12]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	dc09      	bgt.n	800e1f0 <_scanf_i+0xc0>
 800e1dc:	23c0      	movs	r3, #192	; 0xc0
 800e1de:	005b      	lsls	r3, r3, #1
 800e1e0:	58e3      	ldr	r3, [r4, r3]
 800e1e2:	0031      	movs	r1, r6
 800e1e4:	9805      	ldr	r0, [sp, #20]
 800e1e6:	9307      	str	r3, [sp, #28]
 800e1e8:	4798      	blx	r3
 800e1ea:	2800      	cmp	r0, #0
 800e1ec:	d000      	beq.n	800e1f0 <_scanf_i+0xc0>
 800e1ee:	e081      	b.n	800e2f4 <_scanf_i+0x1c4>
 800e1f0:	3701      	adds	r7, #1
 800e1f2:	2f03      	cmp	r7, #3
 800e1f4:	d1c6      	bne.n	800e184 <_scanf_i+0x54>
 800e1f6:	6863      	ldr	r3, [r4, #4]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d101      	bne.n	800e200 <_scanf_i+0xd0>
 800e1fc:	330a      	adds	r3, #10
 800e1fe:	6063      	str	r3, [r4, #4]
 800e200:	2110      	movs	r1, #16
 800e202:	2700      	movs	r7, #0
 800e204:	6863      	ldr	r3, [r4, #4]
 800e206:	6960      	ldr	r0, [r4, #20]
 800e208:	1ac9      	subs	r1, r1, r3
 800e20a:	4b49      	ldr	r3, [pc, #292]	; (800e330 <_scanf_i+0x200>)
 800e20c:	18c9      	adds	r1, r1, r3
 800e20e:	f000 f933 	bl	800e478 <__sccl>
 800e212:	9d03      	ldr	r5, [sp, #12]
 800e214:	68a3      	ldr	r3, [r4, #8]
 800e216:	6822      	ldr	r2, [r4, #0]
 800e218:	9303      	str	r3, [sp, #12]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d041      	beq.n	800e2a2 <_scanf_i+0x172>
 800e21e:	6831      	ldr	r1, [r6, #0]
 800e220:	6963      	ldr	r3, [r4, #20]
 800e222:	7808      	ldrb	r0, [r1, #0]
 800e224:	5c1b      	ldrb	r3, [r3, r0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d03b      	beq.n	800e2a2 <_scanf_i+0x172>
 800e22a:	2830      	cmp	r0, #48	; 0x30
 800e22c:	d129      	bne.n	800e282 <_scanf_i+0x152>
 800e22e:	2380      	movs	r3, #128	; 0x80
 800e230:	011b      	lsls	r3, r3, #4
 800e232:	421a      	tst	r2, r3
 800e234:	d025      	beq.n	800e282 <_scanf_i+0x152>
 800e236:	9b04      	ldr	r3, [sp, #16]
 800e238:	3701      	adds	r7, #1
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d005      	beq.n	800e24a <_scanf_i+0x11a>
 800e23e:	001a      	movs	r2, r3
 800e240:	9b03      	ldr	r3, [sp, #12]
 800e242:	3a01      	subs	r2, #1
 800e244:	3301      	adds	r3, #1
 800e246:	9204      	str	r2, [sp, #16]
 800e248:	60a3      	str	r3, [r4, #8]
 800e24a:	6873      	ldr	r3, [r6, #4]
 800e24c:	3b01      	subs	r3, #1
 800e24e:	6073      	str	r3, [r6, #4]
 800e250:	2b00      	cmp	r3, #0
 800e252:	dd1d      	ble.n	800e290 <_scanf_i+0x160>
 800e254:	6833      	ldr	r3, [r6, #0]
 800e256:	3301      	adds	r3, #1
 800e258:	6033      	str	r3, [r6, #0]
 800e25a:	68a3      	ldr	r3, [r4, #8]
 800e25c:	3b01      	subs	r3, #1
 800e25e:	60a3      	str	r3, [r4, #8]
 800e260:	e7d8      	b.n	800e214 <_scanf_i+0xe4>
 800e262:	2f02      	cmp	r7, #2
 800e264:	d1a8      	bne.n	800e1b8 <_scanf_i+0x88>
 800e266:	21c0      	movs	r1, #192	; 0xc0
 800e268:	2380      	movs	r3, #128	; 0x80
 800e26a:	6822      	ldr	r2, [r4, #0]
 800e26c:	00c9      	lsls	r1, r1, #3
 800e26e:	4011      	ands	r1, r2
 800e270:	009b      	lsls	r3, r3, #2
 800e272:	4299      	cmp	r1, r3
 800e274:	d1bf      	bne.n	800e1f6 <_scanf_i+0xc6>
 800e276:	3bf1      	subs	r3, #241	; 0xf1
 800e278:	3bff      	subs	r3, #255	; 0xff
 800e27a:	6063      	str	r3, [r4, #4]
 800e27c:	33f0      	adds	r3, #240	; 0xf0
 800e27e:	4313      	orrs	r3, r2
 800e280:	e799      	b.n	800e1b6 <_scanf_i+0x86>
 800e282:	4b2c      	ldr	r3, [pc, #176]	; (800e334 <_scanf_i+0x204>)
 800e284:	4013      	ands	r3, r2
 800e286:	6023      	str	r3, [r4, #0]
 800e288:	780b      	ldrb	r3, [r1, #0]
 800e28a:	702b      	strb	r3, [r5, #0]
 800e28c:	3501      	adds	r5, #1
 800e28e:	e7dc      	b.n	800e24a <_scanf_i+0x11a>
 800e290:	23c0      	movs	r3, #192	; 0xc0
 800e292:	005b      	lsls	r3, r3, #1
 800e294:	58e3      	ldr	r3, [r4, r3]
 800e296:	0031      	movs	r1, r6
 800e298:	9805      	ldr	r0, [sp, #20]
 800e29a:	9303      	str	r3, [sp, #12]
 800e29c:	4798      	blx	r3
 800e29e:	2800      	cmp	r0, #0
 800e2a0:	d0db      	beq.n	800e25a <_scanf_i+0x12a>
 800e2a2:	6823      	ldr	r3, [r4, #0]
 800e2a4:	05db      	lsls	r3, r3, #23
 800e2a6:	d50e      	bpl.n	800e2c6 <_scanf_i+0x196>
 800e2a8:	9b01      	ldr	r3, [sp, #4]
 800e2aa:	429d      	cmp	r5, r3
 800e2ac:	d907      	bls.n	800e2be <_scanf_i+0x18e>
 800e2ae:	23be      	movs	r3, #190	; 0xbe
 800e2b0:	3d01      	subs	r5, #1
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	0032      	movs	r2, r6
 800e2b6:	7829      	ldrb	r1, [r5, #0]
 800e2b8:	58e3      	ldr	r3, [r4, r3]
 800e2ba:	9805      	ldr	r0, [sp, #20]
 800e2bc:	4798      	blx	r3
 800e2be:	9b01      	ldr	r3, [sp, #4]
 800e2c0:	2001      	movs	r0, #1
 800e2c2:	429d      	cmp	r5, r3
 800e2c4:	d029      	beq.n	800e31a <_scanf_i+0x1ea>
 800e2c6:	6821      	ldr	r1, [r4, #0]
 800e2c8:	2310      	movs	r3, #16
 800e2ca:	000a      	movs	r2, r1
 800e2cc:	401a      	ands	r2, r3
 800e2ce:	4219      	tst	r1, r3
 800e2d0:	d11c      	bne.n	800e30c <_scanf_i+0x1dc>
 800e2d2:	702a      	strb	r2, [r5, #0]
 800e2d4:	6863      	ldr	r3, [r4, #4]
 800e2d6:	9901      	ldr	r1, [sp, #4]
 800e2d8:	9805      	ldr	r0, [sp, #20]
 800e2da:	9e06      	ldr	r6, [sp, #24]
 800e2dc:	47b0      	blx	r6
 800e2de:	9b02      	ldr	r3, [sp, #8]
 800e2e0:	6821      	ldr	r1, [r4, #0]
 800e2e2:	681b      	ldr	r3, [r3, #0]
 800e2e4:	068a      	lsls	r2, r1, #26
 800e2e6:	d507      	bpl.n	800e2f8 <_scanf_i+0x1c8>
 800e2e8:	1d1a      	adds	r2, r3, #4
 800e2ea:	9902      	ldr	r1, [sp, #8]
 800e2ec:	600a      	str	r2, [r1, #0]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	6018      	str	r0, [r3, #0]
 800e2f2:	e008      	b.n	800e306 <_scanf_i+0x1d6>
 800e2f4:	2700      	movs	r7, #0
 800e2f6:	e7d4      	b.n	800e2a2 <_scanf_i+0x172>
 800e2f8:	1d1a      	adds	r2, r3, #4
 800e2fa:	07ce      	lsls	r6, r1, #31
 800e2fc:	d5f5      	bpl.n	800e2ea <_scanf_i+0x1ba>
 800e2fe:	9902      	ldr	r1, [sp, #8]
 800e300:	600a      	str	r2, [r1, #0]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	8018      	strh	r0, [r3, #0]
 800e306:	68e3      	ldr	r3, [r4, #12]
 800e308:	3301      	adds	r3, #1
 800e30a:	60e3      	str	r3, [r4, #12]
 800e30c:	2000      	movs	r0, #0
 800e30e:	9b01      	ldr	r3, [sp, #4]
 800e310:	1aed      	subs	r5, r5, r3
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	19ef      	adds	r7, r5, r7
 800e316:	19df      	adds	r7, r3, r7
 800e318:	6127      	str	r7, [r4, #16]
 800e31a:	b00d      	add	sp, #52	; 0x34
 800e31c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e31e:	46c0      	nop			; (mov r8, r8)
 800e320:	0800ed8c 	.word	0x0800ed8c
 800e324:	0800e60d 	.word	0x0800e60d
 800e328:	0800e729 	.word	0x0800e729
 800e32c:	fffffaff 	.word	0xfffffaff
 800e330:	0800f045 	.word	0x0800f045
 800e334:	fffff6ff 	.word	0xfffff6ff

0800e338 <_putc_r>:
 800e338:	b570      	push	{r4, r5, r6, lr}
 800e33a:	0006      	movs	r6, r0
 800e33c:	000d      	movs	r5, r1
 800e33e:	0014      	movs	r4, r2
 800e340:	2800      	cmp	r0, #0
 800e342:	d004      	beq.n	800e34e <_putc_r+0x16>
 800e344:	6983      	ldr	r3, [r0, #24]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d101      	bne.n	800e34e <_putc_r+0x16>
 800e34a:	f7ff fa09 	bl	800d760 <__sinit>
 800e34e:	4b1c      	ldr	r3, [pc, #112]	; (800e3c0 <_putc_r+0x88>)
 800e350:	429c      	cmp	r4, r3
 800e352:	d124      	bne.n	800e39e <_putc_r+0x66>
 800e354:	6874      	ldr	r4, [r6, #4]
 800e356:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e358:	07db      	lsls	r3, r3, #31
 800e35a:	d405      	bmi.n	800e368 <_putc_r+0x30>
 800e35c:	89a3      	ldrh	r3, [r4, #12]
 800e35e:	059b      	lsls	r3, r3, #22
 800e360:	d402      	bmi.n	800e368 <_putc_r+0x30>
 800e362:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e364:	f7ff fafb 	bl	800d95e <__retarget_lock_acquire_recursive>
 800e368:	68a3      	ldr	r3, [r4, #8]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	60a3      	str	r3, [r4, #8]
 800e36e:	2b00      	cmp	r3, #0
 800e370:	da05      	bge.n	800e37e <_putc_r+0x46>
 800e372:	69a2      	ldr	r2, [r4, #24]
 800e374:	4293      	cmp	r3, r2
 800e376:	db1c      	blt.n	800e3b2 <_putc_r+0x7a>
 800e378:	b2eb      	uxtb	r3, r5
 800e37a:	2b0a      	cmp	r3, #10
 800e37c:	d019      	beq.n	800e3b2 <_putc_r+0x7a>
 800e37e:	6823      	ldr	r3, [r4, #0]
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	6022      	str	r2, [r4, #0]
 800e384:	701d      	strb	r5, [r3, #0]
 800e386:	b2ed      	uxtb	r5, r5
 800e388:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e38a:	07db      	lsls	r3, r3, #31
 800e38c:	d405      	bmi.n	800e39a <_putc_r+0x62>
 800e38e:	89a3      	ldrh	r3, [r4, #12]
 800e390:	059b      	lsls	r3, r3, #22
 800e392:	d402      	bmi.n	800e39a <_putc_r+0x62>
 800e394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e396:	f7ff fae3 	bl	800d960 <__retarget_lock_release_recursive>
 800e39a:	0028      	movs	r0, r5
 800e39c:	bd70      	pop	{r4, r5, r6, pc}
 800e39e:	4b09      	ldr	r3, [pc, #36]	; (800e3c4 <_putc_r+0x8c>)
 800e3a0:	429c      	cmp	r4, r3
 800e3a2:	d101      	bne.n	800e3a8 <_putc_r+0x70>
 800e3a4:	68b4      	ldr	r4, [r6, #8]
 800e3a6:	e7d6      	b.n	800e356 <_putc_r+0x1e>
 800e3a8:	4b07      	ldr	r3, [pc, #28]	; (800e3c8 <_putc_r+0x90>)
 800e3aa:	429c      	cmp	r4, r3
 800e3ac:	d1d3      	bne.n	800e356 <_putc_r+0x1e>
 800e3ae:	68f4      	ldr	r4, [r6, #12]
 800e3b0:	e7d1      	b.n	800e356 <_putc_r+0x1e>
 800e3b2:	0029      	movs	r1, r5
 800e3b4:	0022      	movs	r2, r4
 800e3b6:	0030      	movs	r0, r6
 800e3b8:	f7fe ff9a 	bl	800d2f0 <__swbuf_r>
 800e3bc:	0005      	movs	r5, r0
 800e3be:	e7e3      	b.n	800e388 <_putc_r+0x50>
 800e3c0:	0800effc 	.word	0x0800effc
 800e3c4:	0800f01c 	.word	0x0800f01c
 800e3c8:	0800efdc 	.word	0x0800efdc

0800e3cc <_read_r>:
 800e3cc:	b570      	push	{r4, r5, r6, lr}
 800e3ce:	0004      	movs	r4, r0
 800e3d0:	0008      	movs	r0, r1
 800e3d2:	0011      	movs	r1, r2
 800e3d4:	001a      	movs	r2, r3
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	4d05      	ldr	r5, [pc, #20]	; (800e3f0 <_read_r+0x24>)
 800e3da:	602b      	str	r3, [r5, #0]
 800e3dc:	f7f2 fdb4 	bl	8000f48 <_read>
 800e3e0:	1c43      	adds	r3, r0, #1
 800e3e2:	d103      	bne.n	800e3ec <_read_r+0x20>
 800e3e4:	682b      	ldr	r3, [r5, #0]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d000      	beq.n	800e3ec <_read_r+0x20>
 800e3ea:	6023      	str	r3, [r4, #0]
 800e3ec:	bd70      	pop	{r4, r5, r6, pc}
 800e3ee:	46c0      	nop			; (mov r8, r8)
 800e3f0:	20001458 	.word	0x20001458

0800e3f4 <__srget_r>:
 800e3f4:	b570      	push	{r4, r5, r6, lr}
 800e3f6:	0005      	movs	r5, r0
 800e3f8:	000c      	movs	r4, r1
 800e3fa:	2800      	cmp	r0, #0
 800e3fc:	d004      	beq.n	800e408 <__srget_r+0x14>
 800e3fe:	6983      	ldr	r3, [r0, #24]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d101      	bne.n	800e408 <__srget_r+0x14>
 800e404:	f7ff f9ac 	bl	800d760 <__sinit>
 800e408:	4b0f      	ldr	r3, [pc, #60]	; (800e448 <__srget_r+0x54>)
 800e40a:	429c      	cmp	r4, r3
 800e40c:	d10e      	bne.n	800e42c <__srget_r+0x38>
 800e40e:	686c      	ldr	r4, [r5, #4]
 800e410:	0021      	movs	r1, r4
 800e412:	0028      	movs	r0, r5
 800e414:	f000 fa12 	bl	800e83c <__srefill_r>
 800e418:	2800      	cmp	r0, #0
 800e41a:	d111      	bne.n	800e440 <__srget_r+0x4c>
 800e41c:	6863      	ldr	r3, [r4, #4]
 800e41e:	3b01      	subs	r3, #1
 800e420:	6063      	str	r3, [r4, #4]
 800e422:	6823      	ldr	r3, [r4, #0]
 800e424:	1c5a      	adds	r2, r3, #1
 800e426:	6022      	str	r2, [r4, #0]
 800e428:	7818      	ldrb	r0, [r3, #0]
 800e42a:	bd70      	pop	{r4, r5, r6, pc}
 800e42c:	4b07      	ldr	r3, [pc, #28]	; (800e44c <__srget_r+0x58>)
 800e42e:	429c      	cmp	r4, r3
 800e430:	d101      	bne.n	800e436 <__srget_r+0x42>
 800e432:	68ac      	ldr	r4, [r5, #8]
 800e434:	e7ec      	b.n	800e410 <__srget_r+0x1c>
 800e436:	4b06      	ldr	r3, [pc, #24]	; (800e450 <__srget_r+0x5c>)
 800e438:	429c      	cmp	r4, r3
 800e43a:	d1e9      	bne.n	800e410 <__srget_r+0x1c>
 800e43c:	68ec      	ldr	r4, [r5, #12]
 800e43e:	e7e7      	b.n	800e410 <__srget_r+0x1c>
 800e440:	2001      	movs	r0, #1
 800e442:	4240      	negs	r0, r0
 800e444:	e7f1      	b.n	800e42a <__srget_r+0x36>
 800e446:	46c0      	nop			; (mov r8, r8)
 800e448:	0800effc 	.word	0x0800effc
 800e44c:	0800f01c 	.word	0x0800f01c
 800e450:	0800efdc 	.word	0x0800efdc

0800e454 <_sbrk_r>:
 800e454:	2300      	movs	r3, #0
 800e456:	b570      	push	{r4, r5, r6, lr}
 800e458:	4d06      	ldr	r5, [pc, #24]	; (800e474 <_sbrk_r+0x20>)
 800e45a:	0004      	movs	r4, r0
 800e45c:	0008      	movs	r0, r1
 800e45e:	602b      	str	r3, [r5, #0]
 800e460:	f7f3 fe40 	bl	80020e4 <_sbrk>
 800e464:	1c43      	adds	r3, r0, #1
 800e466:	d103      	bne.n	800e470 <_sbrk_r+0x1c>
 800e468:	682b      	ldr	r3, [r5, #0]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d000      	beq.n	800e470 <_sbrk_r+0x1c>
 800e46e:	6023      	str	r3, [r4, #0]
 800e470:	bd70      	pop	{r4, r5, r6, pc}
 800e472:	46c0      	nop			; (mov r8, r8)
 800e474:	20001458 	.word	0x20001458

0800e478 <__sccl>:
 800e478:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e47a:	780b      	ldrb	r3, [r1, #0]
 800e47c:	0004      	movs	r4, r0
 800e47e:	2b5e      	cmp	r3, #94	; 0x5e
 800e480:	d00c      	beq.n	800e49c <__sccl+0x24>
 800e482:	1c48      	adds	r0, r1, #1
 800e484:	2100      	movs	r1, #0
 800e486:	0022      	movs	r2, r4
 800e488:	1c65      	adds	r5, r4, #1
 800e48a:	35ff      	adds	r5, #255	; 0xff
 800e48c:	7011      	strb	r1, [r2, #0]
 800e48e:	3201      	adds	r2, #1
 800e490:	42aa      	cmp	r2, r5
 800e492:	d1fb      	bne.n	800e48c <__sccl+0x14>
 800e494:	2b00      	cmp	r3, #0
 800e496:	d105      	bne.n	800e4a4 <__sccl+0x2c>
 800e498:	3801      	subs	r0, #1
 800e49a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e49c:	784b      	ldrb	r3, [r1, #1]
 800e49e:	1c88      	adds	r0, r1, #2
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	e7f0      	b.n	800e486 <__sccl+0xe>
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	262d      	movs	r6, #45	; 0x2d
 800e4a8:	4051      	eors	r1, r2
 800e4aa:	0002      	movs	r2, r0
 800e4ac:	54e1      	strb	r1, [r4, r3]
 800e4ae:	7815      	ldrb	r5, [r2, #0]
 800e4b0:	1c50      	adds	r0, r2, #1
 800e4b2:	2d2d      	cmp	r5, #45	; 0x2d
 800e4b4:	d009      	beq.n	800e4ca <__sccl+0x52>
 800e4b6:	2d5d      	cmp	r5, #93	; 0x5d
 800e4b8:	d0ef      	beq.n	800e49a <__sccl+0x22>
 800e4ba:	2d00      	cmp	r5, #0
 800e4bc:	d101      	bne.n	800e4c2 <__sccl+0x4a>
 800e4be:	0010      	movs	r0, r2
 800e4c0:	e7eb      	b.n	800e49a <__sccl+0x22>
 800e4c2:	002b      	movs	r3, r5
 800e4c4:	e7f1      	b.n	800e4aa <__sccl+0x32>
 800e4c6:	0033      	movs	r3, r6
 800e4c8:	e7ef      	b.n	800e4aa <__sccl+0x32>
 800e4ca:	7855      	ldrb	r5, [r2, #1]
 800e4cc:	2d5d      	cmp	r5, #93	; 0x5d
 800e4ce:	d0fa      	beq.n	800e4c6 <__sccl+0x4e>
 800e4d0:	42ab      	cmp	r3, r5
 800e4d2:	dcf8      	bgt.n	800e4c6 <__sccl+0x4e>
 800e4d4:	0018      	movs	r0, r3
 800e4d6:	3202      	adds	r2, #2
 800e4d8:	3001      	adds	r0, #1
 800e4da:	5421      	strb	r1, [r4, r0]
 800e4dc:	4285      	cmp	r5, r0
 800e4de:	dcfb      	bgt.n	800e4d8 <__sccl+0x60>
 800e4e0:	2000      	movs	r0, #0
 800e4e2:	1c5f      	adds	r7, r3, #1
 800e4e4:	42ab      	cmp	r3, r5
 800e4e6:	da01      	bge.n	800e4ec <__sccl+0x74>
 800e4e8:	1ae8      	subs	r0, r5, r3
 800e4ea:	3801      	subs	r0, #1
 800e4ec:	183b      	adds	r3, r7, r0
 800e4ee:	e7de      	b.n	800e4ae <__sccl+0x36>

0800e4f0 <_strtol_l.constprop.0>:
 800e4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4f2:	b087      	sub	sp, #28
 800e4f4:	001e      	movs	r6, r3
 800e4f6:	9005      	str	r0, [sp, #20]
 800e4f8:	9101      	str	r1, [sp, #4]
 800e4fa:	9202      	str	r2, [sp, #8]
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d045      	beq.n	800e58c <_strtol_l.constprop.0+0x9c>
 800e500:	000b      	movs	r3, r1
 800e502:	2e24      	cmp	r6, #36	; 0x24
 800e504:	d842      	bhi.n	800e58c <_strtol_l.constprop.0+0x9c>
 800e506:	4a3f      	ldr	r2, [pc, #252]	; (800e604 <_strtol_l.constprop.0+0x114>)
 800e508:	2108      	movs	r1, #8
 800e50a:	4694      	mov	ip, r2
 800e50c:	001a      	movs	r2, r3
 800e50e:	4660      	mov	r0, ip
 800e510:	7814      	ldrb	r4, [r2, #0]
 800e512:	3301      	adds	r3, #1
 800e514:	5d00      	ldrb	r0, [r0, r4]
 800e516:	001d      	movs	r5, r3
 800e518:	0007      	movs	r7, r0
 800e51a:	400f      	ands	r7, r1
 800e51c:	4208      	tst	r0, r1
 800e51e:	d1f5      	bne.n	800e50c <_strtol_l.constprop.0+0x1c>
 800e520:	2c2d      	cmp	r4, #45	; 0x2d
 800e522:	d13a      	bne.n	800e59a <_strtol_l.constprop.0+0xaa>
 800e524:	2701      	movs	r7, #1
 800e526:	781c      	ldrb	r4, [r3, #0]
 800e528:	1c95      	adds	r5, r2, #2
 800e52a:	2e00      	cmp	r6, #0
 800e52c:	d065      	beq.n	800e5fa <_strtol_l.constprop.0+0x10a>
 800e52e:	2e10      	cmp	r6, #16
 800e530:	d109      	bne.n	800e546 <_strtol_l.constprop.0+0x56>
 800e532:	2c30      	cmp	r4, #48	; 0x30
 800e534:	d107      	bne.n	800e546 <_strtol_l.constprop.0+0x56>
 800e536:	2220      	movs	r2, #32
 800e538:	782b      	ldrb	r3, [r5, #0]
 800e53a:	4393      	bics	r3, r2
 800e53c:	2b58      	cmp	r3, #88	; 0x58
 800e53e:	d157      	bne.n	800e5f0 <_strtol_l.constprop.0+0x100>
 800e540:	2610      	movs	r6, #16
 800e542:	786c      	ldrb	r4, [r5, #1]
 800e544:	3502      	adds	r5, #2
 800e546:	4b30      	ldr	r3, [pc, #192]	; (800e608 <_strtol_l.constprop.0+0x118>)
 800e548:	0031      	movs	r1, r6
 800e54a:	18fb      	adds	r3, r7, r3
 800e54c:	0018      	movs	r0, r3
 800e54e:	9303      	str	r3, [sp, #12]
 800e550:	f7f1 fe7c 	bl	800024c <__aeabi_uidivmod>
 800e554:	2300      	movs	r3, #0
 800e556:	2201      	movs	r2, #1
 800e558:	4684      	mov	ip, r0
 800e55a:	0018      	movs	r0, r3
 800e55c:	9104      	str	r1, [sp, #16]
 800e55e:	4252      	negs	r2, r2
 800e560:	0021      	movs	r1, r4
 800e562:	3930      	subs	r1, #48	; 0x30
 800e564:	2909      	cmp	r1, #9
 800e566:	d81d      	bhi.n	800e5a4 <_strtol_l.constprop.0+0xb4>
 800e568:	000c      	movs	r4, r1
 800e56a:	42a6      	cmp	r6, r4
 800e56c:	dd28      	ble.n	800e5c0 <_strtol_l.constprop.0+0xd0>
 800e56e:	2b00      	cmp	r3, #0
 800e570:	db24      	blt.n	800e5bc <_strtol_l.constprop.0+0xcc>
 800e572:	0013      	movs	r3, r2
 800e574:	4584      	cmp	ip, r0
 800e576:	d306      	bcc.n	800e586 <_strtol_l.constprop.0+0x96>
 800e578:	d102      	bne.n	800e580 <_strtol_l.constprop.0+0x90>
 800e57a:	9904      	ldr	r1, [sp, #16]
 800e57c:	42a1      	cmp	r1, r4
 800e57e:	db02      	blt.n	800e586 <_strtol_l.constprop.0+0x96>
 800e580:	2301      	movs	r3, #1
 800e582:	4370      	muls	r0, r6
 800e584:	1820      	adds	r0, r4, r0
 800e586:	782c      	ldrb	r4, [r5, #0]
 800e588:	3501      	adds	r5, #1
 800e58a:	e7e9      	b.n	800e560 <_strtol_l.constprop.0+0x70>
 800e58c:	f7fe f976 	bl	800c87c <__errno>
 800e590:	2316      	movs	r3, #22
 800e592:	6003      	str	r3, [r0, #0]
 800e594:	2000      	movs	r0, #0
 800e596:	b007      	add	sp, #28
 800e598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e59a:	2c2b      	cmp	r4, #43	; 0x2b
 800e59c:	d1c5      	bne.n	800e52a <_strtol_l.constprop.0+0x3a>
 800e59e:	781c      	ldrb	r4, [r3, #0]
 800e5a0:	1c95      	adds	r5, r2, #2
 800e5a2:	e7c2      	b.n	800e52a <_strtol_l.constprop.0+0x3a>
 800e5a4:	0021      	movs	r1, r4
 800e5a6:	3941      	subs	r1, #65	; 0x41
 800e5a8:	2919      	cmp	r1, #25
 800e5aa:	d801      	bhi.n	800e5b0 <_strtol_l.constprop.0+0xc0>
 800e5ac:	3c37      	subs	r4, #55	; 0x37
 800e5ae:	e7dc      	b.n	800e56a <_strtol_l.constprop.0+0x7a>
 800e5b0:	0021      	movs	r1, r4
 800e5b2:	3961      	subs	r1, #97	; 0x61
 800e5b4:	2919      	cmp	r1, #25
 800e5b6:	d803      	bhi.n	800e5c0 <_strtol_l.constprop.0+0xd0>
 800e5b8:	3c57      	subs	r4, #87	; 0x57
 800e5ba:	e7d6      	b.n	800e56a <_strtol_l.constprop.0+0x7a>
 800e5bc:	0013      	movs	r3, r2
 800e5be:	e7e2      	b.n	800e586 <_strtol_l.constprop.0+0x96>
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	da09      	bge.n	800e5d8 <_strtol_l.constprop.0+0xe8>
 800e5c4:	2322      	movs	r3, #34	; 0x22
 800e5c6:	9a05      	ldr	r2, [sp, #20]
 800e5c8:	9803      	ldr	r0, [sp, #12]
 800e5ca:	6013      	str	r3, [r2, #0]
 800e5cc:	9b02      	ldr	r3, [sp, #8]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d0e1      	beq.n	800e596 <_strtol_l.constprop.0+0xa6>
 800e5d2:	1e6b      	subs	r3, r5, #1
 800e5d4:	9301      	str	r3, [sp, #4]
 800e5d6:	e007      	b.n	800e5e8 <_strtol_l.constprop.0+0xf8>
 800e5d8:	2f00      	cmp	r7, #0
 800e5da:	d000      	beq.n	800e5de <_strtol_l.constprop.0+0xee>
 800e5dc:	4240      	negs	r0, r0
 800e5de:	9a02      	ldr	r2, [sp, #8]
 800e5e0:	2a00      	cmp	r2, #0
 800e5e2:	d0d8      	beq.n	800e596 <_strtol_l.constprop.0+0xa6>
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d1f4      	bne.n	800e5d2 <_strtol_l.constprop.0+0xe2>
 800e5e8:	9b02      	ldr	r3, [sp, #8]
 800e5ea:	9a01      	ldr	r2, [sp, #4]
 800e5ec:	601a      	str	r2, [r3, #0]
 800e5ee:	e7d2      	b.n	800e596 <_strtol_l.constprop.0+0xa6>
 800e5f0:	2430      	movs	r4, #48	; 0x30
 800e5f2:	2e00      	cmp	r6, #0
 800e5f4:	d1a7      	bne.n	800e546 <_strtol_l.constprop.0+0x56>
 800e5f6:	3608      	adds	r6, #8
 800e5f8:	e7a5      	b.n	800e546 <_strtol_l.constprop.0+0x56>
 800e5fa:	2c30      	cmp	r4, #48	; 0x30
 800e5fc:	d09b      	beq.n	800e536 <_strtol_l.constprop.0+0x46>
 800e5fe:	260a      	movs	r6, #10
 800e600:	e7a1      	b.n	800e546 <_strtol_l.constprop.0+0x56>
 800e602:	46c0      	nop			; (mov r8, r8)
 800e604:	0800f058 	.word	0x0800f058
 800e608:	7fffffff 	.word	0x7fffffff

0800e60c <_strtol_r>:
 800e60c:	b510      	push	{r4, lr}
 800e60e:	f7ff ff6f 	bl	800e4f0 <_strtol_l.constprop.0>
 800e612:	bd10      	pop	{r4, pc}

0800e614 <_strtoul_l.constprop.0>:
 800e614:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e616:	b087      	sub	sp, #28
 800e618:	9202      	str	r2, [sp, #8]
 800e61a:	4a42      	ldr	r2, [pc, #264]	; (800e724 <_strtoul_l.constprop.0+0x110>)
 800e61c:	001e      	movs	r6, r3
 800e61e:	9101      	str	r1, [sp, #4]
 800e620:	000b      	movs	r3, r1
 800e622:	4694      	mov	ip, r2
 800e624:	2108      	movs	r1, #8
 800e626:	9005      	str	r0, [sp, #20]
 800e628:	001a      	movs	r2, r3
 800e62a:	4660      	mov	r0, ip
 800e62c:	7814      	ldrb	r4, [r2, #0]
 800e62e:	3301      	adds	r3, #1
 800e630:	5d00      	ldrb	r0, [r0, r4]
 800e632:	001d      	movs	r5, r3
 800e634:	0007      	movs	r7, r0
 800e636:	400f      	ands	r7, r1
 800e638:	4208      	tst	r0, r1
 800e63a:	d1f5      	bne.n	800e628 <_strtoul_l.constprop.0+0x14>
 800e63c:	2c2d      	cmp	r4, #45	; 0x2d
 800e63e:	d13a      	bne.n	800e6b6 <_strtoul_l.constprop.0+0xa2>
 800e640:	2701      	movs	r7, #1
 800e642:	781c      	ldrb	r4, [r3, #0]
 800e644:	1c95      	adds	r5, r2, #2
 800e646:	2e00      	cmp	r6, #0
 800e648:	d067      	beq.n	800e71a <_strtoul_l.constprop.0+0x106>
 800e64a:	2e10      	cmp	r6, #16
 800e64c:	d109      	bne.n	800e662 <_strtoul_l.constprop.0+0x4e>
 800e64e:	2c30      	cmp	r4, #48	; 0x30
 800e650:	d107      	bne.n	800e662 <_strtoul_l.constprop.0+0x4e>
 800e652:	2220      	movs	r2, #32
 800e654:	782b      	ldrb	r3, [r5, #0]
 800e656:	4393      	bics	r3, r2
 800e658:	2b58      	cmp	r3, #88	; 0x58
 800e65a:	d159      	bne.n	800e710 <_strtoul_l.constprop.0+0xfc>
 800e65c:	2610      	movs	r6, #16
 800e65e:	786c      	ldrb	r4, [r5, #1]
 800e660:	3502      	adds	r5, #2
 800e662:	2001      	movs	r0, #1
 800e664:	0031      	movs	r1, r6
 800e666:	4240      	negs	r0, r0
 800e668:	f7f1 fd6a 	bl	8000140 <__udivsi3>
 800e66c:	9003      	str	r0, [sp, #12]
 800e66e:	2001      	movs	r0, #1
 800e670:	0031      	movs	r1, r6
 800e672:	4240      	negs	r0, r0
 800e674:	f7f1 fdea 	bl	800024c <__aeabi_uidivmod>
 800e678:	2300      	movs	r3, #0
 800e67a:	9104      	str	r1, [sp, #16]
 800e67c:	2101      	movs	r1, #1
 800e67e:	2201      	movs	r2, #1
 800e680:	0018      	movs	r0, r3
 800e682:	468c      	mov	ip, r1
 800e684:	4252      	negs	r2, r2
 800e686:	0021      	movs	r1, r4
 800e688:	3930      	subs	r1, #48	; 0x30
 800e68a:	2909      	cmp	r1, #9
 800e68c:	d818      	bhi.n	800e6c0 <_strtoul_l.constprop.0+0xac>
 800e68e:	000c      	movs	r4, r1
 800e690:	42a6      	cmp	r6, r4
 800e692:	dd23      	ble.n	800e6dc <_strtoul_l.constprop.0+0xc8>
 800e694:	2b00      	cmp	r3, #0
 800e696:	db1f      	blt.n	800e6d8 <_strtoul_l.constprop.0+0xc4>
 800e698:	9903      	ldr	r1, [sp, #12]
 800e69a:	0013      	movs	r3, r2
 800e69c:	4281      	cmp	r1, r0
 800e69e:	d307      	bcc.n	800e6b0 <_strtoul_l.constprop.0+0x9c>
 800e6a0:	d103      	bne.n	800e6aa <_strtoul_l.constprop.0+0x96>
 800e6a2:	9904      	ldr	r1, [sp, #16]
 800e6a4:	0013      	movs	r3, r2
 800e6a6:	42a1      	cmp	r1, r4
 800e6a8:	db02      	blt.n	800e6b0 <_strtoul_l.constprop.0+0x9c>
 800e6aa:	4663      	mov	r3, ip
 800e6ac:	4370      	muls	r0, r6
 800e6ae:	1820      	adds	r0, r4, r0
 800e6b0:	782c      	ldrb	r4, [r5, #0]
 800e6b2:	3501      	adds	r5, #1
 800e6b4:	e7e7      	b.n	800e686 <_strtoul_l.constprop.0+0x72>
 800e6b6:	2c2b      	cmp	r4, #43	; 0x2b
 800e6b8:	d1c5      	bne.n	800e646 <_strtoul_l.constprop.0+0x32>
 800e6ba:	781c      	ldrb	r4, [r3, #0]
 800e6bc:	1c95      	adds	r5, r2, #2
 800e6be:	e7c2      	b.n	800e646 <_strtoul_l.constprop.0+0x32>
 800e6c0:	0021      	movs	r1, r4
 800e6c2:	3941      	subs	r1, #65	; 0x41
 800e6c4:	2919      	cmp	r1, #25
 800e6c6:	d801      	bhi.n	800e6cc <_strtoul_l.constprop.0+0xb8>
 800e6c8:	3c37      	subs	r4, #55	; 0x37
 800e6ca:	e7e1      	b.n	800e690 <_strtoul_l.constprop.0+0x7c>
 800e6cc:	0021      	movs	r1, r4
 800e6ce:	3961      	subs	r1, #97	; 0x61
 800e6d0:	2919      	cmp	r1, #25
 800e6d2:	d803      	bhi.n	800e6dc <_strtoul_l.constprop.0+0xc8>
 800e6d4:	3c57      	subs	r4, #87	; 0x57
 800e6d6:	e7db      	b.n	800e690 <_strtoul_l.constprop.0+0x7c>
 800e6d8:	0013      	movs	r3, r2
 800e6da:	e7e9      	b.n	800e6b0 <_strtoul_l.constprop.0+0x9c>
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	da09      	bge.n	800e6f4 <_strtoul_l.constprop.0+0xe0>
 800e6e0:	2322      	movs	r3, #34	; 0x22
 800e6e2:	2001      	movs	r0, #1
 800e6e4:	9a05      	ldr	r2, [sp, #20]
 800e6e6:	4240      	negs	r0, r0
 800e6e8:	6013      	str	r3, [r2, #0]
 800e6ea:	9b02      	ldr	r3, [sp, #8]
 800e6ec:	2b00      	cmp	r3, #0
 800e6ee:	d109      	bne.n	800e704 <_strtoul_l.constprop.0+0xf0>
 800e6f0:	b007      	add	sp, #28
 800e6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e6f4:	2f00      	cmp	r7, #0
 800e6f6:	d000      	beq.n	800e6fa <_strtoul_l.constprop.0+0xe6>
 800e6f8:	4240      	negs	r0, r0
 800e6fa:	9a02      	ldr	r2, [sp, #8]
 800e6fc:	2a00      	cmp	r2, #0
 800e6fe:	d0f7      	beq.n	800e6f0 <_strtoul_l.constprop.0+0xdc>
 800e700:	2b00      	cmp	r3, #0
 800e702:	d001      	beq.n	800e708 <_strtoul_l.constprop.0+0xf4>
 800e704:	1e6b      	subs	r3, r5, #1
 800e706:	9301      	str	r3, [sp, #4]
 800e708:	9b02      	ldr	r3, [sp, #8]
 800e70a:	9a01      	ldr	r2, [sp, #4]
 800e70c:	601a      	str	r2, [r3, #0]
 800e70e:	e7ef      	b.n	800e6f0 <_strtoul_l.constprop.0+0xdc>
 800e710:	2430      	movs	r4, #48	; 0x30
 800e712:	2e00      	cmp	r6, #0
 800e714:	d1a5      	bne.n	800e662 <_strtoul_l.constprop.0+0x4e>
 800e716:	3608      	adds	r6, #8
 800e718:	e7a3      	b.n	800e662 <_strtoul_l.constprop.0+0x4e>
 800e71a:	2c30      	cmp	r4, #48	; 0x30
 800e71c:	d099      	beq.n	800e652 <_strtoul_l.constprop.0+0x3e>
 800e71e:	260a      	movs	r6, #10
 800e720:	e79f      	b.n	800e662 <_strtoul_l.constprop.0+0x4e>
 800e722:	46c0      	nop			; (mov r8, r8)
 800e724:	0800f058 	.word	0x0800f058

0800e728 <_strtoul_r>:
 800e728:	b510      	push	{r4, lr}
 800e72a:	f7ff ff73 	bl	800e614 <_strtoul_l.constprop.0>
 800e72e:	bd10      	pop	{r4, pc}

0800e730 <__submore>:
 800e730:	000b      	movs	r3, r1
 800e732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e734:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 800e736:	3344      	adds	r3, #68	; 0x44
 800e738:	000c      	movs	r4, r1
 800e73a:	429d      	cmp	r5, r3
 800e73c:	d11c      	bne.n	800e778 <__submore+0x48>
 800e73e:	2680      	movs	r6, #128	; 0x80
 800e740:	00f6      	lsls	r6, r6, #3
 800e742:	0031      	movs	r1, r6
 800e744:	f7ff fa18 	bl	800db78 <_malloc_r>
 800e748:	2800      	cmp	r0, #0
 800e74a:	d102      	bne.n	800e752 <__submore+0x22>
 800e74c:	2001      	movs	r0, #1
 800e74e:	4240      	negs	r0, r0
 800e750:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e752:	0023      	movs	r3, r4
 800e754:	6360      	str	r0, [r4, #52]	; 0x34
 800e756:	63a6      	str	r6, [r4, #56]	; 0x38
 800e758:	3346      	adds	r3, #70	; 0x46
 800e75a:	781a      	ldrb	r2, [r3, #0]
 800e75c:	4b10      	ldr	r3, [pc, #64]	; (800e7a0 <__submore+0x70>)
 800e75e:	54c2      	strb	r2, [r0, r3]
 800e760:	0023      	movs	r3, r4
 800e762:	3345      	adds	r3, #69	; 0x45
 800e764:	781a      	ldrb	r2, [r3, #0]
 800e766:	4b0f      	ldr	r3, [pc, #60]	; (800e7a4 <__submore+0x74>)
 800e768:	54c2      	strb	r2, [r0, r3]
 800e76a:	782a      	ldrb	r2, [r5, #0]
 800e76c:	4b0e      	ldr	r3, [pc, #56]	; (800e7a8 <__submore+0x78>)
 800e76e:	54c2      	strb	r2, [r0, r3]
 800e770:	18c0      	adds	r0, r0, r3
 800e772:	6020      	str	r0, [r4, #0]
 800e774:	2000      	movs	r0, #0
 800e776:	e7eb      	b.n	800e750 <__submore+0x20>
 800e778:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 800e77a:	0029      	movs	r1, r5
 800e77c:	0073      	lsls	r3, r6, #1
 800e77e:	001a      	movs	r2, r3
 800e780:	9301      	str	r3, [sp, #4]
 800e782:	f7ff fa6f 	bl	800dc64 <_realloc_r>
 800e786:	1e05      	subs	r5, r0, #0
 800e788:	d0e0      	beq.n	800e74c <__submore+0x1c>
 800e78a:	1987      	adds	r7, r0, r6
 800e78c:	0001      	movs	r1, r0
 800e78e:	0032      	movs	r2, r6
 800e790:	0038      	movs	r0, r7
 800e792:	f7ff f97c 	bl	800da8e <memcpy>
 800e796:	9b01      	ldr	r3, [sp, #4]
 800e798:	6027      	str	r7, [r4, #0]
 800e79a:	6365      	str	r5, [r4, #52]	; 0x34
 800e79c:	63a3      	str	r3, [r4, #56]	; 0x38
 800e79e:	e7e9      	b.n	800e774 <__submore+0x44>
 800e7a0:	000003ff 	.word	0x000003ff
 800e7a4:	000003fe 	.word	0x000003fe
 800e7a8:	000003fd 	.word	0x000003fd

0800e7ac <_fstat_r>:
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	b570      	push	{r4, r5, r6, lr}
 800e7b0:	4d06      	ldr	r5, [pc, #24]	; (800e7cc <_fstat_r+0x20>)
 800e7b2:	0004      	movs	r4, r0
 800e7b4:	0008      	movs	r0, r1
 800e7b6:	0011      	movs	r1, r2
 800e7b8:	602b      	str	r3, [r5, #0]
 800e7ba:	f7f3 fc71 	bl	80020a0 <_fstat>
 800e7be:	1c43      	adds	r3, r0, #1
 800e7c0:	d103      	bne.n	800e7ca <_fstat_r+0x1e>
 800e7c2:	682b      	ldr	r3, [r5, #0]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d000      	beq.n	800e7ca <_fstat_r+0x1e>
 800e7c8:	6023      	str	r3, [r4, #0]
 800e7ca:	bd70      	pop	{r4, r5, r6, pc}
 800e7cc:	20001458 	.word	0x20001458

0800e7d0 <_isatty_r>:
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	b570      	push	{r4, r5, r6, lr}
 800e7d4:	4d06      	ldr	r5, [pc, #24]	; (800e7f0 <_isatty_r+0x20>)
 800e7d6:	0004      	movs	r4, r0
 800e7d8:	0008      	movs	r0, r1
 800e7da:	602b      	str	r3, [r5, #0]
 800e7dc:	f7f3 fc6e 	bl	80020bc <_isatty>
 800e7e0:	1c43      	adds	r3, r0, #1
 800e7e2:	d103      	bne.n	800e7ec <_isatty_r+0x1c>
 800e7e4:	682b      	ldr	r3, [r5, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d000      	beq.n	800e7ec <_isatty_r+0x1c>
 800e7ea:	6023      	str	r3, [r4, #0]
 800e7ec:	bd70      	pop	{r4, r5, r6, pc}
 800e7ee:	46c0      	nop			; (mov r8, r8)
 800e7f0:	20001458 	.word	0x20001458

0800e7f4 <__malloc_lock>:
 800e7f4:	b510      	push	{r4, lr}
 800e7f6:	4802      	ldr	r0, [pc, #8]	; (800e800 <__malloc_lock+0xc>)
 800e7f8:	f7ff f8b1 	bl	800d95e <__retarget_lock_acquire_recursive>
 800e7fc:	bd10      	pop	{r4, pc}
 800e7fe:	46c0      	nop			; (mov r8, r8)
 800e800:	2000144c 	.word	0x2000144c

0800e804 <__malloc_unlock>:
 800e804:	b510      	push	{r4, lr}
 800e806:	4802      	ldr	r0, [pc, #8]	; (800e810 <__malloc_unlock+0xc>)
 800e808:	f7ff f8aa 	bl	800d960 <__retarget_lock_release_recursive>
 800e80c:	bd10      	pop	{r4, pc}
 800e80e:	46c0      	nop			; (mov r8, r8)
 800e810:	2000144c 	.word	0x2000144c

0800e814 <_malloc_usable_size_r>:
 800e814:	1f0b      	subs	r3, r1, #4
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	1f18      	subs	r0, r3, #4
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	da01      	bge.n	800e822 <_malloc_usable_size_r+0xe>
 800e81e:	580b      	ldr	r3, [r1, r0]
 800e820:	18c0      	adds	r0, r0, r3
 800e822:	4770      	bx	lr

0800e824 <lflush>:
 800e824:	2109      	movs	r1, #9
 800e826:	b510      	push	{r4, lr}
 800e828:	8982      	ldrh	r2, [r0, #12]
 800e82a:	0003      	movs	r3, r0
 800e82c:	400a      	ands	r2, r1
 800e82e:	2000      	movs	r0, #0
 800e830:	428a      	cmp	r2, r1
 800e832:	d102      	bne.n	800e83a <lflush+0x16>
 800e834:	0018      	movs	r0, r3
 800e836:	f7fe ff1b 	bl	800d670 <fflush>
 800e83a:	bd10      	pop	{r4, pc}

0800e83c <__srefill_r>:
 800e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83e:	0005      	movs	r5, r0
 800e840:	000c      	movs	r4, r1
 800e842:	2800      	cmp	r0, #0
 800e844:	d004      	beq.n	800e850 <__srefill_r+0x14>
 800e846:	6983      	ldr	r3, [r0, #24]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d101      	bne.n	800e850 <__srefill_r+0x14>
 800e84c:	f7fe ff88 	bl	800d760 <__sinit>
 800e850:	4b3d      	ldr	r3, [pc, #244]	; (800e948 <__srefill_r+0x10c>)
 800e852:	429c      	cmp	r4, r3
 800e854:	d10a      	bne.n	800e86c <__srefill_r+0x30>
 800e856:	686c      	ldr	r4, [r5, #4]
 800e858:	2300      	movs	r3, #0
 800e85a:	6063      	str	r3, [r4, #4]
 800e85c:	230c      	movs	r3, #12
 800e85e:	5ee2      	ldrsh	r2, [r4, r3]
 800e860:	b293      	uxth	r3, r2
 800e862:	0691      	lsls	r1, r2, #26
 800e864:	d50c      	bpl.n	800e880 <__srefill_r+0x44>
 800e866:	2001      	movs	r0, #1
 800e868:	4240      	negs	r0, r0
 800e86a:	e069      	b.n	800e940 <__srefill_r+0x104>
 800e86c:	4b37      	ldr	r3, [pc, #220]	; (800e94c <__srefill_r+0x110>)
 800e86e:	429c      	cmp	r4, r3
 800e870:	d101      	bne.n	800e876 <__srefill_r+0x3a>
 800e872:	68ac      	ldr	r4, [r5, #8]
 800e874:	e7f0      	b.n	800e858 <__srefill_r+0x1c>
 800e876:	4b36      	ldr	r3, [pc, #216]	; (800e950 <__srefill_r+0x114>)
 800e878:	429c      	cmp	r4, r3
 800e87a:	d1ed      	bne.n	800e858 <__srefill_r+0x1c>
 800e87c:	68ec      	ldr	r4, [r5, #12]
 800e87e:	e7eb      	b.n	800e858 <__srefill_r+0x1c>
 800e880:	0759      	lsls	r1, r3, #29
 800e882:	d44b      	bmi.n	800e91c <__srefill_r+0xe0>
 800e884:	06d9      	lsls	r1, r3, #27
 800e886:	d405      	bmi.n	800e894 <__srefill_r+0x58>
 800e888:	2309      	movs	r3, #9
 800e88a:	602b      	str	r3, [r5, #0]
 800e88c:	2340      	movs	r3, #64	; 0x40
 800e88e:	4313      	orrs	r3, r2
 800e890:	81a3      	strh	r3, [r4, #12]
 800e892:	e7e8      	b.n	800e866 <__srefill_r+0x2a>
 800e894:	2608      	movs	r6, #8
 800e896:	4233      	tst	r3, r6
 800e898:	d00a      	beq.n	800e8b0 <__srefill_r+0x74>
 800e89a:	0021      	movs	r1, r4
 800e89c:	0028      	movs	r0, r5
 800e89e:	f7fe fea7 	bl	800d5f0 <_fflush_r>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d1df      	bne.n	800e866 <__srefill_r+0x2a>
 800e8a6:	89a3      	ldrh	r3, [r4, #12]
 800e8a8:	60a0      	str	r0, [r4, #8]
 800e8aa:	43b3      	bics	r3, r6
 800e8ac:	81a3      	strh	r3, [r4, #12]
 800e8ae:	61a0      	str	r0, [r4, #24]
 800e8b0:	2304      	movs	r3, #4
 800e8b2:	89a2      	ldrh	r2, [r4, #12]
 800e8b4:	4313      	orrs	r3, r2
 800e8b6:	81a3      	strh	r3, [r4, #12]
 800e8b8:	6923      	ldr	r3, [r4, #16]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d103      	bne.n	800e8c6 <__srefill_r+0x8a>
 800e8be:	0021      	movs	r1, r4
 800e8c0:	0028      	movs	r0, r5
 800e8c2:	f7ff f88b 	bl	800d9dc <__smakebuf_r>
 800e8c6:	230c      	movs	r3, #12
 800e8c8:	5ee7      	ldrsh	r7, [r4, r3]
 800e8ca:	b2be      	uxth	r6, r7
 800e8cc:	07bb      	lsls	r3, r7, #30
 800e8ce:	d00f      	beq.n	800e8f0 <__srefill_r+0xb4>
 800e8d0:	2301      	movs	r3, #1
 800e8d2:	81a3      	strh	r3, [r4, #12]
 800e8d4:	4b1f      	ldr	r3, [pc, #124]	; (800e954 <__srefill_r+0x118>)
 800e8d6:	4920      	ldr	r1, [pc, #128]	; (800e958 <__srefill_r+0x11c>)
 800e8d8:	6818      	ldr	r0, [r3, #0]
 800e8da:	f7fe ffc1 	bl	800d860 <_fwalk>
 800e8de:	2309      	movs	r3, #9
 800e8e0:	81a7      	strh	r7, [r4, #12]
 800e8e2:	401e      	ands	r6, r3
 800e8e4:	429e      	cmp	r6, r3
 800e8e6:	d103      	bne.n	800e8f0 <__srefill_r+0xb4>
 800e8e8:	0021      	movs	r1, r4
 800e8ea:	0028      	movs	r0, r5
 800e8ec:	f7fe fdf4 	bl	800d4d8 <__sflush_r>
 800e8f0:	6923      	ldr	r3, [r4, #16]
 800e8f2:	0028      	movs	r0, r5
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	6922      	ldr	r2, [r4, #16]
 800e8f8:	6963      	ldr	r3, [r4, #20]
 800e8fa:	6a21      	ldr	r1, [r4, #32]
 800e8fc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e8fe:	47a8      	blx	r5
 800e900:	0003      	movs	r3, r0
 800e902:	6060      	str	r0, [r4, #4]
 800e904:	2000      	movs	r0, #0
 800e906:	4283      	cmp	r3, r0
 800e908:	dc1a      	bgt.n	800e940 <__srefill_r+0x104>
 800e90a:	210c      	movs	r1, #12
 800e90c:	5e62      	ldrsh	r2, [r4, r1]
 800e90e:	4283      	cmp	r3, r0
 800e910:	d117      	bne.n	800e942 <__srefill_r+0x106>
 800e912:	2320      	movs	r3, #32
 800e914:	4313      	orrs	r3, r2
 800e916:	81a3      	strh	r3, [r4, #12]
 800e918:	3801      	subs	r0, #1
 800e91a:	e011      	b.n	800e940 <__srefill_r+0x104>
 800e91c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e91e:	2900      	cmp	r1, #0
 800e920:	d0ca      	beq.n	800e8b8 <__srefill_r+0x7c>
 800e922:	0023      	movs	r3, r4
 800e924:	3344      	adds	r3, #68	; 0x44
 800e926:	4299      	cmp	r1, r3
 800e928:	d002      	beq.n	800e930 <__srefill_r+0xf4>
 800e92a:	0028      	movs	r0, r5
 800e92c:	f7ff f8b8 	bl	800daa0 <_free_r>
 800e930:	2000      	movs	r0, #0
 800e932:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e934:	6360      	str	r0, [r4, #52]	; 0x34
 800e936:	6063      	str	r3, [r4, #4]
 800e938:	4283      	cmp	r3, r0
 800e93a:	d0bd      	beq.n	800e8b8 <__srefill_r+0x7c>
 800e93c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800e93e:	6023      	str	r3, [r4, #0]
 800e940:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e942:	6060      	str	r0, [r4, #4]
 800e944:	e7a2      	b.n	800e88c <__srefill_r+0x50>
 800e946:	46c0      	nop			; (mov r8, r8)
 800e948:	0800effc 	.word	0x0800effc
 800e94c:	0800f01c 	.word	0x0800f01c
 800e950:	0800efdc 	.word	0x0800efdc
 800e954:	0800efa4 	.word	0x0800efa4
 800e958:	0800e825 	.word	0x0800e825

0800e95c <_init>:
 800e95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e95e:	46c0      	nop			; (mov r8, r8)
 800e960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e962:	bc08      	pop	{r3}
 800e964:	469e      	mov	lr, r3
 800e966:	4770      	bx	lr

0800e968 <_fini>:
 800e968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e96a:	46c0      	nop			; (mov r8, r8)
 800e96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e96e:	bc08      	pop	{r3}
 800e970:	469e      	mov	lr, r3
 800e972:	4770      	bx	lr
